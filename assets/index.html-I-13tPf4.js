import{_ as s,c as e,a,o as n}from"./app-DdES4ywf.js";const t={};function p(l,i){return n(),e("div",null,[...i[0]||(i[0]=[a(`<p>配置环境：</p><ul><li>CentOS release 6.8</li><li>pyenv 20160509</li></ul><p>在工作开发中，一直使用 <code>virtualenv</code> 来管理python的包环境。很好的解决了不同项目使用不同python包的需求。对于多python版本的问题如何解决一直无解，虽然可以安装多个</p><p>版本的python，靠绝对路径或靠创建虚拟环境的时候指定python（<code>virtualenv -p</code>）版本来解决，但总感觉不是那么的优雅。同事推荐了 <code>pyenv</code> ，一直没用过，特从网上找了些资料试着配置了下，记录如下。</p><h2 id="pyenv-vs-virtualenv" tabindex="-1"><a class="header-anchor" href="#pyenv-vs-virtualenv"><span>pyenv vs virtualenv</span></a></h2><p>pyenv 是针对 python 版本的管理，通过修改环境变量的方式实现；</p><p>virtualenv 是针对python的包的多版本管理，通过将python包安装到一个模块来作为python的包虚拟环境，通过切换目录来实现不同包环境间的切换。</p><h2 id="pyenv-原理" tabindex="-1"><a class="header-anchor" href="#pyenv-原理"><span>pyenv 原理</span></a></h2><p>pyenv 的美好之处在于，它并没有使用将不同的 $PATH 植入不同的 shell 这种高耦合的工作方式，而是简单地在 $PATH 的最前面插入了一个垫片路径（shims）：</p><p><code>~/.pyenv/shims:/usr/local/bin:/usr/bin:/bin</code>。所有对 Python 可执行文件的查找都会首先被这个 shims 路径截获，从而架空了后面的系统路径。</p><h2 id="pyenv-安装使用" tabindex="-1"><a class="header-anchor" href="#pyenv-安装使用"><span>pyenv 安装使用</span></a></h2><h3 id="自动安装" tabindex="-1"><a class="header-anchor" href="#自动安装"><span>自动安装</span></a></h3><p>pyenv 提供了自动安装的工具，执行命令安装即可：</p><div class="language-base line-numbers-mode" data-highlighter="shiki" data-ext="base" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-base"><span class="line"><span>curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>需保证系统有 <code>git</code> ，否则需要新安装git工具。</p><h3 id="手动安装" tabindex="-1"><a class="header-anchor" href="#手动安装"><span>手动安装</span></a></h3><p>将 pyenv 检出到你想安装的目录。建议路径为：$HOME/.pyenv</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span> $ cd</span></span>
<span class="line"><span> $ git clone git://github.com/yyuu/pyenv.git .pyenv</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>添加环境变量。PYENV_ROOT 指向 pyenv 检出的根目录，并向 $PATH 添加 $PYENV_ROOT/bin 以提供访问 pyenv 这条命令的路径</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span> $ echo &#39;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#39; &gt;&gt; ~/.bash_profile</span></span>
<span class="line"><span> $ echo &#39;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#39; &gt;&gt; ~/.bash_profile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 shell 配置文件（~/.bash_profile）依不同 Linux 而需作修改——Zsh：<sub>/.zshenv；Ubuntu：</sub>/.bashrc <br></p><p>向 shell 添加 pyenv init 以启用 shims 和命令补完功能</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span> $ echo &#39;eval &quot;$(pyenv init -)&quot;&#39; &gt;&gt; ~/.bash_profile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>配置文件的位置同上一条一样需要修改 <br></p><p>重启 shell（因为修改了 $PATH）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span> $ exec $SHELL</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="pyenv-常用命令" tabindex="-1"><a class="header-anchor" href="#pyenv-常用命令"><span>pyenv 常用命令</span></a></h3><h4 id="python配置" tabindex="-1"><a class="header-anchor" href="#python配置"><span>python配置</span></a></h4><p><code>$ pyenv versions</code> -- 查看系统当前安装的python列表</p><p><code>$ pyenv install -v 3.5.1</code> -- 安装python</p><p><code>$ pyenv uninstall 2.7.3</code> -- 卸载python</p><p><code>$ pyenv rehash </code> -- 创建垫片路径（为所有已安装的可执行文件 （如：~/.pyenv/versions/<em>/bin/</em>） 创建 shims，因此，每当你增删了 Python 版本或带有可执行文件的包（如 pip）以后，都应该执行一次本命令）</p><h4 id="python切换" tabindex="-1"><a class="header-anchor" href="#python切换"><span>python切换</span></a></h4><p><code>$ pyenv global 3.4.0 </code> -- 设置全局的 Python 版本，通过将版本号写入 ~/.pyenv/version 文件的方式。</p><p><code>$ pyenv local 2.7.3</code> -- 设置面向程序的本地版本，通过将版本号写入当前目录下的 .python-version 文件的方式。通过这种方式设置的 Python 版本优先级较 global 高。</p><p>pyenv 会从当前目录开始向上逐级查找 .python-version 文件，直到根目录为止。若找不到，就用 global 版本。</p><p><code>$ pyenv shell pypy-2.2.1</code> -- 设置面向 shell 的 Python 版本，通过设置当前 shell 的 PYENV_VERSION 环境变量的方式。这个版本的优先级比 local 和 global 都要高。--unset 参数可以用于取消当前 shell 设定的版本。</p><p><code>$ pyenv shell --unset</code></p><h4 id="python优先级" tabindex="-1"><a class="header-anchor" href="#python优先级"><span>python优先级</span></a></h4><p><code>shell &gt; local &gt; global </code></p><h2 id="pyenv-插件-pyenv-virtualenv" tabindex="-1"><a class="header-anchor" href="#pyenv-插件-pyenv-virtualenv"><span>pyenv 插件: pyenv-virtualenv</span></a></h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><p>使用自动安装pyenv 后，它会自动安装部分插件，通过<code>pyenv-virtualenv</code> 插件可以很好的和 <code>virtualenv</code> 结合：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">root@linux3311 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">~</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"># cd .pyenv/plugins/</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">root@linux3311 plugins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"># ll</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">insgesamt</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 24</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">drwxr-xr-x.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4096</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 19.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jun</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 05:17</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pyenv-doctor</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">drwxr-xr-x.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4096</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 19.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jun</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 05:18</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pyenv-installer</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">drwxr-xr-x.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4096</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 19.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jun</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 05:18</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pyenv-update</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">drwxr-xr-x.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 7</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4096</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 19.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jun</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 05:18</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pyenv-virtualenv</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">drwxr-xr-x.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4096</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 19.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jun</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 05:18</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pyenv-which-ext</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">drwxr-xr-x.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> root</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4096</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 19.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Jun</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 05:17</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> python-build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><ul><li>创建虚拟环境</li></ul><p><code>$ pyenv virtualenv 2.7.10 my-virtual-env-2.7.10</code></p><p>若不指定python 版本，会汇报认使用当前环境python版本。</p><ul><li>列出当前虚拟环境</li></ul><p><code>pyenv virtualenvs</code></p><ul><li>激活虚拟环境</li></ul><p><code>pyenv activate</code></p><ul><li>退出虚拟环境</li></ul><p><code>pyenv deactivate</code></p><ul><li>删除虚拟环境</li></ul><p><code>pyenv uninstall my-virtual-env</code></p><p>使用pyenv 来管理python，使用 pyenv-virtualenv 插件来管理多版本 python包。</p><p>此时，还需注意，当我们将项目运行的 env 环境部署到生产环境时，由于我们的python 包是依赖python 的，需要注意生产环境的python版本问题(详见 <a href="http://pylixm.cc/posts/2016-01-18-Virtualenv-user.html" target="_blank" rel="noopener noreferrer">这里</a>)。</p><p>以上为个人拙见，欢迎小伙伴们留言交流。小伙伴们若有更好的python 多版本环境管理方案，希望留言不吝赐教，在此，先谢过了！</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p>pyenv 下载地址 <a href="https://github.com/yyuu/pyenv/" target="_blank" rel="noopener noreferrer">这里</a> virtualenv 中文文档地址 <a href="http://virtualenv-chinese-docs.readthedocs.io/en/latest/#" target="_blank" rel="noopener noreferrer">这里</a><a href="http://my.oschina.net/lionets/blog/267469" target="_blank" rel="noopener noreferrer">http://my.oschina.net/lionets/blog/267469</a><a href="https://github.com/yyuu/pyenv-virtualenv" target="_blank" rel="noopener noreferrer">https://github.com/yyuu/pyenv-virtualenv</a></p>`,61)])])}const r=s(t,[["render",p]]),d=JSON.parse('{"path":"/pages/004d13/","title":"使用 pyenv + virtualenv 打造多版本python开发环境","lang":"zh-CN","frontmatter":{"title":"使用 pyenv + virtualenv 打造多版本python开发环境","tags":["virtualenv","pyenv"],"permalink":"/pages/004d13/","createTime":"2023/09/08 17:36:02","description":"配置环境： CentOS release 6.8 pyenv 20160509 在工作开发中，一直使用 virtualenv 来管理python的包环境。很好的解决了不同项目使用不同python包的需求。对于多python版本的问题如何解决一直无解，虽然可以安装多个 版本的python，靠绝对路径或靠创建虚拟环境的时候指定python（virtuale...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 pyenv + virtualenv 打造多版本python开发环境\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/004d13/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"使用 pyenv + virtualenv 打造多版本python开发环境"}],["meta",{"property":"og:description","content":"配置环境： CentOS release 6.8 pyenv 20160509 在工作开发中，一直使用 virtualenv 来管理python的包环境。很好的解决了不同项目使用不同python包的需求。对于多python版本的问题如何解决一直无解，虽然可以安装多个 版本的python，靠绝对路径或靠创建虚拟环境的时候指定python（virtuale..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"pyenv"}],["meta",{"property":"article:tag","content":"virtualenv"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":4,"words":1199},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"01.开发语言/01.Python/30.virtualenv/20.Virtualenv-install.md","headers":[],"categoryList":[{"id":"59843f","sort":1,"name":"开发语言"},{"id":"9d2a49","sort":1,"name":"Python"},{"id":"2c5cb2","sort":30,"name":"virtualenv"}]}');export{r as comp,d as data};
