import{_ as t,c as n,b as o,a as i,e as r,w as p,r as s,o as l,d}from"./app-DdES4ywf.js";const c={};function h(m,a){const e=s("VPLink");return l(),n("div",null,[o("p",null,[r(e,{href:"/pages/39558d/"},{default:p(()=>[...a[0]||(a[0]=[d("其他章节索引页",-1)])]),_:1})]),a[1]||(a[1]=i('<h1 id="第二章-django-环境配置" tabindex="-1"><a class="header-anchor" href="#第二章-django-环境配置"><span>第二章 django 环境配置</span></a></h1><h2 id="使用相同的数据库引擎配置" tabindex="-1"><a class="header-anchor" href="#使用相同的数据库引擎配置"><span>使用相同的数据库引擎配置</span></a></h2><p>在不同的环境下使用不同的数据库，而希望其行为一致。这种做法是很危险的，会带来不可预知的问题。</p><p>问题：</p><ul><li>生产数据不能够精确的恢复到本地</li><li>不同数据库的字段的类型和约束行为不同</li><li>Fixtures 并不是万能的解决方案。请不要使用它来迁移生产数据。</li></ul><h2 id="使用-pip-和-virtualenv" tabindex="-1"><a class="header-anchor" href="#使用-pip-和-virtualenv"><span>使用 Pip 和 Virtualenv</span></a></h2><p>pip : python 包管理工具，方便的安装和卸载python 三方库包。</p><p>virtualenv : python 孤立的运行环境，可以将不同版本的 python 三方包分离，当需要的时候切换。</p><p>virtualenvwrapper ：Virtualenvwrapper is a popular companion tool to pip and virtualenv and makes our lives easier, but it’s not an absolute necessity.</p><h2 id="使用-pip-安装django和开发依赖包" tabindex="-1"><a class="header-anchor" href="#使用-pip-安装django和开发依赖包"><span>使用 pip 安装django和开发依赖包</span></a></h2><h2 id="使用版本控制软件" tabindex="-1"><a class="header-anchor" href="#使用版本控制软件"><span>使用版本控制软件</span></a></h2><p>推荐：</p><ul><li>git</li><li>Mercurial</li></ul><h2 id="尽量保证开发和生产环境的一致性" tabindex="-1"><a class="header-anchor" href="#尽量保证开发和生产环境的一致性"><span>尽量保证开发和生产环境的一致性</span></a></h2><ul><li>可以使用 Vagrant and VirtualBox 来虚拟生产环境。</li></ul>',15))])}const u=t(c,[["render",h]]),y=JSON.parse('{"path":"/pages/dd23b2/","title":"Django最佳实践-读书笔记-第二章-django环境配置","lang":"zh-CN","frontmatter":{"title":"Django最佳实践-读书笔记-第二章-django环境配置","tags":["Django","Django最佳实践"],"permalink":"/pages/dd23b2/","createTime":"2023/09/08 17:36:02","description":"第二章 django 环境配置 使用相同的数据库引擎配置 在不同的环境下使用不同的数据库，而希望其行为一致。这种做法是很危险的，会带来不可预知的问题。 问题： 生产数据不能够精确的恢复到本地 不同数据库的字段的类型和约束行为不同 Fixtures 并不是万能的解决方案。请不要使用它来迁移生产数据。 使用 Pip 和 Virtualenv pip : p...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Django最佳实践-读书笔记-第二章-django环境配置\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/dd23b2/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"Django最佳实践-读书笔记-第二章-django环境配置"}],["meta",{"property":"og:description","content":"第二章 django 环境配置 使用相同的数据库引擎配置 在不同的环境下使用不同的数据库，而希望其行为一致。这种做法是很危险的，会带来不可预知的问题。 问题： 生产数据不能够精确的恢复到本地 不同数据库的字段的类型和约束行为不同 Fixtures 并不是万能的解决方案。请不要使用它来迁移生产数据。 使用 Pip 和 Virtualenv pip : p..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"Django最佳实践"}],["meta",{"property":"article:tag","content":"Django"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":0.98,"words":293},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"01.开发语言/01.Python/03.Best.Practices.for.Django/02.Best.Practices.for.Django.1.8.3rd-Chapter-2.md","headers":[],"categoryList":[{"id":"59843f","sort":1,"name":"开发语言"},{"id":"9d2a49","sort":1,"name":"Python"},{"id":"34f757","sort":3,"name":"Best.Practices.for.Django"}]}');export{u as comp,y as data};
