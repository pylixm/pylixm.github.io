import{_ as t,c as r,a as o,o as a}from"./app-DdES4ywf.js";const n="/imgs/k8s/itops-history_of_containers.png",s="/imgs/k8s/Kubernetes-Architecture.png",i="/imgs/k8s/Kubernetes-Master.png",l="/imgs/k8s/Kubernetes-Node.png",p={};function c(d,e){return a(),r("div",null,[...e[0]||(e[0]=[o('<blockquote><p>Kubernetes 学习笔记，是个人学习记录文章，主要内容为摘录、总结和自己实践的记录，希望能帮助到和我一样正在学习的朋友。作为学习笔记，难免有理解不到位的地方，还请指正。</p></blockquote><h2 id="容器发展史" tabindex="-1"><a class="header-anchor" href="#容器发展史"><span>容器发展史</span></a></h2><p>容器发展到今天，已成为各大公司保障快速响应复杂业务场景的利器。容器的发展史，可通过下面这张图了解，一图胜千言。</p><p><img src="'+n+'" alt=""></p><p>（图片来源：https://searchcloudcomputing.techtarget.com/tip/The-future-of-the-Kubernetes-ecosystem-isnt-all-about-cloud）</p><p>网上能找到大量的资料，这里找了些不错的资料，可以参考：</p><ul><li><a href="https://www.infoq.cn/article/SS6SItkLGoLExQP4uMr5" target="_blank" rel="noopener noreferrer">40 年回顾，一文读懂容器发展史 - InfoQ</a></li><li><a href="https://liupzmin.com/2019/11/06/docker/container-chat/" target="_blank" rel="noopener noreferrer">漫谈容器发展史 - 兔子先生</a></li><li><a href="https://medium.com/faun/the-missing-introduction-to-containerization-de1fbb73efc5" target="_blank" rel="noopener noreferrer">容器发展简史 - 英文版</a></li><li><a href="http://dockone.io/article/8832" target="_blank" rel="noopener noreferrer">容器发展简史 - 中译版</a></li></ul><h2 id="kubernetes-简介" tabindex="-1"><a class="header-anchor" href="#kubernetes-简介"><span>Kubernetes 简介</span></a></h2><p>Kubernetes ，简称<code>K8S</code>，是<code>Google</code>在2014年6月开源的一个容器集群管理系统，K8S主要用于自动化部署、扩展和管理容器应用，提供了资源调度、部署管理、服务发现、扩容缩容、监控等一套功能，<code>Kubernetes</code>目标是让部署容器化应用更简单。</p><p>K8S，这是一种数字缩写 (Numeronym) 方式。类似的如<code>internationalization</code>(国际化) 叫做<code>i18n</code>、<code>accessibility</code>叫做<code>a11y</code>等</p><p>Kubernetes 主要有以下特性：</p><p><strong>自我修复</strong></p><p>在节点故障时重新启动失败的容器，替换和重新部署，保证预期的副本数量，杀死健康检查失败的容器，并且在未准备好之前不会处理客户端请求，确保线上服务不中断</p><p><strong>弹性伸缩</strong></p><p>使用命令、UI或者基于CPU使用情况自动快速扩容和缩容程序实例，确保应用服务高峰并发时的高可用性，业务低峰时回收资源，以最小成本运行服务，这个比较流啤</p><p><strong>自动部署和回滚</strong></p><p>K8S采用滚动更新策略更新应用，一次更新一个<code>Pod</code>，如果过程中出现问题，将回滚更改，保证升级不会影响业务</p><p><strong>服务发现和负载均衡</strong></p><p>K8S为多个容器提供一个统一访问入口（内部IP地址和一个DNS名称），并且负载均衡关联所有容器，是用户无需考虑容器<code>IP</code>问题。</p><p><strong>机密和配置管理</strong></p><p>管理机密数据和应用程序配置，而不需要把敏感数据暴露在镜像里，提高敏感数据安全性，并可以将一些常用的配置存储在<code>K8S</code>里，方便应用程序使用。</p><p><strong>存储编排</strong></p><p>挂载外部存储系统，无论是来自本地存储，公有云，还是网络存储(如NFS)都作为集群资源的一部分使用，极大提高存储使用的灵活性。</p><p><strong>批处理</strong></p><p>提供一次性任务，定时任务，满足批量数据处理和分析场景。</p><h2 id="kubernetes-架构组件" tabindex="-1"><a class="header-anchor" href="#kubernetes-架构组件"><span>Kubernetes 架构组件</span></a></h2><p>Kubernetes 集群架构可按角色分为Master 和 Node ,简单的架构图下图所示：</p><p><img src="'+s+'" alt=""></p><p>（图片来源：https://thenewstack.io/kubernetes-an-overview/）</p><h3 id="master-节点" tabindex="-1"><a class="header-anchor" href="#master-节点"><span>Master 节点</span></a></h3><p><img src="'+i+'" alt=""></p><p>Master 节点主要包括如下组件：</p><ul><li>Kube-apiserver <ul><li>Kubernetes API 集群统一入口，各组件协调者，以RESTful API 提供接口服务，所有对象资源的增删改查和监听都交给<code>APIServer</code>处理后在提交给<code>Etcd</code>存储。</li></ul></li><li>kube-controller-manager <ul><li>处理集群中常规后台任务，一个资源对应一个控制器，而Controller Manager 就是负责管理这些控制器的。管理维护集群的状态，比如故障检测、自动扩展、滚动更新等</li></ul></li><li>kube-scheduler <ul><li>负责集群pod的调度。根据调度算法为新创建的<code>Pod</code>选择一个<code>Node</code>节点，可以任意部署，可以部署在同一个节点上，也可以部署在不同的节点上。</li></ul></li><li>etcd <ul><li>分布式键值存储系统，用户保存集群状态数据，比如<code>Pod</code>、<code>Service</code>等对象信息</li></ul></li></ul><h3 id="node-节点" tabindex="-1"><a class="header-anchor" href="#node-节点"><span>Node 节点</span></a></h3><p><img src="'+l+'" alt=""></p><ul><li>kubelet <ul><li>是<code>Master</code>在<code>Node</code>节点上的<code>Agent</code>，管理本机运行容器的生命周期，如创建容器、获取容器和节点状态等工作，同时也负责容器卷插件Volume（CVI）和容器网络插件（CNI）的管理。</li></ul></li><li>kube-proxy <ul><li>在<code>Node</code>节点上实现<code>Pod</code>网络代理并执行链接转发，维护网络规则和四层负载均衡工作。</li></ul></li><li>容器运行时（docker 或 rocket, containerd） <ul><li>容器引擎，运行容器</li></ul></li></ul><h2 id="kubernetes-核心概念" tabindex="-1"><a class="header-anchor" href="#kubernetes-核心概念"><span>kubernetes 核心概念</span></a></h2><h3 id="pod" tabindex="-1"><a class="header-anchor" href="#pod"><span>Pod</span></a></h3><ul><li>最小部署单元</li><li>一组容器的集合</li><li>一个Pod中的容器共享网络命名空间</li><li>Pod是短暂的</li></ul><h3 id="controllers控制资源" tabindex="-1"><a class="header-anchor" href="#controllers控制资源"><span>Controllers控制资源</span></a></h3><ul><li>ReplicaSet：确保预期的Pod副本数量</li><li>Deployment：无状态应用部署</li><li>StatefulSet：有状态应用部署</li><li>DaenonSet：确保所有的<code>Node</code>运行同一个<code>Pod</code></li><li>Job：一次性任务</li><li>Cronjob：定时任务</li><li>更高层次对象，部署和管理Pod</li></ul><h3 id="service" tabindex="-1"><a class="header-anchor" href="#service"><span>Service</span></a></h3><ul><li>Pod 的上层统一访问入口，防止pod 扩缩容后ip或端口变化后失联。</li><li>定义一组Pod访问策略：ClusterIP、NodePort 、LoadBalancer等。</li></ul><h3 id="label" tabindex="-1"><a class="header-anchor" href="#label"><span>Label</span></a></h3><ul><li>标签，附加到某个资源上，用于关联对象，查询和筛选</li></ul><h3 id="namespaces" tabindex="-1"><a class="header-anchor" href="#namespaces"><span>Namespaces</span></a></h3><ul><li>命名空间，将对象逻辑上隔离</li></ul><h3 id="annotations" tabindex="-1"><a class="header-anchor" href="#annotations"><span>Annotations</span></a></h3><ul><li>注释</li></ul><p>至此，Kubernetes 基本概念学习完成了。后续我会根据自己对K8S的理解不定期更新，也请期待后续的学习笔记。希望能帮助到学习K8S的同学，欢迎留言交流，共同学习。</p><h2 id="扩展阅读" tabindex="-1"><a class="header-anchor" href="#扩展阅读"><span>扩展阅读</span></a></h2><ul><li><p><a href="https://kubernetes.io" target="_blank" rel="noopener noreferrer">Kubernetes官网</a></p></li><li><p><a href="https://thenewstack.io/kubernetes-an-overview/" target="_blank" rel="noopener noreferrer">KUBERNETES: AN OVERVIEW</a></p></li><li><p><a href="https://www.dongwm.com/post/use-kubernetes-1" target="_blank" rel="noopener noreferrer">Kubernetes基础篇 - 小明明S À DOMICILE</a></p></li><li><p><a href="http://www.k8smeetup.com/article/VyaHa$XRm" target="_blank" rel="noopener noreferrer">Kubernetes配置管理最佳实践</a></p></li><li><p><a href="https://www.qikqiak.com/k8s-book/docs/14.Kubernetes%E5%88%9D%E4%BD%93%E9%AA%8C.html" target="_blank" rel="noopener noreferrer">Kubernetes初体验</a></p></li><li><p><a href="https://www.infoq.cn/article/KNMAVdo3jXs3qPKqTZBw" target="_blank" rel="noopener noreferrer">从零开始入门 K8s：详解 K8s 核心概念 - InfoQ</a></p></li></ul>',52)])])}const u=t(p,[["render",c]]),m=JSON.parse('{"path":"/pages/8f4685/","title":"Kubernetes 学习笔记-基础篇","lang":"zh-CN","frontmatter":{"title":"Kubernetes 学习笔记-基础篇","tags":["Kubernetes","docker"],"permalink":"/pages/8f4685/","createTime":"2023/09/08 17:36:02","description":"Kubernetes 学习笔记，是个人学习记录文章，主要内容为摘录、总结和自己实践的记录，希望能帮助到和我一样正在学习的朋友。作为学习笔记，难免有理解不到位的地方，还请指正。 容器发展史 容器发展到今天，已成为各大公司保障快速响应复杂业务场景的利器。容器的发展史，可通过下面这张图了解，一图胜千言。 （图片来源：https://searchcloudco...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kubernetes 学习笔记-基础篇\\",\\"image\\":[\\"https://pylixm.top/imgs/k8s/itops-history_of_containers.png\\",\\"https://pylixm.top/imgs/k8s/Kubernetes-Architecture.png\\",\\"https://pylixm.top/imgs/k8s/Kubernetes-Master.png\\",\\"https://pylixm.top/imgs/k8s/Kubernetes-Node.png\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/8f4685/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"Kubernetes 学习笔记-基础篇"}],["meta",{"property":"og:description","content":"Kubernetes 学习笔记，是个人学习记录文章，主要内容为摘录、总结和自己实践的记录，希望能帮助到和我一样正在学习的朋友。作为学习笔记，难免有理解不到位的地方，还请指正。 容器发展史 容器发展到今天，已成为各大公司保障快速响应复杂业务场景的利器。容器的发展史，可通过下面这张图了解，一图胜千言。 （图片来源：https://searchcloudco..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pylixm.top/imgs/k8s/itops-history_of_containers.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"Kubernetes"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":4.91,"words":1474},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"04.云原生/03.k8s/01.K8s-base.md","headers":[],"categoryList":[{"id":"e467f5","sort":4,"name":"云原生"},{"id":"315d2b","sort":3,"name":"k8s"}]}');export{u as comp,m as data};
