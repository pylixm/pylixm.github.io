import{_ as e,c as a,a as r,o as p}from"./app-DdES4ywf.js";const o={};function n(i,t){return p(),a("div",null,[...t[0]||(t[0]=[r('<blockquote><p>《数据结构与算法-王争》学习笔记，记录备查</p></blockquote><h2 id="可用递归解决的问题的三个条件" tabindex="-1"><a class="header-anchor" href="#可用递归解决的问题的三个条件"><span>可用递归解决的问题的三个条件</span></a></h2><ul><li><p>一个问题的解可以分解为几个子问题的解</p></li><li><p>这个问题和子问题之后的子问题，除了数据规模不同，求解思路完全一致。</p></li><li><p>存在递归终止条件</p></li></ul><h2 id="如何编写递归代码" tabindex="-1"><a class="header-anchor" href="#如何编写递归代码"><span>如何编写递归代码</span></a></h2><p><strong>关键：写出递归公式，找到终止条件</strong></p><p>写递归代码的关键就是找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后再推敲终止条件，最后将递推公式和终止条件翻译成代码。</p><h2 id="递归使用时需要注意的问题" tabindex="-1"><a class="header-anchor" href="#递归使用时需要注意的问题"><span>递归使用时需要注意的问题</span></a></h2><h3 id="堆栈溢出" tabindex="-1"><a class="header-anchor" href="#堆栈溢出"><span>堆栈溢出</span></a></h3><p>我们知道函数的临时变量时使用栈来保存的，当函数递归的深度大于栈的大小时，就发生溢出。</p><p>规定递归的深度可以部分解决堆栈的溢出的问题。因为最大允许的递归深度跟当前线程剩余的栈空间大小有关，事先无法计算，不合适使用该方法。</p><h3 id="递归警惕重复计算" tabindex="-1"><a class="header-anchor" href="#递归警惕重复计算"><span>递归警惕重复计算</span></a></h3><p>递归使用时，还会出现重复计算的问题。</p><p>可通过一个数据结构（如散列表）暂存以计算的值，等递归时先查询是否已经计算过，如以计算直接返回即可。</p><p>递归还有些其他问题，如空间复杂度高、过多的函数调用会耗时较多等。</p><h2 id="递归改写成非递归" tabindex="-1"><a class="header-anchor" href="#递归改写成非递归"><span>递归改写成非递归</span></a></h2><p>递归代码归根结底是利用了栈的出栈、入栈，如果我们自己模拟栈的操作，理论上来说任何递归都可以改写成非递归方式。</p>',16)])])}const c=e(o,[["render",n]]),l=JSON.parse('{"path":"/data-structure-algorithm/45357e/","title":"数据结构与算法 - 算法 - 递归","lang":"zh-CN","frontmatter":{"title":"数据结构与算法 - 算法 - 递归","tags":["数据结构与算法","递归"],"permalink":"/data-structure-algorithm/45357e/","createTime":"2023/09/08 17:36:02","description":"《数据结构与算法-王争》学习笔记，记录备查 可用递归解决的问题的三个条件 一个问题的解可以分解为几个子问题的解 这个问题和子问题之后的子问题，除了数据规模不同，求解思路完全一致。 存在递归终止条件 如何编写递归代码 关键：写出递归公式，找到终止条件 写递归代码的关键就是找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后再推敲终止条件，最后...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构与算法 - 算法 - 递归\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/data-structure-algorithm/45357e/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"数据结构与算法 - 算法 - 递归"}],["meta",{"property":"og:description","content":"《数据结构与算法-王争》学习笔记，记录备查 可用递归解决的问题的三个条件 一个问题的解可以分解为几个子问题的解 这个问题和子问题之后的子问题，除了数据规模不同，求解思路完全一致。 存在递归终止条件 如何编写递归代码 关键：写出递归公式，找到终止条件 写递归代码的关键就是找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后再推敲终止条件，最后..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"递归"}],["meta",{"property":"article:tag","content":"数据结构与算法"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":1.58,"words":475},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"notes/04.数据结构与算法笔记/13.DSALG-recursion.md","headers":[]}');export{c as comp,l as data};
