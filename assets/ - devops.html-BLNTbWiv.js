import{_ as e,c as i,a as p,o as l}from"./app-DdES4ywf.js";const a="/imgs/cd-recreate.gif",s="/imgs/cd-ramped.gif",r="/imgs/cd-blue-green.gif",o="/imgs/cd-canary.gif",n="/imgs/cd-a-b.gif",c="/imgs/cd-shadow.gif",m="/imgs/cd_deployment_strategies.png",g={};function d(h,t){return l(),i("div",null,[...t[0]||(t[0]=[p('<blockquote><p>原文： https://thenewstack.io/deployment-strategies/</p></blockquote><p>有多种技术可以将新应用程序部署到生产中，因此选择正确的策略是一个重要的决定，根据变更对系统和最终用户的影响权衡选项。</p><p>在这篇文章中，我们将讨论以下策略：</p><ul><li>Recreate（重新创建）：版本 A 终止，然后版本 B 推出。</li><li>Ramped（也称为滚动更新或增量）：版本 B 慢慢推出并替换版本 A。</li><li>Blue/Green : 版本 B 与版本 A 一起发布，然后流量切换到版本 B。</li><li>Canary（金丝雀）：版本 B 发布给一部分用户，然后进行全面推出。</li><li>A/B 测试：版本 B 在特定条件下发布给一部分用户。</li><li>Shadow：版本 B 与版本 A 一起接收真实世界的流量，并且不影响响应。</li></ul><p>让我们来看看每种策略，看看哪种策略最适合特定用例。为了简单起见，我们使用了Kubernetes并针对Minikube测试了示例。<a href="https://github.com/ContainerSolutions/k8s-deployment-strategies" target="_blank" rel="noopener noreferrer">可以在这个 git 存储库</a>中找到每个策略的配置示例和分步方法。</p><h2 id="重建部署" tabindex="-1"><a class="header-anchor" href="#重建部署"><span>重建部署</span></a></h2><p>重新创建策略是一个虚拟部署，包括关闭版本 A，然后在关闭版本 A 后部署版本 B。这种技术意味着服务的停机时间取决于应用程序的关闭和启动持续时间。</p><p><img src="'+a+'" alt=""></p><p><strong>优点：</strong></p><ul><li>易于设置。</li><li>申请状态完全更新。</li></ul><p><strong>缺点：</strong></p><ul><li>对用户影响很大，预计停机时间取决于应用程序的关闭和启动持续时间。</li></ul><h2 id="增量部署" tabindex="-1"><a class="header-anchor" href="#增量部署"><span>增量部署</span></a></h2><p>增量部署策略包括通过一个接一个地替换实例来缓慢推出应用程序的一个版本，直到所有实例都推出。它通常遵循以下过程：<em>在负载均衡器后面使用版本 A 的池，部署版本 B 的一个实例。当服务准备好接受流量时，实例将添加到池中。然后，版本 A 的一个实例从池中删除并关闭。</em></p><p>根据负责增量部署的系统，您可以调整以下参数以增加部署时间：</p><ul><li>并行度，最大批处理大小：要推出的并发实例数。</li><li>最大冗余实例（Max surge）：除了当前数量之外要添加多少个实例。</li><li>最大不可用：滚动更新过程中不可用实例的数量。</li></ul><p><img src="'+s+'" alt=""></p><p><strong>优点：</strong></p><ul><li>易于设置。</li><li>版本在实例之间缓慢发布。</li><li>对于可以处理数据重新平衡的有状态应用程序来说很方便。</li></ul><p><strong>缺点：</strong></p><ul><li>推出/回滚可能需要时间。</li><li>支持多个 API 很难。</li><li>无法控制流量。</li></ul><h2 id="蓝绿" tabindex="-1"><a class="header-anchor" href="#蓝绿"><span>蓝绿</span></a></h2><p>蓝/绿部署策略不同于增量部署，版本 B（绿色）与版本 A（蓝色）一起部署，实例数量完全相同。在测试新版本满足所有要求后，流量在负载均衡器级别从版本 A 切换到版本 B。</p><p><img src="'+r+'" alt=""></p><p><strong>优点：</strong></p><ul><li>实时推出/回滚。</li><li>避免版本控制问题，整个应用程序状态一次性更改。</li></ul><p><strong>缺点：</strong></p><ul><li>昂贵，因为它需要双倍的资源。</li><li>在发布到生产环境之前，应对整个平台进行适当的测试。</li><li>处理有状态的应用程序可能很困难。</li></ul><h2 id="金丝雀" tabindex="-1"><a class="header-anchor" href="#金丝雀"><span>金丝雀</span></a></h2><p>金丝雀部署包括逐渐将生产流量从版本 A 转移到版本 B。通常流量根据权重进行拆分。例如，90% 的请求转到版本 A，10% 转到版本 B。</p><p>当测试缺乏或不可靠，或者对平台上新版本的稳定性缺乏信心时，通常会使用此技术。</p><p><img src="'+o+'" alt=""></p><p><strong>优点：</strong></p><ul><li>为部分用户发布的版本。</li><li>便于错误率和性能监控。</li><li>快速回滚。</li></ul><p><strong>缺点：</strong></p><ul><li>缓慢推出。</li></ul><h2 id="a-b测试" tabindex="-1"><a class="header-anchor" href="#a-b测试"><span>A/B测试</span></a></h2><p>A/B 测试部署包括在特定条件下将用户子集路由到新功能。它通常是一种根据统计数据做出业务决策的技术，而不是部署策略。但是，它是相关的，可以通过向金丝雀部署添加额外功能来实现，因此我们将在此处简要讨论。</p><p>这种技术广泛用于测试给定功能的转换，并且只推出转换最多的版本。</p><p>以下是可用于在版本之间分配流量的条件列表：</p><ul><li>通过浏览器 cookie</li><li>查询参数</li><li>地理定位</li><li>技术支持：浏览器版本、屏幕尺寸、操作系统等。</li><li>语言</li></ul><p><img src="'+n+'" alt=""></p><p><strong>优点：</strong></p><ul><li>多个版本并行运行。</li><li>完全控制流量分配。</li></ul><p><strong>缺点：</strong></p><ul><li>需要智能负载平衡器。</li><li>很难对给定会话的错误进行故障排除，分布式跟踪成为强制性的。</li></ul><h2 id="影子部署" tabindex="-1"><a class="header-anchor" href="#影子部署"><span>影子部署</span></a></h2><p>影子部署包括与版本 A 一起发布版本 B，分叉版本 A 的传入请求并将它们发送到版本 B，同时不影响生产流量。这对于测试新功能的生产负载特别有用。当稳定性和性能满足要求时，触发应用程序的上线。</p><p>这种技术设置起来相当复杂，需要特殊要求，尤其是出口流量。例如，给定一个购物车平台，如果您想对支付服务进行影子测试，您最终可能会让客户为他们的订单支付两次。在这种情况下，您可以通过创建一个复制来自提供者的响应的模拟服务来解决它。</p><p><img src="'+c+'" alt=""></p><p><strong>优点：</strong></p><ul><li>使用生产流量对应用程序进行性能测试。</li><li>对用户没有影响。</li><li>直到应用程序的稳定性和性能满足要求后才能上线。</li></ul><p><strong>缺点：</strong></p><ul><li>昂贵，因为它需要双倍的资源。</li><li>不是真正的用户测试，可能会产生误导。</li><li>设置复杂。</li><li>某些情况下需要模拟服务。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>有多种方法可以部署新版本的应用程序，这实际上取决于需求和预算。发布到开发/暂存环境时，重新创建或增量部署通常是一个不错的选择。在生产方面，增量部署或蓝/绿部署通常很合适，但需要对新平台进行适当的测试。</p><p>蓝/绿和影子战略对预算的影响更大，因为它需要双倍的资源能力。如果应用程序缺乏测试或对软件的影响/稳定性缺乏信心，则可以使用金丝雀、a/b 测试或影子发布。</p><p>如果您的企业需要在特定用户群中测试新功能，这些用户群可以根据某些参数（如地理位置、语言、操作系统或浏览器功能）进行过滤，那么您可能需要使用 a/b 测试技术。</p><p>最后但同样重要的是，影子发布很复杂，需要额外的工作来模拟出口流量，这在使用可变操作（电子邮件、银行等）调用外部依赖项时是强制性的。但是，当迁移到新的数据库技术并使用影子流量来监控负载下的系统性能时，此技术可能很有用。</p><p>下图可帮助您选择正确的策略：</p><p><img src="'+m+'" alt=""></p>',61)])])}const y=e(g,[["render",d]]),_=JSON.parse('{"path":"/pages/0d9aec/%20-%20devops","title":"CD的六大部署策略","lang":"zh-CN","frontmatter":{"title":"CD的六大部署策略","permalink":"/pages/0d9aec/ - devops","tags":[null],"createTime":"2023/09/08 17:36:02","description":"原文： https://thenewstack.io/deployment-strategies/ 有多种技术可以将新应用程序部署到生产中，因此选择正确的策略是一个重要的决定，根据变更对系统和最终用户的影响权衡选项。 在这篇文章中，我们将讨论以下策略： Recreate（重新创建）：版本 A 终止，然后版本 B 推出。 Ramped（也称为滚动更新或增...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CD的六大部署策略\\",\\"image\\":[\\"https://pylixm.top/imgs/cd-recreate.gif\\",\\"https://pylixm.top/imgs/cd-ramped.gif\\",\\"https://pylixm.top/imgs/cd-blue-green.gif\\",\\"https://pylixm.top/imgs/cd-canary.gif\\",\\"https://pylixm.top/imgs/cd-a-b.gif\\",\\"https://pylixm.top/imgs/cd-shadow.gif\\",\\"https://pylixm.top/imgs/cd_deployment_strategies.png\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/0d9aec/%20-%20devops"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"CD的六大部署策略"}],["meta",{"property":"og:description","content":"原文： https://thenewstack.io/deployment-strategies/ 有多种技术可以将新应用程序部署到生产中，因此选择正确的策略是一个重要的决定，根据变更对系统和最终用户的影响权衡选项。 在这篇文章中，我们将讨论以下策略： Recreate（重新创建）：版本 A 终止，然后版本 B 推出。 Ramped（也称为滚动更新或增..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pylixm.top/imgs/cd-recreate.gif"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":6.14,"words":1843},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"05.运维/02.devops/03.CD的六大部署策略.md","headers":[],"categoryList":[{"id":"8091bd","sort":5,"name":"运维"},{"id":"d0f83d","sort":2,"name":"devops"}]}');export{y as comp,_ as data};
