import{_ as r}from"./docker-config-2-MVU6Cp8w.js";import{_ as o,c as a,a as t,o as c}from"./app-DdES4ywf.js";const i="/imgs/docker-config-1.png",p="/imgs/docker-compose-pycharm.png",n={};function s(d,e){return c(),a("div",null,[...e[0]||(e[0]=[t('<blockquote><p><em>update：2018-05-31</em> 本文针对 <code>Pycharm2017.3</code>。 最近在学习docker，作为一个pycharm重度使用者，很想知道怎么在pycharm里使用docker,看到官博的这2片文章不错，摘录翻译备查。水平有限，还请批评指正！</p></blockquote><p>现在的开发工作流程中，强调开发和生产中的隔离和再现性。 Docker和容器平台技术已经变得非常受欢迎。 现在 PyCharm 已支持Docker作为远程解释器使用。</p><p>让我们来看看在pycharm中，docker是如何使用的：</p><ul><li>获取针对Django的Docker镜像。</li><li>做一个Django示例项目</li><li>创建一个Docker解释器来运行项目</li><li>Django运行配置在启动时创建一个新容器，并在停止时将其移除</li></ul><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>在Python中，当您运行应用程序时，Django站点，数据库脚本等 - 您需要一个环境来运行它。 Python具有管理环境并使其可重复的工具，例如virutal environment，pip require.txt文件和setup.py依赖项。 但是应用程序的非Python部分呢？</p><p>容器是一个解决方案。 在Docker中，容器是一个运行在计算机内部的，独立的，运行着各种软件的空间。 它们可以快速且很容易地创建，开始，停止和销毁。 这是理想的，不仅仅是为了开发，还有部署。</p><h2 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span>准备</span></a></h2><p>首先，确保您的环境中设置了docker和docker-machine。 Docker安装是无痛的，网站文档相当友好。 您将需要一个Docker“主机”虚拟机的安装和运行，包括在Linux上。 在Windows和OS X上，安装Docker Toolbox是免费的。</p><p>接下来，我们必须在我们的容器中确定我们想要什么软件。 在Docker中，容器使用“images”构建：预先安装的软件集合以及在容器创建过程中调用的配置。 与PyCharm中的其他解释器不同，您不必访问Project Interpreter首选项以添加Python依赖包，所有的python依赖项都需要放入您选择的Docker镜像中。</p><p>django的docker开发环境可以基于<code>minimum/docker-django-mysite</code>镜像，其中包含足够的Python/Django软件来运行PyCharm生成的Django启动项目。 您可以使用以下命令将其提取到系统上：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pull</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> minimum/docker-django-mysite</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>一旦Docker镜像在本地可用，PyCharm便可为您的项目创建基于该映像的Docker容器作为python解释器使用。</p><p>或者，您可以跳过此步骤，在创建基于Docker的远程解释器时，键入镜像名称拉取镜像使用。</p><p>注意：您可以选择使用Dockerfile制作自己的镜像。 一旦你制作镜像，PyCharm便可根据它做Docker解释器。</p><h2 id="开始使用" tabindex="-1"><a class="header-anchor" href="#开始使用"><span>开始使用</span></a></h2><h3 id="创建django项目" tabindex="-1"><a class="header-anchor" href="#创建django项目"><span>创建django项目</span></a></h3><p>让我们创建一个Django项目，然后为它设置一个Docker解释器。 在PyCharm中，选择File - &gt;create new project，单击Django，并按照正常的进程制作Django项目。</p><p><code>在创建项目期间，您必须使用 local interpreter。 如果您尝试制作 Docker interpreter，PyCharm会发出警告，指出您只能使用 local interpreter。</code></p><p>此步骤的结果是本地计算机上的一个目录，其中包含示例Django代码和Django特定的PyCharm运行配置。</p><h3 id="配置一个docker-interpreter-运行项目" tabindex="-1"><a class="header-anchor" href="#配置一个docker-interpreter-运行项目"><span>配置一个docker interpreter，运行项目</span></a></h3><ul><li><p>1、到<code>Preferences -&gt; Project Interpreter -&gt; Add Romete </code>，选择本地的可用Docker 镜像,如图： <img src="'+i+'" alt=""></p></li><li><p>2、配置<code>Edite configrations</code>, 将host设置为<code>0.0.0.0</code>, 选择刚才添加的项目解释器，并配置容器运行参数<code>Docker container settings</code>，如图： <img src="'+r+'" alt=""></p></li></ul><p>说明：</p><ul><li><p>容器端口：8000 映射到主机端口 80</p></li><li><p>挂载项目目录的数据卷： <code> /Users/pylixm/docker.dev/django-demo/mysite:/code/mysite</code></p></li><li><p>3、正常启动项目，访问<code>http://0.0.0.0:80</code>,即可看到亲切的欢迎界面。</p></li></ul><h3 id="pycharm-在运行时-会做什么" tabindex="-1"><a class="header-anchor" href="#pycharm-在运行时-会做什么"><span>pycharm 在运行时，会做什么</span></a></h3><ul><li>它会基于我们选择的项目解释器的docker镜像创建并启动一个新的容器。</li><li>此容器将您的项目目录装载到容器中 <code>/opt/project</code>的容器中。 注意：在Linux上，您当前必须手动执行此卷映射。</li><li>此容器还安装PyCharm所需的卷以完成其工作：Python骨架和Python库源。</li><li>然后执行运行配置的Python命令。</li></ul><h2 id="使用-docker-compose" tabindex="-1"><a class="header-anchor" href="#使用-docker-compose"><span>使用 docker-compose</span></a></h2><p>编写好 compose 配置文件，可参考 <a href="https://github.com/pydanny/cookiecutter-django/" target="_blank" rel="noopener noreferrer">https://github.com/pydanny/cookiecutter-django/</a>。 pycharm 项目解释器选择如下： <img src="'+p+'" alt=""></p><p>当 compose 配置服务太多时，构建可能比较慢。可参考官博上的<a href="https://github.com/ErnstHaagsman/flask-compose/blob/master/docker-compose.dev.yml" target="_blank" rel="noopener noreferrer">flask实例</a>，查看运行情况。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://blog.jetbrains.com/pycharm/2015/12/using-docker-in-pycharm/" target="_blank" rel="noopener noreferrer">https://blog.jetbrains.com/pycharm/2015/12/using-docker-in-pycharm/</a></li><li><a href="https://blog.jetbrains.com/pycharm/2017/03/docker-compose-getting-flask-up-and-running/" target="_blank" rel="noopener noreferrer">https://blog.jetbrains.com/pycharm/2017/03/docker-compose-getting-flask-up-and-running/</a></li></ul>',31)])])}const l=o(n,[["render",s]]),g=JSON.parse('{"path":"/pages/1de08c/","title":"译 - 在pycharm中使用docker","lang":"zh-CN","frontmatter":{"title":"译 - 在pycharm中使用docker","tags":["自动化运维","Docker","翻译"],"permalink":"/pages/1de08c/","createTime":"2023/09/08 17:36:02","description":"update：2018-05-31 本文针对 Pycharm2017.3。 最近在学习docker，作为一个pycharm重度使用者，很想知道怎么在pycharm里使用docker,看到官博的这2片文章不错，摘录翻译备查。水平有限，还请批评指正！ 现在的开发工作流程中，强调开发和生产中的隔离和再现性。 Docker和容器平台技术已经变得非常受欢迎。 现...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"译 - 在pycharm中使用docker\\",\\"image\\":[\\"https://pylixm.top/imgs/docker-config-1.png\\",\\"https://pylixm.top/imgs/docker-config-2.png\\",\\"https://pylixm.top/imgs/docker-compose-pycharm.png\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/1de08c/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"译 - 在pycharm中使用docker"}],["meta",{"property":"og:description","content":"update：2018-05-31 本文针对 Pycharm2017.3。 最近在学习docker，作为一个pycharm重度使用者，很想知道怎么在pycharm里使用docker,看到官博的这2片文章不错，摘录翻译备查。水平有限，还请批评指正！ 现在的开发工作流程中，强调开发和生产中的隔离和再现性。 Docker和容器平台技术已经变得非常受欢迎。 现..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pylixm.top/imgs/docker-config-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"翻译"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:tag","content":"自动化运维"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":3.93,"words":1178},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"04.云原生/01.docker/11.Docker-use_in_pycharm.md","headers":[],"categoryList":[{"id":"e467f5","sort":4,"name":"云原生"},{"id":"219fa0","sort":1,"name":"docker"}]}');export{l as comp,g as data};
