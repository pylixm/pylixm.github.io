import{_ as t,c as a,a as r,o as s}from"./app-DdES4ywf.js";const n={};function i(o,e){return s(),a("div",null,[...e[0]||(e[0]=[r('<blockquote><p>《数据结构与算法-王争》学习笔记，记录备查</p></blockquote><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><p>数组（Array）是一种<strong>线性表</strong>数据结构。他用一组<strong>连续的内存空间</strong>，来存储一组具有<strong>相同类型</strong>的数据。</p><p>线性表，数据排成一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。主要数据结构有：数组、链表、队列、栈等。</p><p>非线性表，主要有二叉树、堆、图。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="随机访问" tabindex="-1"><a class="header-anchor" href="#随机访问"><span>随机访问</span></a></h3><p>正由于数组的两个特性<strong>线性表</strong>和<strong>连续的内存空间</strong>，才使得数据支撑<strong>通过下标的随机访问</strong>。通过下标随机访问时，计算机的寻址可通过下边公式计算得到：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>a[i]_address = base_address + i * data_type_size</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>要访问的元素地址等于数据的地址加上访问元素下标和元素空间大小的乘积。</p><p>这里需要注意，随机访问是依赖下标的。即可通过下标随机访问，时间复杂度为O(1)。若通过值，即使是排好序的数据，时间复杂度最好也为O(logn)。</p><h3 id="插入" tabindex="-1"><a class="header-anchor" href="#插入"><span>插入</span></a></h3><p>若数组为有序数组，插入到某下标的元素时，为了保持有序性，需要将之后的元素依次后移，时间复杂度为O(n)。</p><p>若数组为无序数据，插入某下标元素时，可将之前元素移至末尾后直接插入，时间复杂度为O(1)。</p><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h3><p>删除某个中间元素时，为了保持数据内存的连续性，需要将之后的元素往前移，时间复杂度为O(n)。</p><p>删除开头元素时，时间复杂度为O(n)。删除结尾时，时间复杂度为O(1)。所以删除的平均时间复杂度为O(n)。</p><blockquote><p>在删除时，可合并删除的操作，以达到减少搬移元素的次数，从而提高效率。</p></blockquote><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用"><span>应用</span></a></h2><h3 id="注意数组越界问题" tabindex="-1"><a class="header-anchor" href="#注意数组越界问题"><span>注意数组越界问题</span></a></h3><p>单看数据结构数组，当访问下标超出数组长度的数据时，并没有数据。针对这种<strong>下标越界</strong>的情况，不同的语言有不同的处理。像C语言，它不会有任何提示，所以这种情况很难发现。Java/Python 等略高级的语言，它们都对数组做了封装，对该种越界问题做了处理，当遇到事，就会抛出对应的错误。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>每种高级的编程语言几乎都有数组这个数据结构，它们是数据结构的封装，或者叫容器类。平时业务开发，使用它们即可，它们从语言层面封装了数组的一些操作。对应更底层的开发，追求极致的效率，那么直接用数组更好。</p>',23)])])}const c=t(n,[["render",i]]),d=JSON.parse('{"path":"/data-structure-algorithm/483c37/","title":"数据结构与算法 - 线性表 - 数组","lang":"zh-CN","frontmatter":{"title":"数据结构与算法 - 线性表 - 数组","toc":"ture","tags":["数据结构与算法","数组"],"permalink":"/data-structure-algorithm/483c37/","createTime":"2023/09/08 17:36:02","description":"《数据结构与算法-王争》学习笔记，记录备查 基本概念 数组（Array）是一种线性表数据结构。他用一组连续的内存空间，来存储一组具有相同类型的数据。 线性表，数据排成一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。主要数据结构有：数组、链表、队列、栈等。 非线性表，主要有二叉树、堆、图。 操作 随机访问 正由于数组的两个特性线性表和连续的内...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构与算法 - 线性表 - 数组\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/data-structure-algorithm/483c37/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"数据结构与算法 - 线性表 - 数组"}],["meta",{"property":"og:description","content":"《数据结构与算法-王争》学习笔记，记录备查 基本概念 数组（Array）是一种线性表数据结构。他用一组连续的内存空间，来存储一组具有相同类型的数据。 线性表，数据排成一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。主要数据结构有：数组、链表、队列、栈等。 非线性表，主要有二叉树、堆、图。 操作 随机访问 正由于数组的两个特性线性表和连续的内..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"数组"}],["meta",{"property":"article:tag","content":"数据结构与算法"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":2.46,"words":738},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"notes/04.数据结构与算法笔记/02.DSALG-array.md","headers":[]}');export{c as comp,d as data};
