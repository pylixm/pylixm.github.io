import{_ as a,c as i,b as n,a as t,e as l,w as r,r as d,o as p,d as c}from"./app-DdES4ywf.js";const o="/imgs/wtovsyu.png",v={};function m(u,s){const e=d("VPLink");return p(),i("div",null,[n("p",null,[l(e,{href:"/pages/39558d/"},{default:r(()=>[...s[0]||(s[0]=[c("其他章节索引页",-1)])]),_:1})]),s[1]||(s[1]=t('<h1 id="第八章-fbvs-cbvs" tabindex="-1"><a class="header-anchor" href="#第八章-fbvs-cbvs"><span>第八章 FBVS &amp; CBVS</span></a></h1><h2 id="如何选择-function-views-和-class-views" tabindex="-1"><a class="header-anchor" href="#如何选择-function-views-和-class-views"><span>如何选择 function - views 和 class - views</span></a></h2><p>见流程图： <img src="'+o+`" alt=""></p><h2 id="urlconf-中不要包含-views-的逻辑" tabindex="-1"><a class="header-anchor" href="#urlconf-中不要包含-views-的逻辑"><span>urlconf 中不要包含 views 的逻辑</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Bad example :</span></span>
<span class="line"><span>from django.conf.urls import url</span></span>
<span class="line"><span>from django.views.generic import DetailView</span></span>
<span class="line"><span>from tastings.models import Tasting</span></span>
<span class="line"><span>urlpatterns = [</span></span>
<span class="line"><span>  url(r&quot;^(?P&lt;pk&gt;\\d+)/$&quot;,</span></span>
<span class="line"><span>    DetailView.as_view(</span></span>
<span class="line"><span>    model=Tasting,</span></span>
<span class="line"><span>    template_name=&quot;tastings/detail.html&quot;),</span></span>
<span class="line"><span>    name=&quot;detail&quot;),</span></span>
<span class="line"><span>  url(r&quot;^(?P&lt;pk&gt;\\d+)/results/$&quot;,</span></span>
<span class="line"><span>    DetailView.as_view(</span></span>
<span class="line"><span>    model=Tasting,</span></span>
<span class="line"><span>    template_name=&quot;tastings/results.html&quot;),</span></span>
<span class="line"><span>    name=&quot;results&quot;),</span></span>
<span class="line"><span>]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点:</p><ul><li>在 views 避免了重复的代码</li><li>松耦合</li><li>url 集中处理路由问题</li><li>views 可以得到 class-based views 的所有优点</li><li>更加灵活</li></ul><h2 id="使用url-name-space-更好的管理-url" tabindex="-1"><a class="header-anchor" href="#使用url-name-space-更好的管理-url"><span>使用url name space 更好的管理 url</span></a></h2><p><code>url(r&#39;^detail/&#39;, include(&#39;tastings.urls&#39;, namespace=&#39;tastings&#39;)),</code></p><p>通过 <code>tastings:detail</code> 调用。</p><p>url设计原则：</p><ul><li>url 尽量短小，明显</li><li>更容易搜索，更新，重构</li></ul><h2 id="不要在url-中使用-string的-views路径" tabindex="-1"><a class="header-anchor" href="#不要在url-中使用-string的-views路径"><span>不要在url 中使用 string的 views路径</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>url(r&#39;^$&#39;, &#39;polls.views.index&#39;, name=&#39;index&#39;),</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>当views 有错误时，导致调试困难</li><li>Instructors have to explain to beginners the need for an empty string at the beginning of the urlpatterns variable。</li></ul><h2 id="将业务逻辑移除-views-便于管理复用" tabindex="-1"><a class="header-anchor" href="#将业务逻辑移除-views-便于管理复用"><span>将业务逻辑移除 views 便于管理复用</span></a></h2><h2 id="尽量不要使用locals-作为-views-context" tabindex="-1"><a class="header-anchor" href="#尽量不要使用locals-作为-views-context"><span>尽量不要使用locals() 作为 Views Context</span></a></h2><ul><li>有可能会污染 template 变量环境</li><li>当变量较多时，消耗不必要的资源</li></ul><h1 id="第九章-function-based-views-最佳实践" tabindex="-1"><a class="header-anchor" href="#第九章-function-based-views-最佳实践"><span>第九章 Function-based views 最佳实践</span></a></h1><h2 id="编写function-based-views-建议" tabindex="-1"><a class="header-anchor" href="#编写function-based-views-建议"><span>编写function-based views 建议</span></a></h2><ul><li>保持views 的最小代码量</li><li>在views 中不要重复的代码</li><li>views 中保留着表现逻辑，业务逻辑尽可能的在models、form层。</li><li>使用 function-based views 编写自定义的 错误处理（403, 404, and 500 error handlers.）</li><li>避免负责逻辑的嵌套。</li></ul><h2 id="通过-request、response-对象来传递属性值。" tabindex="-1"><a class="header-anchor" href="#通过-request、response-对象来传递属性值。"><span>通过 request、response 对象来传递属性值。</span></a></h2><h2 id="function-based-views-可以更好的利用装饰器" tabindex="-1"><a class="header-anchor" href="#function-based-views-可以更好的利用装饰器"><span>function-based views 可以更好的利用装饰器</span></a></h2><h1 id="第十章-class-based-views-最佳实践" tabindex="-1"><a class="header-anchor" href="#第十章-class-based-views-最佳实践"><span>第十章 Class-based views 最佳实践</span></a></h1><h2 id="编写class-based-views-建议" tabindex="-1"><a class="header-anchor" href="#编写class-based-views-建议"><span>编写class-based views 建议</span></a></h2><ul><li>保持views 的最小代码量</li><li>在views 中不要重复的代码</li><li>views 中保留着表现逻辑，业务逻辑尽可能的在models、form层。</li><li>不要使用class-based views，使用 function-based views 编写自定义的 错误处理（403, 404, and 500 error handlers.）</li><li>使 mixins 最小化。</li></ul><h2 id="mixins-使用排序-python-object-mixins-base-views" tabindex="-1"><a class="header-anchor" href="#mixins-使用排序-python-object-mixins-base-views"><span>mixins 使用排序： python-object, mixins , base-views</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>class FruityFlavorView(FreshFruitMixin, TemplateView):</span></span>
<span class="line"><span>template_name = &quot;fruity_flavor.html&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么时候使用什么视图" tabindex="-1"><a class="header-anchor" href="#什么时候使用什么视图"><span>什么时候使用什么视图</span></a></h2><table><thead><tr><th>Name</th><th>Purpose</th><th>Two Scoops Example</th></tr></thead><tbody><tr><td>View</td><td>Base view or handy view that can be used foranything.</td><td>See section 10.6, \`Using Justdjango.views.generic.View&#39;.</td></tr><tr><td>RedirectView</td><td>Redirect user to another URL</td><td>Send users who visit <code>/log-in/&#39; to</code>/login/&#39;.</td></tr><tr><td>TemplateView</td><td>Display a Django HTML template.</td><td>The \`/about/&#39; page of our site.</td></tr><tr><td>ListView</td><td>List objects</td><td>List of ice cream flavors.</td></tr><tr><td>DetailView</td><td>Display an object</td><td>Details on an ice cream flavor.</td></tr><tr><td>FormView</td><td>Submit a form</td><td>The site&#39;s contact or email form.</td></tr><tr><td>CreateView</td><td>Create an object</td><td>Create a new ice cream flavor.</td></tr><tr><td>UpdateView</td><td>Update an object</td><td>Update an existing ice cream flavor.</td></tr><tr><td>DeleteView</td><td>Delete an object</td><td>Delete an unpleasant ice cream flavorlike Vanilla Steak.</td></tr><tr><td>Generic date views</td><td>For display of objects that occur over a rangeof time.</td><td>Blogs are a common reason to usethem. For Two Scoops, we could create a public history of when flavors havebeen added to the database.</td></tr></tbody></table><h2 id="使用-loginrequiredmixin-来进行用户认证" tabindex="-1"><a class="header-anchor" href="#使用-loginrequiredmixin-来进行用户认证"><span>使用 LoginRequiredMixin 来进行用户认证</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>class FlavorDetailView(LoginRequiredMixin, DetailView):</span></span>
<span class="line"><span>    model = Flavor</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="将多个视图都需要重写的方法放入到-mixin-中-以保证视图的简单清晰" tabindex="-1"><a class="header-anchor" href="#将多个视图都需要重写的方法放入到-mixin-中-以保证视图的简单清晰"><span>将多个视图都需要重写的方法放入到 mixin 中，以保证视图的简单清晰</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>from django.contrib import messages</span></span>
<span class="line"><span>from django.views.generic import CreateView, UpdateView, DetailView</span></span>
<span class="line"><span>from braces.views import LoginRequiredMixin</span></span>
<span class="line"><span>from .models import Flavor</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class FlavorActionMixin(object):</span></span>
<span class="line"><span>    fields = (&#39;title&#39;, &#39;slug&#39;, &#39;scoops_remaining&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @property</span></span>
<span class="line"><span>    def success_msg(self):</span></span>
<span class="line"><span>        return NotImplemented</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    def form_valid(self, form):</span></span>
<span class="line"><span>        messages.info(self.request, self.success_msg)</span></span>
<span class="line"><span>        return super(FlavorActionMixin, self).form_valid(form)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class FlavorCreateView(LoginRequiredMixin, FlavorActionMixin,</span></span>
<span class="line"><span>CreateView):</span></span>
<span class="line"><span>    model = Flavor</span></span>
<span class="line"><span>    success_msg = &quot;Flavor created!&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class FlavorUpdateView(LoginRequiredMixin, FlavorActionMixin,</span></span>
<span class="line"><span>UpdateView):</span></span>
<span class="line"><span>    model = Flavor</span></span>
<span class="line"><span>    success_msg = &quot;Flavor updated!&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ps： 感觉本书views 这里讲的比较乱, 部分class-based views 可参见另一篇博文： <a href="http://pylixm.cc/posts/2016-03-24-Django-Classviews.html" target="_blank" rel="noopener noreferrer">Django class views</a></p>`,35))])}const b=a(v,[["render",m]]),g=JSON.parse('{"path":"/pages/280373/","title":"Django 最佳实践-读书笔记 - 第八、九、十章 FBVS & CBVS","lang":"zh-CN","frontmatter":{"title":"Django 最佳实践-读书笔记 - 第八、九、十章 FBVS & CBVS","tags":["Django","Django最佳实践"],"permalink":"/pages/280373/","createTime":"2023/09/08 17:36:02","description":"第八章 FBVS & CBVS 如何选择 function - views 和 class - views 见流程图： urlconf 中不要包含 views 的逻辑 优点: 在 views 避免了重复的代码 松耦合 url 集中处理路由问题 views 可以得到 class-based views 的所有优点 更加灵活 使用url name spac...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Django 最佳实践-读书笔记 - 第八、九、十章 FBVS & CBVS\\",\\"image\\":[\\"https://pylixm.top/imgs/wtovsyu.png\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/280373/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"Django 最佳实践-读书笔记 - 第八、九、十章 FBVS & CBVS"}],["meta",{"property":"og:description","content":"第八章 FBVS & CBVS 如何选择 function - views 和 class - views 见流程图： urlconf 中不要包含 views 的逻辑 优点: 在 views 避免了重复的代码 松耦合 url 集中处理路由问题 views 可以得到 class-based views 的所有优点 更加灵活 使用url name spac..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pylixm.top/imgs/wtovsyu.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"Django最佳实践"}],["meta",{"property":"article:tag","content":"Django"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":2.7,"words":811},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"01.开发语言/01.Python/03.Best.Practices.for.Django/08.Best.Practices.for.Django.1.8.3rd-Chapter-8.md","headers":[],"categoryList":[{"id":"59843f","sort":1,"name":"开发语言"},{"id":"9d2a49","sort":1,"name":"Python"},{"id":"34f757","sort":3,"name":"Best.Practices.for.Django"}]}');export{b as comp,g as data};
