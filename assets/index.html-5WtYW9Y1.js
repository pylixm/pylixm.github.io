import{_ as e,c as a,a as r,o as n}from"./app-DdES4ywf.js";const p={};function o(i,t){return n(),a("div",null,[...t[0]||(t[0]=[r('<blockquote><p>《数据结构与算法-王争》学习笔记，记录备查</p></blockquote><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><p>某个数据集合值涉及在一端插入和删除数据，并且满足后进先出、先进后出的特性，这种结构就叫做“栈”。</p><ul><li><p>栈是一种操作受限的线性表。</p></li><li><p>后进者先出，先进者后出。</p></li><li><p>用数组实现的栈叫 <strong>顺序栈</strong></p></li><li><p>用链表实现的栈叫 <strong>链式栈</strong></p></li></ul><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="入栈" tabindex="-1"><a class="header-anchor" href="#入栈"><span>入栈</span></a></h3><p>入栈，操作时直接将数据压入栈即可，操作有点想在数组和链表尾部添加节点。时间复杂度为O(1)。</p><h3 id="出栈" tabindex="-1"><a class="header-anchor" href="#出栈"><span>出栈</span></a></h3><p>出栈，操作时依次出站找到需要出站的节点，出站即可。只涉及栈顶节点排除查找操作，时间复杂度也为O(1)。</p><h3 id="动态扩容" tabindex="-1"><a class="header-anchor" href="#动态扩容"><span>动态扩容</span></a></h3><p>为了节省存储空间（不需要额外存储next指针），栈长基于数据来构建。数据一旦定义后，大小是固定的。当栈满后，如何入栈呢？只能扩容。即再申请一个更大的数组空间，把数据copy过去后，继续入栈。此时的时间复杂度为O(n)。</p><p>那我们得到入栈的最好时间复杂度为O(1)，最差时间复杂度为O(n)。根据<strong>均摊分析法</strong>，入栈是有在极个别的情况下时间复杂度为O(n)，它可以均谈到N次的copy中，所以得到平均时间复杂度为O(1)。</p><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用"><span>应用</span></a></h2><h3 id="在函数调用中的应用" tabindex="-1"><a class="header-anchor" href="#在函数调用中的应用"><span>在函数调用中的应用</span></a></h3><p><strong>函数调用栈</strong>，是栈数据结构的经典案例。函数执行时，操作系统给线程分配了一个栈类型的内存空间。当一个函数执行时，会将函数入栈，当函数返回后，再出栈。当函数有错误的时候，我们便能根据这个调用栈来很快的定位问题。</p><h3 id="表达式求值中的应用" tabindex="-1"><a class="header-anchor" href="#表达式求值中的应用"><span>表达式求值中的应用</span></a></h3><p>表达式求值，借助两个栈：</p><ul><li>操作数栈：存储操作数</li><li>运算符栈：存储运算符</li></ul><p>当表达式求值时，从左向右遍历表达式，当遇到数字，就压入<strong>操作数栈</strong>，当遇到运算符，就与<strong>运算符栈</strong>栈顶的运算符比较优先级，若比栈顶的运算符优先级高，则将当前运算符压入运算符栈。若比栈顶运算符底或相同，则从操作数栈顶去两个操作数，进行计算，将结果压入操作数栈，继续比较。最后剩余栈中量阿哥操作数和一个运算符，直接计算清空栈，结束。</p><h3 id="在括号匹配中使用" tabindex="-1"><a class="header-anchor" href="#在括号匹配中使用"><span>在括号匹配中使用</span></a></h3><p>可以使用栈来判断括号是否合法，即是否左右匹配。</p><p>遍历一个带括号的表达式，遇到左括号就将其压入栈，遇到一个右括号，就将对应的左括号出栈，当遍历过程中，遇到不能匹配的右括号或栈中没有匹配的左括号时，即为不合法。当遍历完，栈为空，则表示合法。</p>',22)])])}const c=e(p,[["render",o]]),h=JSON.parse('{"path":"/data-structure-algorithm/be02b5/","title":"数据结构与算法 - 线性表 - 栈","lang":"zh-CN","frontmatter":{"title":"数据结构与算法 - 线性表 - 栈","toc":true,"tags":["数据结构与算法","栈"],"permalink":"/data-structure-algorithm/be02b5/","createTime":"2023/09/08 17:36:02","description":"《数据结构与算法-王争》学习笔记，记录备查 基本概念 某个数据集合值涉及在一端插入和删除数据，并且满足后进先出、先进后出的特性，这种结构就叫做“栈”。 栈是一种操作受限的线性表。 后进者先出，先进者后出。 用数组实现的栈叫 顺序栈 用链表实现的栈叫 链式栈 操作 入栈 入栈，操作时直接将数据压入栈即可，操作有点想在数组和链表尾部添加节点。时间复杂度为O...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构与算法 - 线性表 - 栈\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/data-structure-algorithm/be02b5/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"数据结构与算法 - 线性表 - 栈"}],["meta",{"property":"og:description","content":"《数据结构与算法-王争》学习笔记，记录备查 基本概念 某个数据集合值涉及在一端插入和删除数据，并且满足后进先出、先进后出的特性，这种结构就叫做“栈”。 栈是一种操作受限的线性表。 后进者先出，先进者后出。 用数组实现的栈叫 顺序栈 用链表实现的栈叫 链式栈 操作 入栈 入栈，操作时直接将数据压入栈即可，操作有点想在数组和链表尾部添加节点。时间复杂度为O..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"栈"}],["meta",{"property":"article:tag","content":"数据结构与算法"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":2.66,"words":798},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"notes/04.数据结构与算法笔记/05.DSALG-stack.md","headers":[]}');export{c as comp,h as data};
