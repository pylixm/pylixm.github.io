import{_ as e,c as a,a as r,o}from"./app-DdES4ywf.js";const n={};function i(p,t){return o(),a("div",null,[...t[0]||(t[0]=[r('<blockquote><p>《数据结构与算法-王争》学习笔记，记录备查</p></blockquote><p>线性排序，桶排序、计数排序、基数排序。</p><p>因为他们的时间复杂度都为O(n)，所以叫做线性排序。</p><h2 id="桶排序-bucket-sort" tabindex="-1"><a class="header-anchor" href="#桶排序-bucket-sort"><span>桶排序（Bucket Sort）</span></a></h2><p>桶排序，顾名思义，会用到“桶”，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独进行排序。桶内排完序之后，再把每个桶里的数据按照顺序依次取出，组成的序列就是有序的了 。</p><p>适用数据场景：</p><ul><li>排序的数据可以很容易的划分为m个桶</li><li>各桶之间数据比较均匀。</li></ul><p><strong>桶排序比较适合用在外部排序中</strong>。所谓的外部排序就是数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。</p><h2 id="计数排序-counting-sort" tabindex="-1"><a class="header-anchor" href="#计数排序-counting-sort"><span>计数排序（Counting Sort）</span></a></h2><p><strong>计数排序其实是桶排序的一种特殊情况</strong>。当要排序的 n 个数据，所处的范围并不大的时候，比如最大值是 k，我们就可以把数据划分成 k 个桶。每个桶内的数据值都是相同的，省掉了桶内排序的时间。</p><p>适用数据场景：</p><ul><li>计数排序只能用在数据范围不大的场景中，如果数据范围 k 比要排序的数据 n 大很多，就不适合用计数排序了。</li><li>计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数。</li></ul><h2 id="基数排序-radix-sort" tabindex="-1"><a class="header-anchor" href="#基数排序-radix-sort"><span>基数排序（Radix Sort）</span></a></h2><p>基数排序对要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果 a 数据的高位比 b 数据大，那剩下的低位就不用比较了。除此之外，每一位的数据范围不能太大，要可以用线性排序算法来排序，否则，基数排序的时间复杂度就无法做到 O(n) 了。</p>',14)])])}const s=e(n,[["render",i]]),l=JSON.parse('{"path":"/data-structure-algorithm/d2d776/","title":"数据结构与算法-算法-线性排序","lang":"zh-CN","frontmatter":{"title":"数据结构与算法-算法-线性排序","tags":["数据结构与算法","排序"],"permalink":"/data-structure-algorithm/d2d776/","createTime":"2023/09/08 17:36:02","description":"《数据结构与算法-王争》学习笔记，记录备查 线性排序，桶排序、计数排序、基数排序。 因为他们的时间复杂度都为O(n)，所以叫做线性排序。 桶排序（Bucket Sort） 桶排序，顾名思义，会用到“桶”，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独进行排序。桶内排完序之后，再把每个桶里的数据按照顺序依次取出，组成的序列就是有序的了 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构与算法-算法-线性排序\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/data-structure-algorithm/d2d776/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"数据结构与算法-算法-线性排序"}],["meta",{"property":"og:description","content":"《数据结构与算法-王争》学习笔记，记录备查 线性排序，桶排序、计数排序、基数排序。 因为他们的时间复杂度都为O(n)，所以叫做线性排序。 桶排序（Bucket Sort） 桶排序，顾名思义，会用到“桶”，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独进行排序。桶内排完序之后，再把每个桶里的数据按照顺序依次取出，组成的序列就是有序的了 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"排序"}],["meta",{"property":"article:tag","content":"数据结构与算法"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":1.9,"words":571},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"notes/04.数据结构与算法笔记/12.DSALG-linear-sort.md","headers":[]}');export{s as comp,l as data};
