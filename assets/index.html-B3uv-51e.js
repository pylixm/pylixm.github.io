import{_ as s}from"./docker-config-2-MVU6Cp8w.js";import{_ as i,c as a,a as n,o as t}from"./app-DdES4ywf.js";const r="/imgs/docker-connect.png",l={};function p(d,e){return t(),a("div",null,[...e[0]||(e[0]=[n(`<h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><p>docker 安装现在已非常简单，具体可参考<a href="https://docs.docker.com/engine/installation/" target="_blank" rel="noopener noreferrer">官方文档</a>.</p><p>安装成功后可以使用以下命令检测：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --version</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> version</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 17.06.2-ce,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cec0b72</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="更换镜像源" tabindex="-1"><a class="header-anchor" href="#更换镜像源"><span>更换镜像源</span></a></h2><p>因 Docker 官方仓库地址在国外，速度比较慢。可使用国内的几家大厂放出的 Docker 仓库镜像源。</p><ul><li><a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener noreferrer">DaoCloud 加速器</a>。注册登录后可看到如下配置说明文档，按教程配置即可。</li><li><a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="noopener noreferrer">阿里云镜像加速器</a></li></ul><h2 id="docker-使用案例-使用docker-来搭建python开发环境" tabindex="-1"><a class="header-anchor" href="#docker-使用案例-使用docker-来搭建python开发环境"><span>Docker 使用案例：使用docker 来搭建python开发环境</span></a></h2><p>下面我们以构建python的开发环境为例来看下Docker 在开发中的应用。</p><p>docker 容器的运行是基于docker镜像的，所以我们需要先获取镜像。镜像的获取有几种方法：</p><ul><li>1、从docker hub (国内有仓库的镜像资源站，如Daocloud、阿里云等)上拉取所需要的镜像，修改打包使用。</li><li>2、自己编写Dockerfile, 基于现有镜像或官方镜像，自己构建新镜像。</li></ul><p>最早的镜像只有官方推出的<a href="https://docs.docker.com/docker-hub/official_repos/#how-do-i-create-a-new-official-repository" target="_blank" rel="noopener noreferrer">官方镜像</a>，随着Docker的发展Docker hub上已有数不清的非官方镜像为使用者提供服务。我们也可以将我们构建的镜像上传到Docker hub 上供其他人使用。</p><h3 id="第一步-镜像获取" tabindex="-1"><a class="header-anchor" href="#第一步-镜像获取"><span>第一步，镜像获取</span></a></h3><p>我们这里通过编写Dockerfile来定制镜像。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-dockerfile"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> python:2.7  </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ENV</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> PYTHONUNBUFFERED 1  </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> mkdir /code    </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WORKDIR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> /code  </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ADD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ./requirements.txt /code/  </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pip install -r requirements.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>说明：</p><ul><li>1、依据python:2.7 镜像构建</li><li>2、这是python环境变量</li><li>3、在docker容器内创建代码目录</li><li>4、设置工作目录为 code</li><li>5、复制文件到code 目录下</li><li>6、执行命令安装python依赖包</li></ul></blockquote><p>注： 1、如何编写Dockerfile, <a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener noreferrer">官方文档</a> 2、copy vs add <a href="https://docs.docker.com/engine/reference/builder/#copy" target="_blank" rel="noopener noreferrer">官方文档</a></p><blockquote><p>ADD 功能更多：</p><ul><li>ADD指令可以让你使用URL作为 src 参数。当遇到URL时候，可以通过URL下载文件并且复制到 dest 。</li><li>ADD的另外一个特性是有能力自动解压文件。如果 src 参数是一个可识别的压缩格式（tar, gzip, bzip2, etc）的本地文件（所以实现不了同时下载并解压），就会被解压到指定容器文件系统的路径 dest 。</li><li>URL下载和解压特性不能一起使用。任何压缩文件通过URL拷贝，都不会自动解压。</li></ul><p>Copy :</p><ul><li>只复制文件</li></ul><p>Dockerfile 里添加文件建议使用 Copy, 除非明确需要使用ADD.</p></blockquote><p>运行 <code>docker build -t docker-ssh:v1 -f Dockerfile .</code> 构建镜像。</p><p>注意： <code>Forbidden path outside of the build context</code>错误，解决方案<a href="http://blog.csdn.net/zssureqh/article/details/52009043" target="_blank" rel="noopener noreferrer">参考</a></p><p>这样，基于python2.7的python开发镜像便做好了，自己需要什么python依赖直接写到requirements文件里即可。</p><h3 id="第二步-启动容器-开发项目-django-项目为例" tabindex="-1"><a class="header-anchor" href="#第二步-启动容器-开发项目-django-项目为例"><span>第二步，启动容器，开发项目：django 项目为例</span></a></h3><p>在目录<code>/Users/pylixm/docker.dev/django-demo/</code>下，运行<code>django-admin startproject mysite</code>在本地目录创建django项目, 目录如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tree</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> manage.py</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mysite</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">│  </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> __init__.py</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">│  </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> settings.py</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">│  </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> urls.py</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">│  </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> └──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> wsgi.py</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">└──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> requirements.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行以下命令以bash模式启动容器：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>docker run -it --rm -p 80:80 -v /Users/pylixm/docker.dev/django-demo/mysite:/code/mysite docker-ssh:v1 bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>说明：</p><ul><li>-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</li><li>--rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执&gt;行个命令，看看结果，不需要排障和保留结果，因此使用 --rm 可以避免浪费空间。</li><li>-p hostPort:containerPort : 映射容器端口到主机端口，前面是主机端口，后边是容器端口；</li><li>-v 主机目录:容器内目录 ：挂载主机目录作为容器的持久化数据卷。主机目录必须是<code>绝对路径</code>；</li><li>bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。</li></ul></blockquote><p>此处利用容器的数据卷，将我们的开发项目映射到容器中，当我们的项目文件发生电话时会立即体现在容器中。容器关闭后，项目的变动任然存在。这样便可以愉快的使用docker来封装我们的开发环境了。</p><p>可进入容器，运行<code>python manage.py runserver 0.0.0.0:80</code>启动django项目。在我们主机的浏览器访问<code>0.0.0.0:80</code>, 便可看到项目页面了。</p><p>我们也可改造Dockerfile，设置暴露端口，和执行的命令,重新编译镜像。设置好后，我们便不用再进入容器启动运行django项目启动命令。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>## 暴露docker容器的端口</span></span>
<span class="line"><span>EXPOSE 8000</span></span>
<span class="line"><span>CMD [&quot;python&quot;, &quot;manage.py&quot;, &quot;runserver&quot;, &quot;0.0.0.0:8000&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者直接在<code>docker run </code> 命令后加启动命令:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>docker run -it --rm -p 80:8000 -v /Users/pylixm/docker.dev/django-demo/mysite:/code/mysite docker-ssh:v1 python ./mysite/manage.py runserver 0.0.0.0:8000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="第三步-在pycharm中配置使用" tabindex="-1"><a class="header-anchor" href="#第三步-在pycharm中配置使用"><span>第三步，在pycharm中配置使用</span></a></h3><p>第二步的时候，我们构建了我们的python开发镜像。我们只需要在pycharm中配置<code>Project Interpreter </code>为Docker镜像即可。</p><p><strong>检查</strong> 在Mac上开发，需要保证<code>Docker for Mac</code>启动，并配置好<code>Docker API</code>(Preferences | Build, Execution, Deployment | Docker)，如下图：</p><p><img src="`+r+'" alt=""></p><p><strong>配置</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>- 1、到`Preferences -&gt; Project Interpreter -&gt; Add Romete `，选择本地的可用Docker 镜像,如图：</span></span>\n<span class="line"><span>![](/imgs/docker-config-1.png)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>- 2、配置`Edite configrations`, 将host设置为`0.0.0.0`, 选择刚才添加的项目解释器，并配置容器运行参数`Docker container settings`，如图：</span></span>\n<span class="line"><span>![](/imgs/docker-config-2.png)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>&gt;说明：</span></span>\n<span class="line"><span>&gt;    - 容器端口：8000 映射到主机端口 80</span></span>\n<span class="line"><span>&gt;    - 挂载项目目录的数据卷： ` /Users/pylixm/docker.dev/django-demo/mysite:/code/mysite`</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>- 3、正常启动项目，访问`http://0.0.0.0:80`,即可看到亲切的欢迎界面。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>update:2018年05月31日</strong></p><p>以上配置是基于<code>pycharm2017.3</code>, 截止到目前为止最新pycharm版本为<code>2018.1</code>。</p><p><em>Docker 管理窗口</em></p><p>此版本增加了对Docker镜像及容器的管理窗口，可以在此创建和启动容器。 <img src="https://ws1.sinaimg.cn/large/8697aaedly1frubrj8jiij21340o0mzo.jpg" alt=""></p><p>并且配置和Django等服务的配置在一个地方，注意区分，不要把Docker的配置和Django运行的<code>python interpreter</code>混淆。 <img src="https://ws1.sinaimg.cn/large/8697aaedly1frubtqk4trj21k20wedlk.jpg" alt=""></p><p><em>Python Interpreter的配置</em></p><ul><li><p>1、到<code>Preferences -&gt; Project Interpreter -&gt; Add </code>，选择 <code>Docker</code>, 随后在右侧窗口选择使用的镜像。 如图： <img src="https://ws1.sinaimg.cn/large/8697aaedly1fruby7dhxaj21lk0tadmf.jpg" alt=""></p></li><li><p>2、配置<code>Edite configrations</code>, 将host设置为<code>0.0.0.0</code>, 选择刚才添加的项目解释器，并配置容器运行参数<code>Docker container settings</code>，如图： <img src="'+s+'" alt=""></p></li></ul><blockquote><p>说明：</p><ul><li>容器端口：8000 映射到主机端口 80</li><li>挂载项目目录的数据卷： <code> /Users/pylixm/docker.dev/django-demo/mysite:/code/mysite</code></li></ul></blockquote><ul><li>3、正常启动项目，访问<code>http://0.0.0.0:80</code>,即可看到亲切的欢迎界面。</li></ul><p>更加详细配置说明参见<a href="https://www.jetbrains.com/help/pycharm/docker.html" target="_blank" rel="noopener noreferrer">Pycharm官方Docker使用文档</a>。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="http://blog.csdn.net/yhcvb/article/details/45696961" target="_blank" rel="noopener noreferrer">http://blog.csdn.net/yhcvb/article/details/45696961</a></li><li><a href="http://blog.csdn.net/wind_602/article/details/77988395" target="_blank" rel="noopener noreferrer">http://blog.csdn.net/wind_602/article/details/77988395</a></li></ul>',51)])])}const h=i(l,[["render",p]]),k=JSON.parse('{"path":"/pages/906ae0/","title":"Docker学习笔记（二）--简单使用,搭建python开发环境","lang":"zh-CN","frontmatter":{"title":"Docker学习笔记（二）--简单使用,搭建python开发环境","tags":["自动化运维","Docker"],"permalink":"/pages/906ae0/","createTime":"2023/09/08 17:36:02","description":"安装 docker 安装现在已非常简单，具体可参考官方文档. 安装成功后可以使用以下命令检测： 更换镜像源 因 Docker 官方仓库地址在国外，速度比较慢。可使用国内的几家大厂放出的 Docker 仓库镜像源。 DaoCloud 加速器。注册登录后可看到如下配置说明文档，按教程配置即可。 阿里云镜像加速器 Docker 使用案例：使用docker 来...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker学习笔记（二）--简单使用,搭建python开发环境\\",\\"image\\":[\\"https://pylixm.top/imgs/docker-connect.png\\",\\"https://pylixm.top/imgs/docker-config-1.png\\",\\"https://pylixm.top/imgs/docker-config-2.png\\",\\"https://ws1.sinaimg.cn/large/8697aaedly1frubrj8jiij21340o0mzo.jpg\\",\\"https://ws1.sinaimg.cn/large/8697aaedly1frubtqk4trj21k20wedlk.jpg\\",\\"https://ws1.sinaimg.cn/large/8697aaedly1fruby7dhxaj21lk0tadmf.jpg\\",\\"https://pylixm.top/imgs/docker-config-2.png\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/906ae0/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"Docker学习笔记（二）--简单使用,搭建python开发环境"}],["meta",{"property":"og:description","content":"安装 docker 安装现在已非常简单，具体可参考官方文档. 安装成功后可以使用以下命令检测： 更换镜像源 因 Docker 官方仓库地址在国外，速度比较慢。可使用国内的几家大厂放出的 Docker 仓库镜像源。 DaoCloud 加速器。注册登录后可看到如下配置说明文档，按教程配置即可。 阿里云镜像加速器 Docker 使用案例：使用docker 来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pylixm.top/imgs/docker-connect.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:tag","content":"自动化运维"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":5.79,"words":1738},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"04.云原生/01.docker/02.Docker-use.md","headers":[],"categoryList":[{"id":"e467f5","sort":4,"name":"云原生"},{"id":"219fa0","sort":1,"name":"docker"}]}');export{h as comp,k as data};
