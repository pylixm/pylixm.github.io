import{_ as i,c as a,a as e,o as n}from"./app-DdES4ywf.js";const l={};function t(h,s){return n(),a("div",null,[...s[0]||(s[0]=[e(`<p>本篇是<a href="https://pylixm.top/posts/2020-12-02-go-from-python-intro.html" target="_blank" rel="noopener noreferrer">「对比Python学习Go」</a> 系列的第二篇，本篇文章我们来看下Go的开发环境搭建。本系列的其他文章可到 <a href="https://pylixm.top/posts/2020-12-02-go-from-python-intro.html" target="_blank" rel="noopener noreferrer">「对比Python学习Go」- 开篇</a> 查看。</p><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建"><span>环境搭建</span></a></h2><h3 id="go-的安装" tabindex="-1"><a class="header-anchor" href="#go-的安装"><span>Go 的安装</span></a></h3><p>Go 的官方网址 https://golang.org， 国内用户可访问国内官网 https://golang.google.cn/。</p><p>Go安装相对来说还是比较简单的，主要有如下安装包：</p><p><img src="https://gitee.com/pylixm/picture/raw/master/2020-12-3/1607007629415-go_install.png" alt="go_install"></p><p>按系统来说，可通过如下方式安装:</p><h4 id="linux" tabindex="-1"><a class="header-anchor" href="#linux"><span>Linux</span></a></h4><p>源码方式安装：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 使用二进制包安装</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">wget</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> https://golang.org/dl/go1.15.5.linux-amd64.tar.gz</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 解压到 /usr/local</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tar</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -C</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/local</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -xzf</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> go1.15.5.linux-amd64.tar.gz</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 配置环境变量  $HOME/.bash_profile</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">export</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> PATH</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$PATH</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">usr</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">local</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">go</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">bin</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">source</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .bash_profile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可直接通过包管理工具来安装：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">yum</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> golang</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">apt-get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> golang</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mac-os-x" tabindex="-1"><a class="header-anchor" href="#mac-os-x"><span>Mac OS X</span></a></h4><p>Mac 系统可以官网提供的PKG包安装。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 下载 pkg 包，点击安装即可。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">wget</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> https://golang.org/dl/go1.15.5.darwin-amd64.pkg</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>也使用 brew 等包管理工具安装。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">brew</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> go</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="windows" tabindex="-1"><a class="header-anchor" href="#windows"><span>windows</span></a></h4><p>可直接在官方下载地址下载 msi 格式安装包安装。 官方下载地址： <a href="https://golang.google.cn/dl/" target="_blank" rel="noopener noreferrer">https://golang.google.cn/dl/</a></p><p>默认安装位置， c:\\Go。</p><h4 id="测试安装" tabindex="-1"><a class="header-anchor" href="#测试安装"><span>测试安装</span></a></h4><p>在任意位置执行 <code>go version</code> 可看到go 的相关版本信息。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># go version</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> version</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> go1.15.5</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> linux/amd64</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="python-的安装" tabindex="-1"><a class="header-anchor" href="#python-的安装"><span>Python 的安装</span></a></h3><p>Python 的官网 https://python.org。 主要有如下安装包：</p><p><img src="https://gitee.com/pylixm/picture/raw/master/2020-12-3/1607007323031-python_install.png" alt="python_install"></p><p>可对应系统下载相应的安装包，点击安装即可。</p><p>Mac和Windows 没啥好说的，直接图形下一步即可。Linux 下，Python 的安装使用源码需要编译下。Go 安装包是一个二进制的包，直接下载解压配置好环境变量即可。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">./configure</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --prefix=/usr/local/python</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [其他需要的模块或参数]</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">make</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> make</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="go-常用环境变量" tabindex="-1"><a class="header-anchor" href="#go-常用环境变量"><span>Go 常用环境变量</span></a></h2><p>Go 在开发之前，先来熟悉几个常用的环境变量，在Go项目开发中会经常使用。</p><ul><li><strong>$GOROOT</strong> 表示 Go 在你的电脑上的安装位置，它的值一般都是 $HOME/go，当然，你也可以安装在别的地方。</li><li><strong>$GOARCH</strong> 表示目标机器的处理器架构，它的值可以是 386、amd64 或 arm。</li><li><strong>$GOOS</strong> 表示目标机器的操作系统，它的值可以是 darwin、freebsd、linux 或 windows。</li><li><strong>$GOBIN</strong> 表示编译器和链接器的安装位置，默认是 $GOROOT/bin，如果你使用的是 Go 1.0.3 及以后的版本，一般情况下你可以将它的值设置为空，Go 将会使用前面提到的默认值。</li><li><strong>$GOPATH</strong> GO项目工作目录。默认采用和 $GOROOT 一样的值，但从 Go 1.1 版本开始，你必须修改为其它路径。它可以包含多个包含 Go 语言源码文件、包文件和可执行文件的路径，而这些路径下又必须分别包含三个规定的目录：src、pkg 和 bin，这三个目录分别用于存放源码文件、包文件和可执行文件。</li></ul><p>环境变量常在编译时使用，如交叉编译时，在mac下编译Linux上可用的go 二进制程序：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">GOOS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">linux</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> GOARCH</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">amd64</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> demo</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -ldflags=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-s -w</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可用 <code>go env</code> 查看所有环境变量。</p><h2 id="工作区和gopath" tabindex="-1"><a class="header-anchor" href="#工作区和gopath"><span>工作区和GOPATH</span></a></h2><h3 id="go" tabindex="-1"><a class="header-anchor" href="#go"><span>Go</span></a></h3><p>工作区，是放置 Go 源码文件的目录，通过设置环境变量<code>GOPATH</code>来指定。一般情况下，Go 源码文件都需要放到工作区中，但是对于命令源码文件（包含main函数的入口文件）来说，不是必须的。</p><p>工作区结构如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tree</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -L</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> src</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # src 用于放置源码文件，以代码包为组织形式。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">├──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pkg</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # pkg 用于存放归档文件，以 .a 为后缀的文件，存放在相关平台目录下，同样以代码包为组织形式。 目录结构为： $GOPATH/pkg/$GOOS_$GOARCH/&lt;一级代码包&gt;/&lt;二级代码包&gt;/&lt;末级代码包&gt;.a</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">└──</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bin</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # bin 用于存放当前工作区的 Go 程序的可执行文件。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#- 当环境变量设置 GOBIN 时，bin目录变得无意义，所有可执行文件（编译文件）会放到 GOBIN 的目录中；</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#- 当 GOPATH 设置了多个目录时，必须设置 GOBIN 否则无法成功安装 Go 程序的可执行文件。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h3><p>Python 的工作目录可在任意目录，并没有特别要求。这和Go是静态编译性语言有很大关系，工作目录的这些规定，大都是为了更方便的编译和安装编译后的二进制文件。</p><h2 id="代码包的相关知识" tabindex="-1"><a class="header-anchor" href="#代码包的相关知识"><span>代码包的相关知识</span></a></h2><h3 id="go-1" tabindex="-1"><a class="header-anchor" href="#go-1"><span>Go</span></a></h3><p><strong>代码包的作用：</strong></p><ul><li>编译和归档 Go 程序的最基本单位。</li><li>代码划分、集结和依赖的有效组织形式，也是权限控制的辅助手段。</li></ul><p><strong>代码包的规则：</strong></p><ul><li>一个代码包实际上就是一个有导入路径代表的目录。导入路径即 &lt;工作区目录&gt;/src 或 &lt;工作区目录&gt;/pkg/&lt;平台相关目录&gt; 之下的某段子路径。</li><li>每个源码文件必须声明其所属的代码包。</li><li>同一个代码包中的所有源码文件声明的代码包应该是相同的。</li><li>只有开头大写的对象，可以让包外引用。</li></ul><p>代码包声明与代码包导入路径的区别：</p><p>代码包声明语句中的包名称应该是该代码包的导入路径的最右子路径。如：</p><ul><li>代码包导入路径： <code>GoPL/tools</code></li><li>代码包声明：<code>package tools</code></li></ul><p><strong>代码包的导入：</strong></p><p>代码包导入语句中使用的包名称应该与其导入路径一至，如代码包 <code>fmt</code> 的导入：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>import (</span></span>
<span class="line"><span>    &quot;fmt&quot;</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码包的导入方法：</p><ul><li>带别名的导入：</li></ul><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> str</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">strings</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HasPrefix</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">abc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>本地化的导入：</li></ul><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> .</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">strings</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HasPrefix</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">abc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>仅仅初始化</li></ul><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> _</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">strings</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 仅执行代码包中的初始化函数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码包初始化：</strong></p><p>代码包初始化函数即：无参数声明和结果声明的 init 函数。init 函数可以被声明在任何文件中，且可以有多个。</p><p>init 函数执行时机：</p><ul><li>单一代码包：当导入代码包时，对代码包的所有全局变量进行求值，之后执行所有 init 函数。同一代码包中的 init 函数执行顺序是不确定的。</li><li>不同代码包：先执行被导入的代码包中的 init 函数，再执行本代码包的 init 函数。同一代码包中被导入多个代码包的 init 函数执行顺序不定。</li><li>所有涉及到的代码包：在程序入口，在 main 函数执行之前执行。所有的 init 函数，都只会被执行一次。</li></ul><h3 id="python-1" tabindex="-1"><a class="header-anchor" href="#python-1"><span>Python</span></a></h3><p>Python 中最小的编程单元为模块，即一个py文件。含有<code>__init__.py</code> 文件的目录，叫做包。</p><p>包的作用更多的是为了组织和分割代码。</p><p><strong>包的引用</strong></p><p>直接引入包：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sys </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sys</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>引入包中的模块或对象：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sys </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> path </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>重命名对象：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sys </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> path </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">as</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sys_path </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sys_path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>包的规则</strong></p><ul><li>一个包中的模块（py文件）不能重名，一个模块中的对象不能重名。否则会相互覆盖。</li><li>包引用时，不要相互引用，否则会出现循环引用错误。</li><li>包中可使用关键字 <code>__all__</code> 来限制可以引用的对象。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本篇文章讲述了Go和Python的安装及一些基本的概念区别。接下来，会正式进入语法的学习，接下来和笔者一起开启 Go 的对比学习之旅吧！</p><p>好了，本篇到这里了，敬请期待下篇更新。</p><p>我是DeanWu，一个努力成为真正SRE的人。</p><hr><blockquote><p>关注公众号「码农吴先生」, 可第一时间获取最新文章。回复关键字「go」「python」获取我收集的学习资料，也可回复关键字「小二」，加我wx，聊技术聊人生~</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f55c515758eb4effbe9555573df93bd7~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>`,84)])])}const r=i(l,[["render",t]]),k=JSON.parse('{"path":"/compare-python-go/719235/","title":"「对比Python学习Go」- 环境篇","lang":"zh-CN","frontmatter":{"title":"「对比Python学习Go」- 环境篇","tags":["Golang","对比Python学习Go"],"permalink":"/compare-python-go/719235/","createTime":"2023/09/08 17:36:02","description":"本篇是「对比Python学习Go」 系列的第二篇，本篇文章我们来看下Go的开发环境搭建。本系列的其他文章可到 「对比Python学习Go」- 开篇 查看。 环境搭建 Go 的安装 Go 的官方网址 https://golang.org， 国内用户可访问国内官网 https://golang.google.cn/。 Go安装相对来说还是比较简单的，主要有...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"「对比Python学习Go」- 环境篇\\",\\"image\\":[\\"https://gitee.com/pylixm/picture/raw/master/2020-12-3/1607007629415-go_install.png\\",\\"https://gitee.com/pylixm/picture/raw/master/2020-12-3/1607007323031-python_install.png\\",\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f55c515758eb4effbe9555573df93bd7~tplv-k3u1fbpfcp-zoom-1.image\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/compare-python-go/719235/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"「对比Python学习Go」- 环境篇"}],["meta",{"property":"og:description","content":"本篇是「对比Python学习Go」 系列的第二篇，本篇文章我们来看下Go的开发环境搭建。本系列的其他文章可到 「对比Python学习Go」- 开篇 查看。 环境搭建 Go 的安装 Go 的官方网址 https://golang.org， 国内用户可访问国内官网 https://golang.google.cn/。 Go安装相对来说还是比较简单的，主要有..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gitee.com/pylixm/picture/raw/master/2020-12-3/1607007629415-go_install.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"对比Python学习Go"}],["meta",{"property":"article:tag","content":"Golang"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":6.71,"words":2012},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"notes/02.对比python学习go/02.Go-from-python-start.md","headers":[]}');export{r as comp,k as data};
