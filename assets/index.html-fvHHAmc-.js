import{_ as i,c as a,a as e,o as n}from"./app-DdES4ywf.js";const l={};function t(h,s){return n(),a("div",null,[...s[0]||(s[0]=[e(`<p>最近需要开发个微信公众号后台，需要内网穿透工具，之前使用过sunny-ngrok，这个现在也变成付费的了。这次决定自己搭建一个，顺便学习下。以下博文，是搭建过程，已在整理思路备查，也希望能给自己动手搭建的同学一些提示。</p><h2 id="ngrok-简介" tabindex="-1"><a class="header-anchor" href="#ngrok-简介"><span>Ngrok 简介</span></a></h2><p>在说Ngrok之前，先来说下「内网穿透」。内网穿透是一种网络术语，是指局域网内部的服务，穿透内网的限制将服务暴露在公网供外部调用的技术。随着微信公众号开发的流行，改技术术语逐渐走向我们普通开发。</p><p>Ngrok 就是一种实现内网穿透的开源软件。Ngrok 借用在公网的服务端和局域网内部的服务端构建了一个代理通道。当有服务请求时，会先将请求达到公网服务端，再有公网服务端转发给内网服务端，以达到内网暴露公网的目的。</p><p><a href="https://ngrok.com" target="_blank" rel="noopener noreferrer">https://ngrok.com</a>，这是ngrok的官网，它提供一个免费的账户，我们可直接使用它提供的客户端来链接它们的代理服务器，以实现暴露服务的目的，不想折腾的同学可以尝试。</p><p>它官网提供的是2.0版本的软件，已不再开源，可见github描述<a href="https://github.com/inconshreveable/ngrok#ngrok-2x" target="_blank" rel="noopener noreferrer">这里</a>。搭建我们自己的ngrok服务，我们只能使用1.0，命令和2.0稍有区别。</p><p>1.0的功能有：</p><ul><li>http/tcp 协议的转发</li><li>检查通过隧道传输的所有http请求/响应</li><li>重播通过隧道传输的任何请求</li></ul><p>这些功能，足够我们开发微信使用了。下面这批是一些其他基于ngrok 二次开发的开源软件，大家可以参考。</p><ul><li><a href="https://my.oschina.net/ZL520/blog/2086061" target="_blank" rel="noopener noreferrer">可以实现内网穿透的几款工具</a></li></ul><h2 id="搭建过程" tabindex="-1"><a class="header-anchor" href="#搭建过程"><span>搭建过程</span></a></h2><h3 id="ngrok-服务搭建及客户端的编译" tabindex="-1"><a class="header-anchor" href="#ngrok-服务搭建及客户端的编译"><span>Ngrok 服务搭建及客户端的编译</span></a></h3><p>根据Ngrok的原理，首先你需要有一台带有公网ip的服务器，还需要有一个域名用来做证书和认证key的生成。搭建的大体思路是这样的：</p><ul><li>搭建编译ngrok需要的golang环境</li><li>生成客户端与服务端通讯的证书</li><li>编译服务端和客户端</li><li>启动使用</li></ul><p>这里以阿里云的Ecs的centos7.4为例，来详细记录了安装过程，其他系统和环境大家可类推。</p><h4 id="第一步-安装-golang-环境" tabindex="-1"><a class="header-anchor" href="#第一步-安装-golang-环境"><span>第一步 安装 golang 环境</span></a></h4><p>因为ngrok是使用golang开发的，所以在编译时是需要golang环境的。对于Centos的系统环境可直接使用yum安装，如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">yum</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> golang</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行 <code>go env</code> 查看是否安装成功。也可参考我之前的博文 <a href="https://pylixm.cc/posts/2018-01-25-Go-install.html" target="_blank" rel="noopener noreferrer">Golang 环境搭建及相关概念</a>。</p><h4 id="第二步-编译ngrok客户端和服务端" tabindex="-1"><a class="header-anchor" href="#第二步-编译ngrok客户端和服务端"><span>第二步 编译Ngrok客户端和服务端</span></a></h4><p>首先，我们从github下载ngrok的源码：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clone</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> https://github.com/inconshreveable/ngrok.git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ngrok</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>开始编译服务端：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ngrok</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">make</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> release-server</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样编译出来的服务端就可以在我们的服务器跑了，针对于其他类型的服务器，则需要配置golang的一些环境变量，如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span># 编译64位windows客户端</span></span>
<span class="line"><span>GOOS=windows GOARCH=amd64 make release-server</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样编译出来的服务端才能拿到别的服务器使用。更简单的方式是，直接在用的服务器系统上编译，这样golang的默认环境变量就是你系统对应的。</p><p>编译客户端，同服务端类似。因为我客户端是在我自己本地电脑上使用，所以需要指定相关golang的环境变量，如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span># windows </span></span>
<span class="line"><span>GOOS=windows GOARCH=amd64 make release-client  </span></span>
<span class="line"><span></span></span>
<span class="line"><span># mac </span></span>
<span class="line"><span>GOOS=darwin GOARCH=amd64 make release-client</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们的服务端和客户端都编译好了。</p><h4 id="第三步-生成证书" tabindex="-1"><a class="header-anchor" href="#第三步-生成证书"><span>第三步 生成证书</span></a></h4><p>可使用如下命令生成证书和通讯的key：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">export</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> NGROK_DOMAIN</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ngrok.pylixm.top</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">openssl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> genrsa</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rootCA.key</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2048</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">openssl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> req</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -x509</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -new</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -nodes</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -key</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rootCA.key</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -subj</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/CN=$NGROK_DOMAIN</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -days</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5000</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rootCA.pem</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">openssl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> genrsa</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> device.key</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2048</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">openssl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> req</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -new</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -key</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> device.key</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -subj</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/CN=$NGROK_DOMAIN</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> device.csr</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">openssl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> x509</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -req</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -in</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> device.csr</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -CA</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rootCA.pem</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -CAkey</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rootCA.key</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -CAcreateserial</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> device.crt</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -days</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会生成如下的6个文件备用：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>rootCA.key </span></span>
<span class="line"><span>rootCA.pem</span></span>
<span class="line"><span>device.key</span></span>
<span class="line"><span>device.csr</span></span>
<span class="line"><span>device.crt </span></span>
<span class="line"><span>rootCA.srl</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第四步-启动服务端和客户端" tabindex="-1"><a class="header-anchor" href="#第四步-启动服务端和客户端"><span>第四步 启动服务端和客户端</span></a></h4><p>在启动服务端之前，需要将我们上一步生成的证书替换ngrok默认的证书，在通讯时使用。 <code>ngrok/assets/client/tls/</code> 是ngrok证书默认地址，启动时会从这个目录获取证书和相关key。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>cp rootCA.pem ngrok/assets/client/tls/ngrokroot.crt</span></span>
<span class="line"><span>cp device.crt ngrok/assets/server/tls/snakeoil.crt</span></span>
<span class="line"><span>cp device.key ngrok/ssets/server/tls/snakeoil.key</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动服务端：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>./bin/ngrokd -domain=&quot;ngrok.pylixm.top&quot; -httpAddr=&quot;:80&quot; -httpsAddr=&quot;:443&quot; -tunnelAddr=&quot;:4443&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>domain</code> 是生成证书时的域名。</li><li><code>httpAddr</code> 是http转发的端口，默认80。</li><li><code>httpsAddr</code> 是https转发的端口，默认443。</li><li><code>tunnelAddr</code> 是服务端和客户端通讯的端口，默认4443。</li></ul><p>另外，还需要将域名 <code>ngrok.pylixm.top</code> 解析到服务端的ip。建议大家为了能支持子域名，大家可做泛解析。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>A   *  xx.xx.xx.xx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接下来是客户端，我们在服务器上编译好了客户端，怎么下载下来呢。有个小技巧，大多数linux系统都自带python，可使用python再带的<code>SimpleHTTPServer</code>模块来临时起一个web服务，在本地直接访问即可看到起服务时的目录下的所有文件。有点类似ftp服务，但这个更简单，无需额外安装其他工具。</p><p>将我们的客户端下载下来后，编写一个配置文件，如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>server_addr: ngrok.pylixm.top:4443</span></span>
<span class="line"><span>trust_host_root_certs: false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用如下命令启动：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ngrok</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -config=ngrok.cfg</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -log=ngrok.log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -subdomain=test</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 8000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>config</code> 指定配置文件</li><li><code>log</code> 指定日志文件</li><li><code>subdomain</code> 可指定一个子域名前缀</li><li><code>port</code> 本地服务的端口</li></ul><p>看到如下日志，说明链接配置成功了。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ngrok</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                                                                                                                                                                                                                                                         (Ctrl+C </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">to</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> quit</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Tunnel</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Status</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                 online</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Version</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                       1.7/1.7</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Forwarding</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                    https://test.ngrok.pylixm.top:4443</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> -</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 127.0.0.1:8000</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Forwarding</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                    http://test.ngrok.pylixm.top:4443</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> -</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 127.0.0.1:8000</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Web</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Interface</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                 127.0.0.1:4040</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># Conn                        0</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Avg</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Conn</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Time</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                 0.00ms</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此，我们就可以使用域名<code>test.ngrok.pylixm.top</code> 来访问本的8000的服务了。</p><p>这里有几个注意的点：</p><ul><li>在使用ECS时，注意是否在安全组中配置了相关端口。例如上边服务端和客户端使用的4443。</li><li>这里有些一键安装脚本，大家可参考，有些配置和版本已经过时： <ul><li>https://gist.github.com/popucui/18c342baefefed2ba66f87a9420efae5</li><li>https://github.com/sunnyos/ngrok/blob/master/ngrok.sh</li></ul></li></ul><h3 id="nginx-代理共享80出口" tabindex="-1"><a class="header-anchor" href="#nginx-代理共享80出口"><span>Nginx 代理共享80出口</span></a></h3><p>微信公众号开发时，要求后端服务没有端口。那么我们ngrok服务的http端口就需要设置为80。问题来了，我们服务器上还可能跑着其他应用，比如我的ECS上还跑了我的博客实例。这怎么办呢？解决方案是使用nginx的反向代理。</p><p>nginx 的安装配置，大家可自行百度，这里不做过多描述。</p><p>大家只需在nginx的配置中增加一段server配置，如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>server {</span></span>
<span class="line"><span>        server_name *.ngrok.pylixm.top </span></span>
<span class="line"><span>        listen 80;</span></span>
<span class="line"><span>        keepalive_timeout 70;</span></span>
<span class="line"><span>        proxy_set_header &quot;Host&quot; $host:8081;  # 必须, 8081 为ngrok http转发端口</span></span>
<span class="line"><span>        location / {</span></span>
<span class="line"><span>                proxy_pass_header Server;</span></span>
<span class="line"><span>                proxy_redirect off;</span></span>
<span class="line"><span>                proxy_pass http://127.0.0.1:8081;  # 必须, 8081 为ngrok http转发端口</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        access_log off;</span></span>
<span class="line"><span>        log_not_found off;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们可以直接使用<code>*.ngrok.pylixm.top</code> 这个子域名访问ngrok代理的我们本地的服务了，同时还又不影响其他的80端口服务。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://blog.csdn.net/yjc_1111/article/details/79353718" target="_blank" rel="noopener noreferrer">10分钟教你搭建自己的ngrok服务器</a></li><li><a href="https://www.lylinux.org/ubuntu%E5%AE%89%E8%A3%85ngrok%E5%B9%B6%E4%BD%BF%E7%94%A8nginx%E4%BB%A3%E7%90%86.html" target="_blank" rel="noopener noreferrer">ubuntu安装ngrok并使用nginx代理</a></li></ul>`,62)])])}const r=i(l,[["render",t]]),d=JSON.parse('{"path":"/pages/b67f9a/","title":"Ngrok 服务搭建完全手册","lang":"zh-CN","frontmatter":{"title":"Ngrok 服务搭建完全手册","tags":["环境搭建","Ngrok","内网穿透"],"permalink":"/pages/b67f9a/","createTime":"2023/09/08 17:36:02","description":"最近需要开发个微信公众号后台，需要内网穿透工具，之前使用过sunny-ngrok，这个现在也变成付费的了。这次决定自己搭建一个，顺便学习下。以下博文，是搭建过程，已在整理思路备查，也希望能给自己动手搭建的同学一些提示。 Ngrok 简介 在说Ngrok之前，先来说下「内网穿透」。内网穿透是一种网络术语，是指局域网内部的服务，穿透内网的限制将服务暴露在公...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Ngrok 服务搭建完全手册\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/b67f9a/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"Ngrok 服务搭建完全手册"}],["meta",{"property":"og:description","content":"最近需要开发个微信公众号后台，需要内网穿透工具，之前使用过sunny-ngrok，这个现在也变成付费的了。这次决定自己搭建一个，顺便学习下。以下博文，是搭建过程，已在整理思路备查，也希望能给自己动手搭建的同学一些提示。 Ngrok 简介 在说Ngrok之前，先来说下「内网穿透」。内网穿透是一种网络术语，是指局域网内部的服务，穿透内网的限制将服务暴露在公..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"内网穿透"}],["meta",{"property":"article:tag","content":"Ngrok"}],["meta",{"property":"article:tag","content":"环境搭建"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":6.25,"words":1874},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"03.中间件/30.其他/06.ngrok-server.md","headers":[],"categoryList":[{"id":"affec3","sort":3,"name":"中间件"},{"id":"214edd","sort":30,"name":"其他"}]}');export{r as comp,d as data};
