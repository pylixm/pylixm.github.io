import{_ as i,c as a,a as e,o as n}from"./app-DdES4ywf.js";const t="/imgs/TemplateView.png",l="/imgs/ListView.png",h="/imgs/DetailView.png",p={};function k(r,s){return n(),a("div",null,[...s[0]||(s[0]=[e(`<p><strong>提示</strong>：文章概念性语句比较多，建议先看 Classview 的<a href="https://docs.djangoproject.com/en/1.9/topics/class-based-views/" target="_blank" rel="noopener noreferrer">官方文档</a>或<a href="http://python.usyiyi.cn/django_182/topics/class-based-views/index.html" target="_blank" rel="noopener noreferrer">1.8 中文翻译文档</a>。</p><p>之前使用 <code>django</code> 开发都是使用 func-view ，对Classview一直是向往的。</p><p>最近有些时间，看下Classview的用法，记录下，备查。</p><h3 id="_0x01-使用目的及优势" tabindex="-1"><a class="header-anchor" href="#_0x01-使用目的及优势"><span>0x01 使用目的及优势</span></a></h3><ul><li><p>HTTP 方法（GET、POST 等）可以有各自的方法，而不用通过条件分支来解决。</p></li><li><p>面向对象的技术例如Mixin（多继承）可以将代码分解成可重用的组件。</p></li><li><p>更好的利用 <code>通用视图</code>。(基于函数的通用视图难易扩展，基于类的可以通过 Mixin 来扩展，更加灵活)</p></li></ul><h3 id="_0x02-classview-原理" tabindex="-1"><a class="header-anchor" href="#_0x02-classview-原理"><span>0x02 Classview 原理</span></a></h3><p>Django 的URL 解析器将请求和关联的参数发送给一个可调用的函数而不是一个类，所以基于类的视图有一个as_view() 类方法用来作为类的可调用入口。</p><p>该as_view 入口点创建类的一个实例并调用dispatch() 方法。dispatch 查看请求是GET 还是POST 等等，并将请求转发给相应的方法，</p><p>如果该方法没有定义则引发HttpResponseNotAllowed。</p><h3 id="_0x03-用法筛记" tabindex="-1"><a class="header-anchor" href="#_0x03-用法筛记"><span>0x03 用法筛记</span></a></h3><h4 id="classview-中装饰器的用法" tabindex="-1"><a class="header-anchor" href="#classview-中装饰器的用法"><span>Classview 中装饰器的用法</span></a></h4><ul><li>在urlconf 中直接装饰 <code>as_view()</code> 函数。</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> django</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">contrib</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">auth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">decorators </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> login_required</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> permission_required</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> django</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">views</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">generic </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TemplateView</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> .</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">views </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> VoteView</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">urlpatterns </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    url</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">r</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">^</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">about/</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> login_required</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TemplateView</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">as_view</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">template_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">secret.html</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))),</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    url</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">r</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">^</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">vote/</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> permission_required</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">polls.can_vote</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">VoteView</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">as_view</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())),</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 <code>method_decorator</code> 转化后直接装饰到 class 的方法上</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> django</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">contrib</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">auth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">decorators </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> login_required</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> django</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">utils</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">decorators </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> method_decorator</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> django</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">views</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">generic </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TemplateView</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ProtectedView</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TemplateView</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        template_name </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">secret.html</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        @</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">method_decorator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">login_required</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> dispatch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> **</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">kwargs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> super</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ProtectedView</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">dispatch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> **</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">kwargs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_0x04-扩展通用视图的方法" tabindex="-1"><a class="header-anchor" href="#_0x04-扩展通用视图的方法"><span>0x04 扩展通用视图的方法</span></a></h3><ul><li><p>在url 中直接传递参数，覆盖类属性，到达扩展的作用。</p></li><li><p>编写其子类，覆盖其方法。</p></li></ul><h3 id="_0x05-通用视图基本用法要点总结" tabindex="-1"><a class="header-anchor" href="#_0x05-通用视图基本用法要点总结"><span>0x05 通用视图基本用法要点总结</span></a></h3><ul><li><p>context_object_name 属性指定要使用的上下文变量，默认的是 object_list</p></li><li><p>model参数指定视图在哪个数据库模型之上进行操作</p></li><li><p>template 指定视图模板</p></li><li><p>可以使用 get_context_data 指定额外的上下文变量</p></li><li><p>可以使用 get_query 指定经过逻辑过滤的处理对象（queryset 同 model ）</p></li><li><p>form_class 指定操作的Form</p></li></ul><h3 id="_0x06-常用视图解析" tabindex="-1"><a class="header-anchor" href="#_0x06-常用视图解析"><span>0x06 常用视图解析</span></a></h3><h4 id="_1、通用模板视图-templateview" tabindex="-1"><a class="header-anchor" href="#_1、通用模板视图-templateview"><span>1、通用模板视图 <code>TemplateView</code></span></a></h4><p><img src="`+t+'" alt=""></p><p><code>ContextMixin</code> 提供上线文context <code>View</code> 提供 as_view 函数 <code>TemplateResponseMixin</code> 返回TemplateResponse 对象，template 使用的是类属性 tempalte_name。</p><h4 id="_2、通用列表视图-listview和通用详情页视图-detailview" tabindex="-1"><a class="header-anchor" href="#_2、通用列表视图-listview和通用详情页视图-detailview"><span>2、通用列表视图 <code>ListView</code>和通用详情页视图 <code>DetailView</code></span></a></h4><p><img src="'+l+'" alt=""></p><p><img src="'+h+'" alt=""></p><p>（原图片出处<a href="http://blog.csdn.net/hackerain/article/details/40919789" target="_blank" rel="noopener noreferrer">博客</a>中描述，直接搬过来了）</p><p>在这两个类图中，最关键的组件就是MultiObjectMixin和SingleObjectMixin这两个类了，他们实现的功能是从数据库中读取数据，</p><p>并且构建要传入template的context。每个类都有一些属性和方法可以覆盖，实现自定制，比如可以覆盖context_object_name变量，</p><p>用来指定传入template的context的对象的变量名；可以覆盖get_context_data()方法，用来将其他的变量放到context中；</p><p>为queryset赋值，就可以自己指定这个View操作的对象(列表)；或者是直接重写get_queryset()/get_object()方法，简单暴力。</p><p>注意，这两个类，也是继承自TemplateResponseMixin，也就是说它们也是直接返回的TemplateResponse对象。</p><h3 id="_0x07-其他知识点" tabindex="-1"><a class="header-anchor" href="#_0x07-其他知识点"><span>0x07 其他知识点</span></a></h3><ul><li><p>对于每个请求都会实例化类的一个实例，但是as_view() 入口点设置的类属性只在URL 第一次导入时配置。</p></li><li><p>只能继承一个通用视图 —— 也就是说，只能有一个父类继承View，其它的父类必须是Mixin</p></li><li><p>你的视图扩展应该仅仅使用那些来自于同一组通用基类的view或者mixins</p></li></ul><h4 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h4><p><a href="http://blog.csdn.net/hackerain/article/details/40919789" target="_blank" rel="noopener noreferrer">http://blog.csdn.net/hackerain/article/details/40919789</a></p><p><a href="http://python.usyiyi.cn/django/topics/class-based-views/index.html" target="_blank" rel="noopener noreferrer">http://python.usyiyi.cn/django/topics/class-based-views/index.html</a></p><p><a href="http://blog.csdn.net/hackerain/article/details/40919789" target="_blank" rel="noopener noreferrer">http://blog.csdn.net/hackerain/article/details/40919789</a></p>',38)])])}const o=i(p,[["render",k]]),g=JSON.parse('{"path":"/pages/7d817a/","title":"Django学习笔记- Class View","lang":"zh-CN","frontmatter":{"title":"Django学习笔记- Class View","tags":["Django","Django-Classview"],"permalink":"/pages/7d817a/","createTime":"2023/09/08 17:36:02","description":"提示：文章概念性语句比较多，建议先看 Classview 的官方文档或1.8 中文翻译文档。 之前使用 django 开发都是使用 func-view ，对Classview一直是向往的。 最近有些时间，看下Classview的用法，记录下，备查。 0x01 使用目的及优势 HTTP 方法（GET、POST 等）可以有各自的方法，而不用通过条件分支来解...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Django学习笔记- Class View\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/7d817a/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"Django学习笔记- Class View"}],["meta",{"property":"og:description","content":"提示：文章概念性语句比较多，建议先看 Classview 的官方文档或1.8 中文翻译文档。 之前使用 django 开发都是使用 func-view ，对Classview一直是向往的。 最近有些时间，看下Classview的用法，记录下，备查。 0x01 使用目的及优势 HTTP 方法（GET、POST 等）可以有各自的方法，而不用通过条件分支来解..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"Django-Classview"}],["meta",{"property":"article:tag","content":"Django"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":3.16,"words":947},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"01.开发语言/01.Python/02.Django/25.Django-class-Views.md","headers":[],"categoryList":[{"id":"59843f","sort":1,"name":"开发语言"},{"id":"9d2a49","sort":1,"name":"Python"},{"id":"f8691d","sort":2,"name":"Django"}]}');export{o as comp,g as data};
