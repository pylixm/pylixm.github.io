import{_ as i,c as n,a,o as e}from"./app-DdES4ywf.js";const l={};function p(t,s){return e(),n("div",null,[...s[0]||(s[0]=[a(`<p>nginx + uwsgi +django 是一种比较常见的django部署方式了，除了此种方式还有使用gunicorn来代替uwsgi的，gunicorn可以开启协程模式，有兴趣的可以去看gunicorn的文档，此处不做探讨。本文主要总结收集了nginx+uwsgi方式部署时长遇到的问题。</p><p>nginx server配置：</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-nginx"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#tream component nginx needs to connect to</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">upstream</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> djangostream </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # server unix:///path/to/your/mysite/mysite.sock; # for a file socket</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    server</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 127.0.0.1:8001; </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># for a web port socket (we&#39;ll use this first)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># configuration of the server</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">server</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # the port your site will be served on</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    listen </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     80</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # the domain name it will serve for</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    server_name </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">localhost</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # substitute your machine&#39;s IP address or FQDN</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    charset </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    utf-8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # max upload size</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    client_max_body_size </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">75M</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   # adjust to taste</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    large_client_header_buffers </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 16k</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # Django media</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    location</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> /media  </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        alias </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/you/path/media</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # your Django project&#39;s media files - amend as required</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    location</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> /static </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        alias </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/you/path/staticfiles</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # your Django project&#39;s static files - amend as required</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # Finally, send all non-media requests to the Django server.</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    location</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> / </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        #uwsgi_pass  127.0.0.1:8001; # or no use upstream  </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        uwsgi_pass </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> djangostream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        include </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    /usr/local/nginx/conf/uwsgi_params</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # the uwsgi_params file you installed</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>uwsgi 部署模板：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>[uwsgi]</span></span>
<span class="line"><span>socket = 0.0.0.0:8002</span></span>
<span class="line"><span># the base directory (full path)</span></span>
<span class="line"><span>chdir = /opt/myweb</span></span>
<span class="line"><span>wsgi-file = /opt/myweb/wsgi.py</span></span>
<span class="line"><span>processes = 4</span></span>
<span class="line"><span>threads = 2</span></span>
<span class="line"><span>buffer-size=32768</span></span>
<span class="line"><span>stats = 127.0.0.1:9191</span></span>
<span class="line"><span>daemonize=/opt/myweb/web.log</span></span>
<span class="line"><span># clear environment on exit</span></span>
<span class="line"><span>vacuum = true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 常用配置说明：</span></span>
<span class="line"><span># socket ： 地址和端口号，例如：socket = 127.0.0.1:50000</span></span>
<span class="line"><span># processes ： 开启的进程数量</span></span>
<span class="line"><span># workers ： 开启的进程数量，等同于processes（官网的说法是spawn the specified number of  workers / processes）</span></span>
<span class="line"><span># chdir ： 指定运行目录（chdir to specified directory before apps loading）</span></span>
<span class="line"><span># wsgi-file ： 载入wsgi-file（load .wsgi file）</span></span>
<span class="line"><span># stats ： 在指定的地址上，开启状态服务（enable the stats server on the specified address）</span></span>
<span class="line"><span># threads ： 运行线程。（run each worker in prethreaded mode with the specified number of threads）</span></span>
<span class="line"><span># master ： 允许主进程存在（enable master process）</span></span>
<span class="line"><span># daemonize ： 使进程在后台运行，并将日志打到指定的日志文件或者udp服务器（daemonize uWSGI）。实际上最常用的，还是把运行记录输出到一个本地文件上。</span></span>
<span class="line"><span># log-maxsize ：以固定的文件大小（单位KB），切割日志文件。 例如：log-maxsize = 50000000  就是50M一个日志文件。</span></span>
<span class="line"><span># pidfile ： 指定pid文件的位置，记录主进程的pid号。</span></span>
<span class="line"><span># vacuum ： 当服务器退出的时候自动清理环境，删除unix socket文件和pid文件（try to remove all of the generated file/sockets）</span></span>
<span class="line"><span># disable-logging ： 不记录请求信息的日志。只记录错误以及uWSGI内部消息到日志中。如果不开启这项，那么你的日志中会大量出现这种记录：</span></span>
<span class="line"><span># [pid: 347|app: 0|req: 106/367] 117.116.122.172 () {52 vars in 961 bytes} [Thu Jul  7 19:20:56 2016] POST /post =&gt; generated 65 bytes in 6 msecs (HTTP/1.1 200) 2 headers in 88 bytes (1 switches on core 0)</span></span>
<span class="line"><span># log-maxsize: 日志大小，当大于这个大小会进行切分 (Byte)</span></span>
<span class="line"><span># log-truncate: 当启动时切分日志</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见问题收集" tabindex="-1"><a class="header-anchor" href="#常见问题收集"><span>常见问题收集</span></a></h2><p><strong>1、WSGI/uwsgi/uWSGI区别</strong></p><ul><li>WSGI是一种通信协议。</li><li>uwsgi是一种线路协议而不是通信协议，在此常用于在uWSGI服务器与其他网络服务器的数据通信。</li><li>而uWSGI是实现了uwsgi和WSGI两种协议的Web服务器。</li></ul><p>可以通过<code>pip list</code>看到我们按照的uWSGI:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>uWSGI                     2.0.17.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>2、nignx与后端uwsgi链接问题</strong></p><p>nignx error日志如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>2018/09/04 16:21:24 [error] 22660#0: *1 connect() failed (111: Connection refused) while connecting to upstream, client: 10.222.76.194, server: localhost, request: &quot;GET /favicon.ico HTTP/1.1&quot;, upstream: &quot;uwsgi://127.0.0.1:8000&quot;, host: &quot;localhost&quot;, referrer: &quot;http://elocalhost/&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以看到后端链接被拒绝，nginx页面返回的是502。此种情况，大多为uwsgi的配置问题。可从以下几点排查：</p><ul><li>地址和端口号配置<code>socket</code>, 注意127.0.0.1和0.0.0.0的区别。</li><li><code>sockect</code>和<code>http</code>都可以指定地址和端口，当使用nginx代理时，注意配置，</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>sockect --- &gt;  uwsgi_pass </span></span>
<span class="line"><span>http ---&gt; proxy_pass</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3、uWSGI的安装位置</strong></p><p>在部署项目时，经常会用到<code>virtualenv</code>来生产虚拟环境来隔离系统的python环境，此时我们需要注意，安装uWSGI和运行django的python环境需要是同一个。</p><p><strong>4、启动后uwsgi报错：-- unavailable modifier requested: 0 --</strong></p><p>造成此错误的原因是uWSGI安装的python和项目使用的不是一个，重新安装uWSGI即可。使用项目相同的python编译安装，或直接使用项目使用python的包管理工具安装，如pip、pipenv。</p><blockquote><p>TODO待补充</p></blockquote><p>欢迎大家在下方留言，提交自己遇到的问题，我们来共同交流探讨~</p>`,22)])])}const d=i(l,[["render",p]]),h=JSON.parse('{"path":"/pages/74a6cf/","title":"nginx+uwsgi 发布django项目常遇到的问题","lang":"zh-CN","frontmatter":{"title":"nginx+uwsgi 发布django项目常遇到的问题","tags":["Django","nginx","uwsgi","QA"],"permalink":"/pages/74a6cf/","createTime":"2023/09/08 17:36:02","description":"nginx + uwsgi +django 是一种比较常见的django部署方式了，除了此种方式还有使用gunicorn来代替uwsgi的，gunicorn可以开启协程模式，有兴趣的可以去看gunicorn的文档，此处不做探讨。本文主要总结收集了nginx+uwsgi方式部署时长遇到的问题。 nginx server配置： uwsgi 部署模板： 常见...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"nginx+uwsgi 发布django项目常遇到的问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/74a6cf/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"nginx+uwsgi 发布django项目常遇到的问题"}],["meta",{"property":"og:description","content":"nginx + uwsgi +django 是一种比较常见的django部署方式了，除了此种方式还有使用gunicorn来代替uwsgi的，gunicorn可以开启协程模式，有兴趣的可以去看gunicorn的文档，此处不做探讨。本文主要总结收集了nginx+uwsgi方式部署时长遇到的问题。 nginx server配置： uwsgi 部署模板： 常见..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"QA"}],["meta",{"property":"article:tag","content":"uwsgi"}],["meta",{"property":"article:tag","content":"nginx"}],["meta",{"property":"article:tag","content":"Django"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":3.51,"words":1054},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"03.中间件/06.nginx/01.nginx-uwsgi-django-deploy.md","headers":[],"categoryList":[{"id":"affec3","sort":3,"name":"中间件"},{"id":"72b364","sort":6,"name":"nginx"}]}');export{d as comp,h as data};
