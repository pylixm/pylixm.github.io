import{_ as e,c as o,a as p,o as a}from"./app-DdES4ywf.js";const i="/imgs/complexity/sort-optimization.jpg",r={};function n(m,t){return a(),o("div",null,[...t[0]||(t[0]=[p('<blockquote><p>《数据结构与算法-王争》学习笔记，记录备查</p></blockquote><p>各排序算法情况：</p><p><img src="'+i+'" alt=""></p><h2 id="快速排序的优化" tabindex="-1"><a class="header-anchor" href="#快速排序的优化"><span>快速排序的优化</span></a></h2><p>快速排序，时间复杂度在 O(nlogn) 和 O(n<sup>2)之间。在极坏的情况的，时间复杂度会退化为O(n</sup>2)。这种 O(n2) 时间复杂度出现的主要原因还是因为我们分区点选的不够合理。</p><p>最理想的分区点是：被分区点分开的两个分区中，数据的数量差不多。</p><p>两种选择分区点的方法：</p><ul><li><p><strong>三数取中法</strong> 取首、尾、中间，分别取出一个数，然后对比大小，取这3个数的中间值作为分区点。如果排序的数组比较大，则可以采用“五数取中” “十数取中”。</p></li><li><p><strong>随机法</strong> 随机法就是每次从要排序的区间中，随机选择一个元素作为分区点。</p></li></ul>',8)])])}const s=e(r,[["render",n]]),l=JSON.parse('{"path":"/data-structure-algorithm/c9df9d/","title":"数据结构与算法 - 算法 - 排序优化","lang":"zh-CN","frontmatter":{"title":"数据结构与算法 - 算法 - 排序优化","tags":["数据结构与算法","排序"],"permalink":"/data-structure-algorithm/c9df9d/","createTime":"2023/09/08 17:36:02","description":"《数据结构与算法-王争》学习笔记，记录备查 各排序算法情况： 快速排序的优化 快速排序，时间复杂度在 O(nlogn) 和 O(n2)之间。在极坏的情况的，时间复杂度会退化为O(n2)。这种 O(n2) 时间复杂度出现的主要原因还是因为我们分区点选的不够合理。 最理想的分区点是：被分区点分开的两个分区中，数据的数量差不多。 两种选择分区点的方法： 三数...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构与算法 - 算法 - 排序优化\\",\\"image\\":[\\"https://pylixm.top/imgs/complexity/sort-optimization.jpg\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/data-structure-algorithm/c9df9d/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"数据结构与算法 - 算法 - 排序优化"}],["meta",{"property":"og:description","content":"《数据结构与算法-王争》学习笔记，记录备查 各排序算法情况： 快速排序的优化 快速排序，时间复杂度在 O(nlogn) 和 O(n2)之间。在极坏的情况的，时间复杂度会退化为O(n2)。这种 O(n2) 时间复杂度出现的主要原因还是因为我们分区点选的不够合理。 最理想的分区点是：被分区点分开的两个分区中，数据的数量差不多。 两种选择分区点的方法： 三数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pylixm.top/imgs/complexity/sort-optimization.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"排序"}],["meta",{"property":"article:tag","content":"数据结构与算法"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":0.88,"words":263},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"notes/04.数据结构与算法笔记/11.DSALG-sort-optimization.md","headers":[]}');export{s as comp,l as data};
