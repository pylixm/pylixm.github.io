import{_ as e,c as a,a as i,o}from"./app-DdES4ywf.js";const l={};function r(p,t){return o(),a("div",null,[...t[0]||(t[0]=[i('<blockquote><p>《数据结构与算法-王争》学习笔记，记录备查</p></blockquote><h2 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找"><span>二分查找</span></a></h2><p>二分查找针对的是一个<strong>有序的数据集合</strong>，查找思想有点类似分治思想。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0。</p><ul><li>时间复杂度：O(logn)</li></ul><h2 id="二分查找-实现注意点" tabindex="-1"><a class="header-anchor" href="#二分查找-实现注意点"><span>二分查找，实现注意点</span></a></h2><ul><li><p>循环退出条件，low &lt;= high，而不是 low &lt; higt 。</p></li><li><p>mid 的取值，mid = low+(high-low)/2 进一步优化，low+((high-low)&gt;&gt;1)</p></li><li><p>low 和high 的更新，low=mid+1，high=mid-1 ，防止low和high相同，出现死循环。</p></li></ul><p>二分查找除了用循环来实现，还可以用递归来实现。</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><ul><li>依赖顺序表结构，简单点说就是数组。</li></ul><p>二分查找依赖下标进行操作，同时还需要随机访问才能达到时间复杂度O(logn)。</p><ul><li>针对的是有序数据。</li></ul><p>二分查找只能用在插入、删除操作不频繁、一次排序多次查找的场景。</p><ul><li>数据量太小适合二分查找。</li></ul><p>在数据量小，比较比较高效的情况下，直接遍历就足够了。在用二分查找，增加了逻辑的复杂性。但是，在数据量小，比较比较费时的时候，还是建议使用二分查找。</p><ul><li>数据量太大不合适二分查找。</li></ul><p>因为二分查找，依赖数组，而数组必须使用连续的数组空间。当数据量太大的时候，没法完全加载到内存中进行操作。</p>',16)])])}const c=e(l,[["render",r]]),m=JSON.parse('{"path":"/data-structure-algorithm/b885f4/","title":"数据结构与算法 - 算法 - 二分查找","lang":"zh-CN","frontmatter":{"title":"数据结构与算法 - 算法 - 二分查找","tags":["数据结构与算法","查找"],"permalink":"/data-structure-algorithm/b885f4/","createTime":"2023/09/08 17:36:02","description":"《数据结构与算法-王争》学习笔记，记录备查 二分查找 二分查找针对的是一个有序的数据集合，查找思想有点类似分治思想。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0。 时间复杂度：O(logn) 二分查找，实现注意点 循环退出条件，low <= high，而不是 low < higt 。 mid...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构与算法 - 算法 - 二分查找\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/data-structure-algorithm/b885f4/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"数据结构与算法 - 算法 - 二分查找"}],["meta",{"property":"og:description","content":"《数据结构与算法-王争》学习笔记，记录备查 二分查找 二分查找针对的是一个有序的数据集合，查找思想有点类似分治思想。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0。 时间复杂度：O(logn) 二分查找，实现注意点 循环退出条件，low <= high，而不是 low < higt 。 mid..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"查找"}],["meta",{"property":"article:tag","content":"数据结构与算法"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":1.48,"words":445},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"notes/04.数据结构与算法笔记/14.DSALG-search-binary.md","headers":[]}');export{c as comp,m as data};
