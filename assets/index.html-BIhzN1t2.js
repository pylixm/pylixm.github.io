import{_ as e,c as t,a,o as i}from"./app-DdES4ywf.js";const h={};function o(n,s){return i(),t("div",null,[...s[0]||(s[0]=[a(`<p>一直对ssh的概念比较模糊，看到阮一峰大神的博客有说明，果断转来记录备查。</p><p>原文：<a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener noreferrer">阮一峰的网络日志</a></p><p>SSH是每一台Linux电脑的标准配置。 随着Linux设备从电脑逐渐扩展到手机、外设和家用电器，SSH的使用范围也越来越广。不仅程序员离不开它，很多普通用户也每天使用。 SSH具备多种功能，可以用于很多场合。有些事情，没有它就是办不成。本文是我的学习笔记，总结和解释了SSH的常见用法，希望对大家有用。 虽然本文内容只涉及初级应用，较为简单，但是需要读者具备最基本的&quot;Shell知识&quot;和了解&quot;公钥加密&quot;的概念。如果你对它们不熟悉， 我推荐先阅读<a href="http://www.ee.surrey.ac.uk/Teaching/Unix/" target="_blank" rel="noopener noreferrer">《UNIX / Linux 初学者教程》</a>和<a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="noopener noreferrer">《数字签名是什么？》</a>。</p><h2 id="一、什么是ssh" tabindex="-1"><a class="header-anchor" href="#一、什么是ssh"><span>一、什么是SSH？</span></a></h2><p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。 如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。 最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。 需要指出的是，SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH，它是自由软件，应用非常广泛。 此外，本文只讨论SSH在Linux Shell中的用法。如果要在Windows系统中使用SSH，会用到另一种软件PuTTY，这需要另文介绍。</p><h2 id="二、最基本的用法" tabindex="-1"><a class="header-anchor" href="#二、最基本的用法"><span>二、最基本的用法</span></a></h2><p>SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。 <code>$ ssh user@host</code> 如果本地用户名与远程用户名一致，登录时可以省略用户名。 <code>$ ssh host</code> SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。 <code>$ ssh -p 2222 user@host</code> 上面这条命令表示，ssh直接连接远程主机的2222端口。</p><h2 id="三、中间人攻击" tabindex="-1"><a class="header-anchor" href="#三、中间人攻击"><span>三、中间人攻击</span></a></h2><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。 整个过程是这样的：</p><ul><li>远程主机收到用户的登录请求，把自己的公钥发给用户。</li><li>用户使用这个公钥，将登录密码加密后，发送回来。</li><li>远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</li></ul><p>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。 可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的&quot;中间人攻击&quot;（Man-in-the-middle attack）。 SSH协议是如何应对的呢？</p><h2 id="四、口令登录" tabindex="-1"><a class="header-anchor" href="#四、口令登录"><span>四、口令登录</span></a></h2><p>如果你是第一次登录对方主机，系统会出现下面的提示：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ssh</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> user@host</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">The</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> authenticity</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> of</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> host</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">host (12.18.429.21)</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> can</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">t be established.</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Are you sure you want to continue connecting (yes/no)?</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？ 所谓&quot;公钥指纹&quot;，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是98:2e:d7:e0🇩🇪9f:ac:67:28:c2:42:2d:37:16:58:4d，再进行比较，就容易多了。 很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。 假定经过风险衡量以后，用户决定接受这个远程主机的公钥。 <code>Are you sure you want to continue connecting (yes/no)? yes</code> 系统会出现一句提示，表示host主机已经得到认可。 <code>Warning: Permanently added &#39;host,12.18.429.21&#39; (RSA) to the list of known hosts.</code> 然后，会要求输入密码。 <code>Password: (enter password)</code> 如果密码正确，就可以登录了。 当远程主机的公钥被接受以后，它就会被保存在文件$HOME/.ssh/known_hosts之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。 每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是/etc/ssh/ssh_known_hosts，保存一些对所有用户都可信赖的远程主机的公钥。</p><h2 id="五、公钥登录" tabindex="-1"><a class="header-anchor" href="#五、公钥登录"><span>五、公钥登录</span></a></h2><p>使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。 所谓&quot;公钥登录&quot;，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。 这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个： <code>$ ssh-keygen</code> 运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。 运行结束以后，在<code>$HOME/.ssh/</code>目录下，会新生成两个文件：id_rsa.pub和id_rsa。前者是你的公钥，后者是你的私钥。 这时再输入下面的命令，将公钥传送到远程主机host上面： <code>$ ssh-copy-id user@host</code> 好了，从此你再登录，就不需要输入密码了。 如果还是不行，就打开远程主机的/etc/ssh/sshd_config这个文件，检查下面几行前面&quot;#&quot;注释是否取掉。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>RSAAuthentication yes</span></span>
<span class="line"><span>PubkeyAuthentication yes</span></span>
<span class="line"><span>AuthorizedKeysFile .ssh/authorized_keys</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，重启远程主机的ssh服务。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>　　// ubuntu系统</span></span>
<span class="line"><span>　　service ssh restart</span></span>
<span class="line"><span>　　// debian系统</span></span>
<span class="line"><span>　　/etc/init.d/ssh restart</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、authorized-keys文件" tabindex="-1"><a class="header-anchor" href="#六、authorized-keys文件"><span>六、authorized_keys文件</span></a></h2><p>远程主机将用户的公钥，保存在登录后的用户主目录的$HOME/.ssh/authorized_keys文件中。公钥就是一段字符串，只要把它追加在authorized_keys文件的末尾就行了。</p><p>这里不使用上面的ssh-copy-id命令，改用下面的命令，解释公钥的保存过程：</p><p><code>$ ssh user@host &#39;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub</code></p><p>这条命令由多个语句组成，依次分解开来看：（1）&quot;$ ssh user@host&quot;，表示登录远程主机；（2）单引号中的mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys，表示登录后在远程shell上执行的命令：（3）&quot;$ mkdir -p .ssh&quot;的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；（4）&#39;cat &gt;&gt; .ssh/authorized_keys&#39; &lt; <sub>/.ssh/id_rsa.pub的作用是，将本地的公钥文件</sub>/.ssh/id_rsa.pub，重定向追加到远程文件authorized_keys的末尾。 写入authorized_keys文件后，公钥登录的设置就完成了。</p><p>秘钥登录和免密登录： <img src="https://ws1.sinaimg.cn/large/8697aaedly1fv4ao3iar1j20ib0br3zi.jpg" alt=""></p><h2 id="七、远程操作" tabindex="-1"><a class="header-anchor" href="#七、远程操作"><span>七、远程操作</span></a></h2><p>SSH不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。 上一节的操作，就是一个例子： <code>$ ssh user@host &#39;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub</code> 单引号中间的部分，表示在远程主机上执行的操作；后面的输入重定向，表示数据通过SSH传向远程主机。 这就是说，SSH可以在用户和远程主机之间，建立命令和数据的传输通道，因此很多事情都可以通过SSH来完成。 下面看几个例子。 【例1】 将<code>$HOME/src/</code>目录下面的所有文件，复制到远程主机的<code>$HOME/src/</code>目录。 <code>　　$ cd &amp;&amp; tar czv src | ssh user@host &#39;tar xz&#39;</code> 【例2】 将远程主机<code>$HOME/src/</code>目录下面的所有文件，复制到用户的当前目录。 <code>　　$ ssh user@host &#39;tar cz src&#39; | tar xzv</code> 【例3】 查看远程主机是否运行进程httpd。 <code>　　$ ssh user@host &#39;ps ax | grep [h]ttpd&#39;</code></p><h2 id="八、绑定本地端口" tabindex="-1"><a class="header-anchor" href="#八、绑定本地端口"><span>八、绑定本地端口</span></a></h2><p>既然SSH可以传送数据，那么我们可以让那些不加密的网络连接，全部改走SSH连接，从而提高安全性。 假定我们要让8080端口的数据，都通过SSH传向远程主机，命令就这样写： <code>　　$ ssh -D 8080 user@host</code> SSH会建立一个socket，去监听本地的8080端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机。可以想象，如果8080端口原来是一个不加密端口，现在将变成一个加密端口。</p><h2 id="九、本地端口转发" tabindex="-1"><a class="header-anchor" href="#九、本地端口转发"><span>九、本地端口转发</span></a></h2><p>有时，绑定本地端口还不够，还必须指定数据传送的目标主机，从而形成点对点的&quot;端口转发&quot;。为了区别后文的&quot;远程端口转发&quot;，我们把这种情况称为&quot;本地端口转发&quot;（Local forwarding）。 假定host1是本地主机，host2是远程主机。由于种种原因，这两台主机之间无法连通。但是，另外还有一台host3，可以同时连通前面两台主机。因此，很自然的想法就是，通过host3，将host1连上host2。 我们在host1执行下面的命令： <code>　　$ ssh -L 2121:host2:21 host3</code> 命令中的L参数一共接受三个值，分别是&quot;本地端口:目标主机:目标主机端口&quot;，它们之间用冒号分隔。这条命令的意思，就是指定SSH绑定本地端口2121，然后指定host3将所有的数据，转发到目标主机host2的21端口（假定host2运行FTP，默认端口为21）。 这样一来，我们只要连接host1的2121端口，就等于连上了host2的21端口。 <code>　　$ ftp localhost:2121</code> &quot;本地端口转发&quot;使得host1和host3之间仿佛形成一个数据传输的秘密隧道，因此又被称为&quot;SSH隧道&quot;。 下面是一个比较有趣的例子。 <code>　　$ ssh -L 5900:localhost:5900 host3</code> 它表示将本机的5900端口绑定host3的5900端口（这里的localhost指的是host3，因为目标主机是相对host3而言的）。 另一个例子是通过host3的端口转发，ssh登录host2。 <code>　　$ ssh -L 9001:host2:22 host3</code> 这时，只要ssh登录本机的9001端口，就相当于登录host2了。 <code>　　$ ssh -p 9001 localhost</code> 上面的-p参数表示指定登录端口。</p><h2 id="十、远程端口转发" tabindex="-1"><a class="header-anchor" href="#十、远程端口转发"><span>十、远程端口转发</span></a></h2><p>既然&quot;本地端口转发&quot;是指绑定本地端口的转发，那么&quot;远程端口转发&quot;（remote forwarding）当然是指绑定远程端口的转发。 还是接着看上面那个例子，host1与host2之间无法连通，必须借助host3转发。但是，特殊情况出现了，host3是一台内网机器，它可以连接外网的host1，但是反过来就不行，外网的host1连不上内网的host3。这时，&quot;本地端口转发&quot;就不能用了，怎么办？ 解决办法是，既然host3可以连host1，那么就从host3上建立与host1的SSH连接，然后在host1上使用这条连接就可以了。 我们在host3执行下面的命令： <code>　　$ ssh -R 2121:host2:21 host1</code> R参数也是接受三个值，分别是&quot;远程主机端口:目标主机:目标主机端口&quot;。这条命令的意思，就是让host1监听它自己的2121端口，然后将所有数据经由host3，转发到host2的21端口。由于对于host3来说，host1是远程主机，所以这种情况就被称为&quot;远程端口绑定&quot;。 绑定之后，我们在host1就可以连接host2了： <code>　　$ ftp localhost:2121</code> 这里必须指出，&quot;远程端口转发&quot;的前提条件是，host1和host3两台主机都有sshD和ssh客户端。</p><h2 id="十一、ssh的其他参数" tabindex="-1"><a class="header-anchor" href="#十一、ssh的其他参数"><span>十一、SSH的其他参数</span></a></h2><p>SSH还有一些别的参数，也值得介绍。 N参数，表示只连接远程主机，不打开远程shell；T参数，表示不为这个连接分配TTY。这个两个参数可以放在一起用，代表这个SSH连接只用来传数据，不执行远程操作。 <code>　　$ ssh -NT -D 8080 host</code> f参数，表示SSH连接成功后，转入后台运行。这样一来，你就可以在不中断SSH连接的情况下，在本地shell中执行其他操作。 <code>　　$ ssh -f -D 8080 host</code> 要关闭这个后台连接，就只有用kill命令去杀掉进程。</p>`,36)])])}const d=e(h,[["render",o]]),p=JSON.parse('{"path":"/pages/c297a7/","title":"Linux基础系列 - SSH 原理与运用","lang":"zh-CN","frontmatter":{"title":"Linux基础系列 - SSH 原理与运用","tags":["Linux","运维知识库"],"permalink":"/pages/c297a7/","createTime":"2023/09/08 17:36:02","description":"一直对ssh的概念比较模糊，看到阮一峰大神的博客有说明，果断转来记录备查。 原文：阮一峰的网络日志 SSH是每一台Linux电脑的标准配置。 随着Linux设备从电脑逐渐扩展到手机、外设和家用电器，SSH的使用范围也越来越广。不仅程序员离不开它，很多普通用户也每天使用。 SSH具备多种功能，可以用于很多场合。有些事情，没有它就是办不成。本文是我的学习笔...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux基础系列 - SSH 原理与运用\\",\\"image\\":[\\"https://ws1.sinaimg.cn/large/8697aaedly1fv4ao3iar1j20ib0br3zi.jpg\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/c297a7/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"Linux基础系列 - SSH 原理与运用"}],["meta",{"property":"og:description","content":"一直对ssh的概念比较模糊，看到阮一峰大神的博客有说明，果断转来记录备查。 原文：阮一峰的网络日志 SSH是每一台Linux电脑的标准配置。 随着Linux设备从电脑逐渐扩展到手机、外设和家用电器，SSH的使用范围也越来越广。不仅程序员离不开它，很多普通用户也每天使用。 SSH具备多种功能，可以用于很多场合。有些事情，没有它就是办不成。本文是我的学习笔..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://ws1.sinaimg.cn/large/8697aaedly1fv4ao3iar1j20ib0br3zi.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"运维知识库"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":11.36,"words":3407},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"05.运维/01.linux/14.Linux-ssh-how-to-use.md","headers":[],"categoryList":[{"id":"8091bd","sort":5,"name":"运维"},{"id":"44c911","sort":1,"name":"linux"}]}');export{d as comp,p as data};
