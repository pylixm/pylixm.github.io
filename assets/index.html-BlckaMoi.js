import{_ as i,c as e,a,o as t}from"./app-DdES4ywf.js";const n={};function h(l,s){return t(),e("div",null,[...s[0]||(s[0]=[a(`<p>使用Python开发时，大都是安装一个自己的Python, 很少使用系统自带的。一是版本老旧，另一个是怕安装开发包时和系统依赖包冲突，对系统造成不必要的破坏。Python 官方提供了Linux、mac和Windows 下Python的安装包，高版本的python安装包，在安装时是允许多版本存在的，对已有python并不会造成破坏。但早期的一些旧版本安装包，还是会覆盖已有的版本，对多版本共存支持的不是很好。</p><p>Windows 系统下还好，我们可以选择安装目录。安装错误时，可以方便的卸载。但是针对于Mac 来说，大多数人并不知道安装路径，所以不是很友好。下边是Mac 安装包卸载的方法，适用大多数的Python版本安装包，目前最新为<code>Python3.8.3</code>。</p><h2 id="mac-下-pkg-安装python-卸载" tabindex="-1"><a class="header-anchor" href="#mac-下-pkg-安装python-卸载"><span>Mac 下 pkg 安装Python 卸载</span></a></h2><p>以<code>Python3.8</code> 卸载为例，其他版本大致相同。</p><p><strong>一/ 删除Python文件：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rf</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /Library/Frameworks/Python.framework/Versions/3.8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>二/ 删除Python应用程序</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rf</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/Applications/Python 3.8</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>三/ 还原<code>/usr/local/bin</code>目录下的Python连接恢复：</strong></p><p>若该目录下有其他版本Python软连，python或python3 修改会之前版本。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span># python3 修改为其他版本</span></span>
<span class="line"><span>ln -s ../Cellar/python/3.6.5/bin/python3 python3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>删除Python3.8相关的其他模块软连。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rf</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pip3.8</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rf</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> easy_install-3.8</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rf</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 2to3-3.8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他版本卸载时，确保<code>/usr/bin/python</code>还是系统自带的python（一般不会改），如果被动了，则需要将</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/System/Library/Frameworks/Python.framework/Versions/Current/bin/python</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>做一个软链接至<code>/usr/bin/python</code>。</p><p><strong>四/ 删除安装包所定义的环境变量(若有)</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">vim</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ~/.bash_profile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>删除</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PATH</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/usr/local/opt/python@3.8/bin:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">PATH</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">export</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> PATH</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Mac 下推荐使用 brew 来安装Python，亦或是使用<code>pyenv</code>之类来管理。brew 安装不同版本的python 可使用 @ + 版本号来安装，如<code>brew install python@3.8</code>，pyenv的使用可参阅我另一篇文章<a href="https://pylixm.cc/posts/2016-06-19-Virtualenv-install.html" target="_blank" rel="noopener noreferrer">使用 pyenv + virtualenv 打造多版本python开发环境</a>。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://blog.bbzhh.com/index.php/archives/97.html" target="_blank" rel="noopener noreferrer">https://blog.bbzhh.com/index.php/archives/97.html</a></li></ul>`,23)])])}const p=i(n,[["render",h]]),d=JSON.parse('{"path":"/pages/12639b/","title":"「Python Tips」 - 卸载通过pkg安装的python","lang":"zh-CN","frontmatter":{"title":"「Python Tips」 - 卸载通过pkg安装的python","tags":["Python","uninstall","mac"],"permalink":"/pages/12639b/","createTime":"2023/09/08 17:36:02","description":"使用Python开发时，大都是安装一个自己的Python, 很少使用系统自带的。一是版本老旧，另一个是怕安装开发包时和系统依赖包冲突，对系统造成不必要的破坏。Python 官方提供了Linux、mac和Windows 下Python的安装包，高版本的python安装包，在安装时是允许多版本存在的，对已有python并不会造成破坏。但早期的一些旧版本安装...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"「Python Tips」 - 卸载通过pkg安装的python\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/12639b/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"「Python Tips」 - 卸载通过pkg安装的python"}],["meta",{"property":"og:description","content":"使用Python开发时，大都是安装一个自己的Python, 很少使用系统自带的。一是版本老旧，另一个是怕安装开发包时和系统依赖包冲突，对系统造成不必要的破坏。Python 官方提供了Linux、mac和Windows 下Python的安装包，高版本的python安装包，在安装时是允许多版本存在的，对已有python并不会造成破坏。但早期的一些旧版本安装..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"mac"}],["meta",{"property":"article:tag","content":"uninstall"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":1.76,"words":529},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"01.开发语言/01.Python/01.语言特性/09.Python-basis-uninstall-for-mac.md","headers":[],"categoryList":[{"id":"59843f","sort":1,"name":"开发语言"},{"id":"9d2a49","sort":1,"name":"Python"},{"id":"406962","sort":1,"name":"语言特性"}]}');export{p as comp,d as data};
