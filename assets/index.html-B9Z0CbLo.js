import{_ as s,c as a,a as n,o as l}from"./app-DdES4ywf.js";const t={};function e(h,i){return l(),a("div",null,[...i[0]||(i[0]=[n(`<p>安装好 golang 后，在任意目录运行 <code>go</code> 可看到 Golang 的所有命令，如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	build</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">       compile</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> packages</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> and</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dependencies</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	clean</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">       remove</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> object</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> files</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	doc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">         show</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> documentation</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> for</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> package</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> or</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> symbol</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	env</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">         print</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> environment</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> information</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	bug</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">         start</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bug</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> report</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	fix</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">         run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tool</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fix</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> on</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> packages</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	fmt</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">         run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gofmt</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> on</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> package</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sources</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	generate</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    generate</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> files</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> by</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> processing</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> source</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">         download</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> and</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> packages</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> and</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dependencies</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">     compile</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> and</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> packages</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> and</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dependencies</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	list</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        list</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> packages</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">         compile</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> and</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> program</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">	test</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        test</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> packages</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	tool</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> specified</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tool</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	version</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">     print</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> version</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	vet</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">         run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tool</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> vet</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> on</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> packages</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里根据郝林老师的课程，做部分命令的总结，记录备查。</p><h2 id="常用-golang-命令总结" tabindex="-1"><a class="header-anchor" href="#常用-golang-命令总结"><span>常用 Golang 命令总结</span></a></h2><h3 id="go-run" tabindex="-1"><a class="header-anchor" href="#go-run"><span>go run</span></a></h3><p>用于运行命令源文件，只接受一个命令源文件以及若干个库文件作为参数。内部操作步骤为，先编译，将编译结果放到临时文件（可执行文件和归档文件），再运行。</p><p><strong>运行常用标记：</strong></p><ul><li><code>-a</code> 强制编译相关代码，不论他们的编译结果是否已经是最新的。</li><li><code>-n</code> 打印编译过程中所需要运行的命令，但不真正执行他们。</li><li><code>-x</code> 打印编译过程中运行的命令，并执行他们。</li><li><code>-p n</code> 并行执行，n 为并行的数量。</li><li><code>-v</code> 列出被编译的代码包的名称。</li><li><code>-work</code> 显示编译时创建的临时工作目录的路径，并且不删除它。</li></ul><h3 id="go-build" tabindex="-1"><a class="header-anchor" href="#go-build"><span>go build</span></a></h3><p>用于编译我们指定的源码文件或代码包以及它们的依赖包。编译非命令源码文件是不会产生任何结果文件的。编译命令源码文件会在该命令的执行目录中生成一个可执行文件。</p><ul><li>执行该命令且不追加任何参数，默认会把当前目录作为代码包编译</li><li>执行命令且以代码包导入路径为参数时，该代码包及其依赖代码包会被编译。当加入 -a 时，所有涉及到的代码包会被编译。</li><li>可加若干源码文件作为参数，go 只会编译被列出的源码文件</li></ul><p><strong>运行常用标记：同 go run</strong></p><h3 id="go-install" tabindex="-1"><a class="header-anchor" href="#go-install"><span>go install</span></a></h3><p>用于编译并安装代码包或源码文件。安装代码包会在当前工作区的 pkg/&lt;平台相关目录&gt; 下生成归档文件。安装命令源码文件会在当前工作区的 bin 目录 或 $GOBIN 目录下生成可执行文件。</p><ul><li>不加参数时，它试图把当前目录作为代码包安装</li><li>加代码包导入路径作为参数，会安装该代码包及依赖包</li></ul><h3 id="go-get" tabindex="-1"><a class="header-anchor" href="#go-get"><span>go get</span></a></h3><p>用于从远程代码仓库上下载并按照代码包。支持版本控制系统， git/hg/svn/Bazaar等。指定的代码包会被下载到 $GOPATH 中包含的第一个工作区的 src 目录中。</p><p><strong>运行常用标记：</strong></p><ul><li><code>-d</code> 只下载，不安装。</li><li><code>-fix</code> 在下载代码包后，执行修正动作(go不同版本，语法的修正)</li><li><code>-u</code> 更新下已有的代码包及其依赖包。</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://github.com/hyper0x/go_command_tutorial/blob/master/SUMMARY.md" target="_blank" rel="noopener noreferrer">Golang 命令教程</a></li></ul>`,21)])])}const k=s(t,[["render",e]]),r=JSON.parse('{"path":"/pages/c57495/","title":"「Go语言学习笔记四」- Golang 命令","lang":"zh-CN","frontmatter":{"title":"「Go语言学习笔记四」- Golang 命令","tags":["Golang","语言学习"],"permalink":"/pages/c57495/","createTime":"2023/09/08 17:36:02","description":"安装好 golang 后，在任意目录运行 go 可看到 Golang 的所有命令，如下： 这里根据郝林老师的课程，做部分命令的总结，记录备查。 常用 Golang 命令总结 go run 用于运行命令源文件，只接受一个命令源文件以及若干个库文件作为参数。内部操作步骤为，先编译，将编译结果放到临时文件（可执行文件和归档文件），再运行。 运行常用标记： -...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"「Go语言学习笔记四」- Golang 命令\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/c57495/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"「Go语言学习笔记四」- Golang 命令"}],["meta",{"property":"og:description","content":"安装好 golang 后，在任意目录运行 go 可看到 Golang 的所有命令，如下： 这里根据郝林老师的课程，做部分命令的总结，记录备查。 常用 Golang 命令总结 go run 用于运行命令源文件，只接受一个命令源文件以及若干个库文件作为参数。内部操作步骤为，先编译，将编译结果放到临时文件（可执行文件和归档文件），再运行。 运行常用标记： -..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"语言学习"}],["meta",{"property":"article:tag","content":"Golang"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":2.61,"words":783},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"01.开发语言/02.Golang/01.golang学习笔记/05.Go-commond.md","headers":[],"categoryList":[{"id":"59843f","sort":1,"name":"开发语言"},{"id":"764e2e","sort":2,"name":"Golang"},{"id":"41b8c9","sort":1,"name":"golang学习笔记"}]}');export{k as comp,r as data};
