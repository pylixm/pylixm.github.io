import{_ as o,c as t,a as p,o as d}from"./app-DdES4ywf.js";const c={};function a(r,e){return d(),t("div",null,[...e[0]||(e[0]=[p('<h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><h4 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h4><p>双括号</p><h4 id="判断" tabindex="-1"><a class="header-anchor" href="#判断"><span>判断</span></a></h4><p>使用大括号+% if xx xx<br> else xx endif</p><p>ifequal athlete.name coach.name xx else xx endifequal</p><p>for athlete in athlete_list xx endfor</p><p>for key, value in data.items endfor</p><h4 id="循环中使用的变量" tabindex="-1"><a class="header-anchor" href="#循环中使用的变量"><span>循环中使用的变量</span></a></h4><p><code>forloop.counter</code> 总是一个表示当前循环的执行次数的整数计数器。 这个计数器是从1开始的，所以在第一次循环时 forloop.counter 将会被设置为1。</p><p><code>forloop.counter0</code> 类似于 forloop.counter ，但是它是从0计数的。 第一次执行循环时这个变量会被设置为0。</p><p><code>forloop.revcounter</code> 是表示循环中剩余项的整型变量。 在循环初次执行时 forloop.revcounter 将被设置为序列中项的总数。 最后一次循环执行中，这个变量将被置1。</p><p><code>forloop.revcounter0</code> 类似于 forloop.revcounter ，但它以0做为结束索引。在第一次执行循环时，该变量会被置为序列的项的个数减1。</p><p><code>forloop.first</code> 是一个布尔值。 在第一次执行循环时该变量为True。</p><p><code>forloop.last</code> 是一个布尔值；在最后一次执行循环时被置为True。一个常见的用法是在一系列的链接之间放置管道符（|） 另一个常见的用途是为列表的每个单词的加上逗号。</p><p><code>forloop.parentloop</code> 是一个指向当前循环的上一级循环的 forloop 对象的引用（在嵌套循环的情况下）。</p><h4 id="模板过滤器" tabindex="-1"><a class="header-anchor" href="#模板过滤器"><span>模板过滤器</span></a></h4><p><strong>数字过滤器</strong></p><p><code>apnumber</code> 对于 1 到 9 的数字，该过滤器返回了数字的拼写形式。 否则，它将返回数字。 这遵循的是美联社风格。</p><p><code>intcomma</code> 该过滤器将整数转换为每三个数字用一个逗号分隔的字符串。</p><p><code>intword</code> 该过滤器将一个很大的整数转换成友好的文本表示方式。 它对于超过一百万的数字最好用。 最大支持不超过一千的五次方（1,000,000,000,000,000）。</p><p><code>ordinal</code> 该过滤器将整数转换为序数词的字符串形式。</p><p><strong>时间过滤器</strong></p><p><code>date</code> date:&quot;Y-m-d H:i:s&quot;</p><p><strong>其他</strong></p><p><code>lower</code> 小写</p><p><code>my_text|escape|linebreaks </code> 串联：先转义文本到HTML，再转换每行到 <code>&lt;p&gt; </code>标签</p><p><code>bio | truncatewords:&quot;30&quot; </code> 显示前30个字</p><p><code>123|add:&quot;5&quot; </code> 给value加上一个数值</p><p><code>&quot;AB&#39;CD&quot;|addslashes </code>单引号加上转义号，一般用于输出到javascript中</p><p><code>&quot;abcd&quot;|capfirst </code> 第一个字母大写</p><p><code>&quot;abcd&quot;|center:&quot;50&quot; </code> 输出指定长度的字符串，并把值对中</p><p><code>&quot;123spam456spam789&quot;|cut:&quot;spam&quot; </code> 查找删除指定字符串</p><p><code>value|date:&quot;F j, Y&quot; </code> 格式化日期</p><p><code>value|default:&quot;(N/A)&quot; </code> 值不存在，使用指定值</p><p><code>value|default_if_none:&quot;(N/A)&quot; </code> 值是None，使用指定值</p><p><code>列表变量|dictsort:&quot;数字&quot; </code> 排序从小到大</p><p><code>列表变量|dictsortreversed:&quot;数字&quot; </code> 排序从大到小</p><p><code>if 92|divisibleby:&quot;2&quot; </code> 判断是否整除指定数字</p><p><code> string|escape</code> 转换为html实体</p><p><code> 21984124|filesizeformat</code> 以1024为基数，计算最大值，保留1位小数，增加可读性</p><p><code> list|first</code> 返回列表第一个元素</p><p><code> &quot;ik23hr&amp;jqwh&quot;|fix_ampersands</code> &amp;转为&amp;</p><p><code>13.414121241|floatformat</code> 保留1位小数，可为负数，几种形式</p><p><code>13.414121241|floatformat:&quot;2&quot;</code> 保留2位小数</p><p><code>23456 |get_digit:&quot;1&quot;</code> 从个位数开始截取指定位置的1个数字</p><p>``list|join:&quot;, &quot; ` 用指定分隔符连接列表</p><p><code>list|length </code> 返回列表个数</p><p><code>if 列表|length_is:&quot;3&quot; </code> 列表个数是否指定数值</p><p><code>&quot;ABCD&quot;|linebreaks </code> 用新行用<code>&lt;p&gt; 、 &lt;br /&gt; </code>标记包裹</p><p><code>&quot;ABCD&quot;|linebreaksbr </code> 用新行用<code>&lt;br /&gt;</code> 标记包裹</p><p><code>变量|linenumbers </code> 为变量中每一行加上行号</p><p><code>&quot;abcd&quot;|ljust:&quot;50&quot; </code> 把字符串在指定宽度中对左，其它用空格填充</p><p><code>for i in &quot;1abc1&quot;|make_list</code> 把字符串或数字的字符个数作为一个列表</p><p><code>&quot;abcdefghijklmnopqrstuvwxyz&quot;|phone2numeric </code> 把字符转为可以对应的数字？？</p><p><code>列表或数字|pluralize </code>单词的复数形式，如列表字符串个数大于1，返回s，否则返回空串</p><p><code>列表或数字|pluralize:&quot;es&quot;</code> 指定es</p><p><code>列表或数字|pluralize:&quot;y,ies&quot; </code> 指定ies替换为y</p><p><code>object|pprint </code> 显示一个对象的值</p><p><code>列表|random </code> 返回列表的随机一项</p><p><code>string|removetags:&quot;br p div&quot; </code> 删除字符串中指定html标记</p><p><code>string|rjust:&quot;50&quot; </code> 把字符串在指定宽度中对右，其它用空格填充</p><p>`` 列表|slice:&quot;:2&quot; ` 切片</p><p><code>string|slugify</code> 字符串中留下减号和下划线，其它符号删除，空格用减号替换</p><p><code>3|stringformat:&quot;02i&quot;</code>字符串格式，使用Python的字符串格式语法</p><p><code>&quot;E&lt;A&gt;A&lt;/A&gt;B&lt;C&gt;C&lt;/C&gt;D&quot;|striptags</code> 剥去[X]HTML语法标记</p><p><code>时间变量|time:&quot;P&quot;</code> 日期的时间部分格式</p><p><code>datetime|timesince</code> 给定日期到现在过去了多少时间</p><p><code>datetime|timesince:&quot;other_datetime&quot;</code> 两日期间过去了多少时间</p><p><code>datetime|timeuntil</code> 给定日期到现在过去了多少时间，与上面的区别在于2日期的前后位置。</p><p><code>datetime|timeuntil:&quot;other_datetime&quot;</code> 两日期间过去了多少时间</p><p><code>&quot;abdsadf&quot;|title</code> 首字母大写</p><p><code>&quot;A B C D E F&quot;|truncatewords:&quot;3&quot;</code> 截取指定个数的单词</p><p><code>&quot;&lt;a&gt;1&lt;a&gt;1&lt;a&gt;1&lt;/a&gt;&lt;/a&gt;&lt;/a&gt;22&lt;a&gt;1&lt;/a&gt;&quot;|truncatewords_html:&quot;2&quot;</code> 截取指定个数的html标记，并补完整</p><p><code>list|unordered_list </code> 多重嵌套列表展现为html的无序列表</p><p><code>string|upper</code> 全部大写</p><p><code>link|urlencode</code> url编码</p><p><code>string|urlize</code> 将URLs由纯文本变为可点击的链接。（没有实验成功）</p><p><code> string|urlizetrunc:&quot;30&quot;</code> 同上，多个截取字符数。（同样没有实验成功）</p><p><code>&quot;B C D E F&quot;|wordcount</code> 单词数</p><p><code>&quot;a b c d e f g h i j k&quot;|wordwrap:&quot;5&quot;</code>每指定数量的字符就插入回车符</p><p><code>boolean|yesno:&quot;Yes,No,Perhaps&quot;</code> 对三种值的返回字符串，对应是 非空,空,None</p>',82)])])}const i=o(c,[["render",a]]),u=JSON.parse('{"path":"/pages/f48e3c/","title":"Django学习笔记-模板","lang":"zh-CN","frontmatter":{"title":"Django学习笔记-模板","tags":["Django","Django-template"],"permalink":"/pages/f48e3c/","createTime":"2023/09/08 17:36:02","description":"语法 变量 双括号 判断 使用大括号+% if xx xx else xx endif ifequal athlete.name coach.name xx else xx endifequal for athlete in athlete_list xx endfor for key, value in data.items endfor 循环中使用...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Django学习笔记-模板\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/f48e3c/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"Django学习笔记-模板"}],["meta",{"property":"og:description","content":"语法 变量 双括号 判断 使用大括号+% if xx xx else xx endif ifequal athlete.name coach.name xx else xx endifequal for athlete in athlete_list xx endfor for key, value in data.items endfor 循环中使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"Django-template"}],["meta",{"property":"article:tag","content":"Django"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":4.64,"words":1392},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"01.开发语言/01.Python/02.Django/14.Django-Template.md","headers":[],"categoryList":[{"id":"59843f","sort":1,"name":"开发语言"},{"id":"9d2a49","sort":1,"name":"Python"},{"id":"f8691d","sort":2,"name":"Django"}]}');export{i as comp,u as data};
