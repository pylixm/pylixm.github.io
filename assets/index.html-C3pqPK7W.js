import{_ as t,a as r,b as a}from"./vm-cluster-arch-DhR9zi_t.js";import{_ as o,c as i,a as s,o as p}from"./app-DdES4ywf.js";const l={};function n(c,e){return p(),i("div",null,[...e[0]||(e[0]=[s('<h2 id="方案调研" tabindex="-1"><a class="header-anchor" href="#方案调研"><span>方案调研</span></a></h2><p>目前容器化监控的几种方案：</p><ul><li><a href="https://github.com/kubernetes-retired/heapster" target="_blank" rel="noopener noreferrer">Heapster</a> + ElasticSearch + Kibana</li><li><a href="https://github.com/kubernetes-retired/heapster" target="_blank" rel="noopener noreferrer">Heapster</a> + influxdb + grafana</li></ul><p>Heapster 通过 cAdvisor 组件收集 Node 和 容器的监控数据；</p><p>kubernetes 1.13 彻底移除对 Heapster 的使用，Heapster 仓库也归档，不再更新维护。</p><ul><li>基于 Prometheus 生态的监控方案;</li></ul><p>Prometheus 在2016加入 CNCF ( Cloud Native Computing Foundation )。目前，业界容器化监控 Prometheus 已成为标准、首选。</p><p>基于 Prometheus，主要有以下两套方案：</p><ul><li>在集群中手动部署 Prometheus 的各种组件 ; <ul><li>采集项： <ul><li>node-exporter 采集node监控</li><li>cAdvisor 容器级别的监控指标</li><li>kube-state-metrics 采集pod相关监控指标</li></ul></li><li>存储： <ul><li>临时 prometheus</li><li>持久化 influxdb /VictorMetric</li></ul></li><li>报警： <ul><li>alermanager</li><li>n9e</li></ul></li></ul></li></ul><p>手动部署可参考文档：https://docs.prometheus.cool/Kubernetes/Prometheus-Statefulsets-1/</p><ul><li><a href="https://github.com/prometheus-operator/kube-prometheus" target="_blank" rel="noopener noreferrer">kube-prometheus</a>，基于CoreOS 之前发布的 Prometheus Operator 来实现部署维护；</li></ul><p>该存储库收集了 Kubernetes 清单、Grafana仪表板和Prometheus 规则以及文档和脚本，以使用 Prometheus Operator提供易于操作的端到端 Kubernetes 集群监控与Prometheus。</p><p>部署可参考文档：http://gitlab.bokecc.com/opgroup/dev/cc_dev_docs/blob/master/dev/container/k8s_operator.md</p><p>k8s 官方 Operator 文档：https://kubernetes.io/zh/docs/concepts/extend-kubernetes/operator/</p><p>Operator Hub 文档：https://operatorhub.io/</p><p>Prometheus Operator 文档：https://prometheus-operator.dev/</p><blockquote><p><strong>Operator好处</strong> 因为是prometheus主动去拉取的，所以在k8s里pod因为调度的原因导致pod的ip会发生变化，人工不可能去维持，自动发现有基于DNS的，但是新增还是有点麻烦。</p></blockquote><blockquote><p>Prometheus-operator的本职就是一组用户自定义的CRD资源以及Controller的实现，Prometheus Operator这个controller有BRAC权限下去负责监听这些自定义资源的变化，并且根据这些资源的定义自动化的完成如Prometheus Server自身以及配置的自动化管理工作。</p></blockquote><blockquote><p>在Kubernetes中我们使用Deployment、DamenSet、StatefulSet来管理应用Workload，使用Service、Ingress来管理应用的访问方式，使用ConfigMap和Secret来管理应用配置。我们在集群中对这些资源的创建，更新，删除的动作都会被转换为事件(Event)，Kubernetes的Controller Manager负责监听这些事件并触发相应的任务来满足用户的期望。这种方式我们成为声明式，用户只需要关心应用程序的最终状态，其它的都通过Kubernetes来帮助我们完成，通过这种方式可以大大简化应用的配置管理复杂度。</p></blockquote><blockquote><p>而除了这些原生的Resource资源以外，Kubernetes还允许用户添加自己的自定义资源(Custom Resource)。并且通过实现自定义Controller来实现对Kubernetes的扩展，不需要用户去二开k8s也能达到给k8s添加功能和对象。</p></blockquote><blockquote><p>因为svc的负载均衡，所以在K8S里监控metrics基本最小单位都是一个svc背后的pod为target，所以prometheus-operator创建了对应的CRD: kind: ServiceMonitor ，创建的ServiceMonitor里声明需要监控选中的svc的label以及metrics的url路径的和namespaces即可</p></blockquote><h2 id="prometheus-方案详解" tabindex="-1"><a class="header-anchor" href="#prometheus-方案详解"><span>Prometheus 方案详解</span></a></h2><h3 id="数据采集" tabindex="-1"><a class="header-anchor" href="#数据采集"><span>数据采集</span></a></h3><p>日常监控：</p><ul><li>基础设置，cpu/mem/disk/net</li><li>业务信息，port/process/trace/link</li><li>自定义，特有指标</li></ul><p>容器需要采集或监控的数据指标：</p><ul><li>基础设施，服务器节点（node节点）</li><li>k8s 基础组件健康情况</li><li>k8s 整体资源的饱和度</li><li>自定义</li></ul><p>采集方案如下：</p><ul><li>基础设置 <ul><li>node 主机信息 ---&gt; node-exporter</li><li>各组件监控及资源使用情况、容器性能（如容器的CPU、内存、文件和网络的使用情况），cAdvisor ---&gt; state-metrics</li></ul></li><li>业务信息： <ul><li>容器健康状态，Probes ---&gt; state-metrics</li><li>健康探测（link/trace）---&gt; 外部探测（自建、阿里云）</li></ul></li><li>自定义，---&gt; 自己暴露 metrics 接口</li></ul><h3 id="数据存储" tabindex="-1"><a class="header-anchor" href="#数据存储"><span>数据存储</span></a></h3><p>Prometheus 作为收据收集和临时存储使用，因为单点不具备扩容能力，不适合做持久化存储。</p><p>持久化存储，目前业界有两种比较成熟的开源方案：</p><ul><li><p><a href="https://thanos.io/v0.24/thanos/getting-started.md/" target="_blank" rel="noopener noreferrer">Thanos</a><img src="'+t+'" alt=""></p></li><li><p><a href="https://cortexmetrics.io/" target="_blank" rel="noopener noreferrer">Cortex</a><img src="'+r+'" alt=""></p></li><li><p><a href="https://docs.victoriametrics.com/" target="_blank" rel="noopener noreferrer">VictoriaMetric</a> （只支持写，不支持读<a href="https://prometheus.io/docs/operating/integrations/#remote-endpoints-and-storage" target="_blank" rel="noopener noreferrer">1</a>）</p></li></ul><p><img src="'+a+'" alt=""></p><p>Thanos vs VictoriaMetric 两种方案对比，可参考文档： https://blog.csdn.net/alex_yangchuansheng/article/details/108271368</p><p>https://github.com/VictoriaMetrics/VictoriaMetrics/wiki/FAQ#what-is-the-difference-between-victoriametrics-and-thanos</p><p>Cortex vs VictoriaMetric: https://github.com/VictoriaMetrics/VictoriaMetrics/wiki/FAQ#what-is-the-difference-between-victoriametrics-and-cortex</p><p>总结如下：</p><ul><li><p>架构上：vm 组件少，架构简单，不依赖第三方组件。Thanos 最少可部署三个基础组件Sidecar、Store[6] Gateway、Query，需要外部对象存储。Cortex 基础组件：Nginx/gateway、Distributor、Ingester、Query，依赖第三方组件如Consul、Memcache等。</p></li><li><p>数据高可用上：vm 通过 Prometheus RemoteApi 实时推送数据，只可能会丢失几秒钟的数据，Prometheus v2.8.0+ 会从WAL中同步数据，理论上不会丢失数据。 <a href="https://docs.victoriametrics.com/Cluster-VictoriaMetrics.html#replication-and-data-safety" target="_blank" rel="noopener noreferrer">vm</a> 和 <a href="https://github.com/cortexproject/cortex/blob/fe56f1420099aa1bf1ce09316c186e05bddee879/docs/architecture.md#hashing" target="_blank" rel="noopener noreferrer">cortex</a> 都支持副本，保证集群节点有问题时，数据的可用性。Thanos 数据存储在对象存储，依赖对象存储的高可用性。</p></li><li><p>功能兼容性丰富度：都兼容Prometheus PromQL / 多租户等。除了 Prometheus remote_write 协议之外，还接受多种流行数据摄取协议中的数据 - InfluxDB、OpenTSDB、Graphite、CSV、JSON、本机二进制文件。</p></li><li><p>性能：vm 查询走本地磁盘相对高效，vmselect 聚合多节点副本，实现去重。Cortex 经过其他大厂生产验证， VM 查询性能 &gt; Cortex 参考<a href="https://docs.victoriametrics.com/CaseStudies.html" target="_blank" rel="noopener noreferrer">这里</a>。Thanos 查询短时间的数据时，性能高，因为数据在Prometheus实例上，查询长时间的数据时，因为数据块在对象存储，受网络环境影响比较大。</p></li></ul><h3 id="报警" tabindex="-1"><a class="header-anchor" href="#报警"><span>报警</span></a></h3><ul><li><p>alertmanager</p></li><li><p>n9e</p></li></ul><h3 id="与现有监控结合" tabindex="-1"><a class="header-anchor" href="#与现有监控结合"><span>与现有监控结合</span></a></h3><ul><li><p>n9e</p></li><li><p>grafana</p><ul><li>admin账号密码配置: https://www.ancii.com/at6lje4j8/</li><li>直接 修改 helm 配置values 文件</li></ul></li></ul><h3 id="部署高可用" tabindex="-1"><a class="header-anchor" href="#部署高可用"><span>部署高可用</span></a></h3><p>多 Prometheus 副本，接后端 VictoriaMetric 聚合去重查询。</p><h2 id="扩展阅读" tabindex="-1"><a class="header-anchor" href="#扩展阅读"><span>扩展阅读</span></a></h2><ul><li><p>https://prometheus-operator.dev/docs/prologue/introduction/</p></li><li><p>https://rancher.com/docs/rancher/v2.6/en/monitoring-alerting/</p></li><li><p>https://www.kubernetes.org.cn/2432.html</p></li><li><p>https://docs.prometheus.cool/</p></li><li><p>https://blog.csdn.net/weixin_33720452/article/details/91875529</p></li><li><p>thanos: http://www.xuyasong.com/?p=1925</p></li><li><p>victoria:</p><ul><li>https://blog.csdn.net/weixin_26711867/article/details/108971299</li><li>https://medium.com/miro-engineering/prometheus-high-availability-and-fault-tolerance-strategy-long-term-storage-with-victoriametrics-82f6f3f0409e</li></ul></li><li><p>thanos vs victoria : https://blog.csdn.net/alex_yangchuansheng/article/details/108271368</p></li><li><p>victoriaMetric 存储机制：https://zhuanlan.zhihu.com/p/368912946</p></li></ul>',47)])])}const m=o(l,[["render",n]]),d=JSON.parse('{"path":"/pages/67ff8a/","title":"Kubernetes 学习笔记 - 监控系统","lang":"zh-CN","frontmatter":{"type":"draft","title":"Kubernetes 学习笔记 - 监控系统","toc":true,"tags":["Kubernetes","监控系统","rancher"],"draft":true,"permalink":"/pages/67ff8a/","createTime":"2023/09/08 17:36:02","description":"方案调研 目前容器化监控的几种方案： Heapster + ElasticSearch + Kibana Heapster + influxdb + grafana Heapster 通过 cAdvisor 组件收集 Node 和 容器的监控数据； kubernetes 1.13 彻底移除对 Heapster 的使用，Heapster 仓库也归档，不再...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kubernetes 学习笔记 - 监控系统\\",\\"image\\":[\\"https://pylixm.top/imgs/k8s/thanos-arch.png\\",\\"https://pylixm.top/imgs/k8s/cortex-arch.png\\",\\"https://pylixm.top/imgs/k8s/vm-cluster-arch.png\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/67ff8a/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"Kubernetes 学习笔记 - 监控系统"}],["meta",{"property":"og:description","content":"方案调研 目前容器化监控的几种方案： Heapster + ElasticSearch + Kibana Heapster + influxdb + grafana Heapster 通过 cAdvisor 组件收集 Node 和 容器的监控数据； kubernetes 1.13 彻底移除对 Heapster 的使用，Heapster 仓库也归档，不再..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pylixm.top/imgs/k8s/thanos-arch.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"rancher"}],["meta",{"property":"article:tag","content":"监控系统"}],["meta",{"property":"article:tag","content":"Kubernetes"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":5.03,"words":1508},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"04.云原生/03.k8s/05.k8s-monitor.md","headers":[],"categoryList":[{"id":"e467f5","sort":4,"name":"云原生"},{"id":"315d2b","sort":3,"name":"k8s"}]}');export{m as comp,d as data};
