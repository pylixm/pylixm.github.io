import{_ as t,a as r,b as a}from"./vm-cluster-arch-DhR9zi_t.js";import{_ as i,c as o,a as l,o as n}from"./app-DdES4ywf.js";const s={};function p(h,e){return n(),o("div",null,[...e[0]||(e[0]=[l('<h2 id="现阶段容器化方案" tabindex="-1"><a class="header-anchor" href="#现阶段容器化方案"><span>现阶段容器化方案</span></a></h2><p>容器化监控的曾经出现过的几种方案：</p><ul><li><a href="https://github.com/kubernetes-retired/heapster" title="Heapster" target="_blank" rel="noopener noreferrer">Heapster</a> + ElasticSearch + Kibana</li><li><a href="https://github.com/kubernetes-retired/heapster" title="Heapster" target="_blank" rel="noopener noreferrer">Heapster</a> + influxdb + grafana <ul><li>Heapster 通过 cAdvisor 组件收集 Node 和 容器的监控数据。kubernetes 1.13 彻底移除对 Heapster 的使用，Heapster 仓库也归档，不再更新维护。</li></ul></li><li>基于 Prometheus 生态的监控方案;</li></ul><p>Prometheus 在 2016 加入 CNCF ( Cloud Native Computing Foundation )。目前，业界容器化监控 Prometheus 已成为标准和首选。</p><p>基于 Prometheus，主要有以下两套部署方案：</p><ul><li>1、在集群中手动部署 Prometheus 的各种组件，需要部署的组件大致如下： <ul><li>采集组件： <ul><li>node-exporter 采集 node 监控</li><li>cAdvisor 容器级别的监控指标</li><li>kube-state-metrics 采集 pod 相关监控指标</li></ul></li><li>持久化存储组件： <ul><li>临时 prometheus</li><li>持久化 influxdb /VictorMetric</li></ul></li><li>报警组件： <ul><li>alermanager</li><li>n9e，<a href="https://n9e.github.io/" target="_blank" rel="noopener noreferrer">v5版本</a> 已全面改版支持 Promtheus和VictoriaMetric作为存储，完全可以单独作为报警组件使用。</li></ul></li></ul></li></ul><blockquote><p>手动部署可参考文档：https://docs.prometheus.cool/Kubernetes/Prometheus-Statefulsets-1/</p></blockquote><ul><li>2、使用<a href="https://github.com/prometheus-operator/kube-prometheus" title="kube-prometheus" target="_blank" rel="noopener noreferrer">kube-prometheus</a>，基于 CoreOS 组织之前发布的 Prometheus Operator 来实现部署维护；</li></ul><p>该存储库收集了 Kubernetes 清单、Grafana 仪表板和 Prometheus 规则以及文档和脚本，以使用 Prometheus Operator 提供易于操作的端到端 Kubernetes 集群监控与 Prometheus。</p><blockquote><ul><li>k8s 官方 Operator 文档：https://kubernetes.io/zh/docs/concepts/extend-kubernetes/operator/</li><li>Operator Hub 文档：https://operatorhub.io/</li><li>Prometheus Operator 文档：https://prometheus-operator.dev/</li></ul></blockquote><ul><li>3、使用 helm 安装 ，</li></ul><blockquote><p>https://prometheus-community.github.io/helm-charts https://www.infoq.cn/article/uj12knworcwg0kke8zfv</p></blockquote><h2 id="prometheus-方案详解" tabindex="-1"><a class="header-anchor" href="#prometheus-方案详解"><span>Prometheus 方案详解</span></a></h2><h3 id="数据采集项" tabindex="-1"><a class="header-anchor" href="#数据采集项"><span>数据采集项</span></a></h3><p>日常监控的采集项：</p><ul><li>基础设施，cpu/mem/disk/net</li><li>业务信息，port/process/trace/link</li><li>自定义，特有指标。</li></ul><p>容器需要采集或监控的数据指标：</p><ul><li>基础设施，服务器节点（node 节点）健康情况</li><li>k8s 基础组件健康情况</li><li>k8s 整体资源的饱和度</li><li>自定义。</li></ul><p>各指标对应采集方案和组件如下：</p><ul><li>基础设置 <ul><li>node 主机信息 ---&gt; node-exporter</li><li>各组件监控及资源使用情况、容器性能（如容器的 CPU、内存、文件和网络的使用情况），cAdvisor ---&gt; state-metrics</li></ul></li><li>业务信息： <ul><li>容器健康状态，Probes ---&gt; state-metrics</li><li>健康探测（link/trace）---&gt; 外部探测（自建、阿里云）</li></ul></li><li>自定义，---&gt; 自己暴露 metrics 接口</li></ul><h3 id="数据存储" tabindex="-1"><a class="header-anchor" href="#数据存储"><span>数据存储</span></a></h3><p>Prometheus 作为收集和临时存储使用，因为单点不具备扩容能力，不适合做持久化存储。</p><p>持久化存储，目前业界有三种种比较成熟的开源方案：</p><ul><li><a href="https://thanos.io/v0.24/thanos/getting-started.md/" title="Thanos" target="_blank" rel="noopener noreferrer">Thanos</a> 架构</li></ul><p><img src="'+t+'" alt="thanos-arch"></p><ul><li><a href="https://cortexmetrics.io/" title="Cortex" target="_blank" rel="noopener noreferrer">Cortex</a> 架构</li></ul><p><img src="'+r+'" alt="cortex-arch"></p><ul><li><a href="https://docs.victoriametrics.com/" title="VictoriaMetric" target="_blank" rel="noopener noreferrer">VictoriaMetric</a> （<a href="https://prometheus.io/docs/operating/integrations/#remote-endpoints-and-storage" target="_blank" rel="noopener noreferrer">只支持写，不支持读</a>） 架构</li></ul><p><img src="'+a+'" alt="vm-cluster-arch"></p><p>Thanos vs VictoriaMetric 两种方案对比，可参考文档：</p><ul><li><p>https://blog.csdn.net/alex_yangchuansheng/article/details/108271368</p></li><li><p>https://github.com/VictoriaMetrics/VictoriaMetrics/wiki/FAQ#what-is-the-difference-between-victoriametrics-and-thanos</p></li></ul><p>Cortex vs VictoriaMetric 对比:</p><ul><li>https://github.com/VictoriaMetrics/VictoriaMetrics/wiki/FAQ#what-is-the-difference-between-victoriametrics-and-cortex</li></ul><p>总结下三种方案对比大致如下：</p><ul><li><p>架构上：vm 组件少，架构简单，不依赖第三方组件。Thanos 最少可部署三个基础组件 Sidecar、Store Gateway、Query，需要外部对象存储。Cortex 基础组件：Nginx/gateway、Distributor、Ingester、Query，依赖第三方组件如 Consul、Memcache 等。</p></li><li><p>数据高可用上：vm 通过 Prometheus RemoteApi 实时推送数据，只可能会丢失几秒钟的数据，Prometheus v2.8.0+ 会从 WAL 中同步数据，理论上不会丢失数据。 <a href="https://docs.victoriametrics.com/Cluster-VictoriaMetrics.html#replication-and-data-safety" title="vm" target="_blank" rel="noopener noreferrer">vm</a> 和 <a href="https://github.com/cortexproject/cortex/blob/fe56f1420099aa1bf1ce09316c186e05bddee879/docs/architecture.md#hashing" title="cortex" target="_blank" rel="noopener noreferrer">cortex</a> 都支持副本，保证集群节点有问题时，数据的可用性。Thanos 数据存储在对象存储，依赖对象存储的高可用性。</p></li><li><p>功能兼容性丰富度：都兼容 Prometheus PromQL / 多租户等。除了 Prometheus remote_write 协议之外，还接受多种流行数据摄取协议中的数据 - InfluxDB、OpenTSDB、Graphite、CSV、JSON、本机二进制文件。</p></li><li><p>性能：vm 查询走本地磁盘相对高效，vmselect 聚合多节点副本，实现去重。Cortex 经过其他大厂生产验证性能略逊于 vm， 参考<a href="https://docs.victoriametrics.com/CaseStudies.html" title="这里" target="_blank" rel="noopener noreferrer">这里</a>。Thanos 查询短时间的数据时，性能高，因为数据在 Prometheus 实例上，查询长时间的数据时，因为数据块在对象存储，受网络环境影响比较大。</p></li></ul><h3 id="报警方案" tabindex="-1"><a class="header-anchor" href="#报警方案"><span>报警方案</span></a></h3><ul><li><p>alertmanager 技术栈方案；</p></li><li><p>n9e <a href="https://github.com/didi/nightingale/releases/tag/v5.3.0" target="_blank" rel="noopener noreferrer">v5.3.0</a> 支持了openfalcon数据结构的上报，这样使用老openfalcon作为监控的平台，就可以把数据汇报给n9e 存储到prometheus，统一做监控报警。</p></li></ul><h3 id="与现有监控结合" tabindex="-1"><a class="header-anchor" href="#与现有监控结合"><span>与现有监控结合</span></a></h3><ul><li><p>n9e 提供了基于PromQL 方式数据源的即使和自定义dashboard 功能，且支持多集群。</p></li><li><p>grafana</p><ul><li>有默认值，可从 template 中查看。自定义修改认证方式可参考<a href="https://www.ancii.com/at6lje4j8/" title="这里" target="_blank" rel="noopener noreferrer">这里</a>；</li><li>直接修改 helm 配置 values 文件，可对 grafana 做一些定制化的部署；</li></ul></li></ul><h3 id="部署高可用" tabindex="-1"><a class="header-anchor" href="#部署高可用"><span>部署高可用</span></a></h3><p>多 Prometheus 副本，接后端 VictoriaMetric 聚合去重查询。</p><h2 id="扩展阅读" tabindex="-1"><a class="header-anchor" href="#扩展阅读"><span>扩展阅读</span></a></h2><ul><li><a href="https://prometheus-operator.dev/docs/prologue/introduction/" target="_blank" rel="noopener noreferrer">Prometheus Operator</a></li><li><a href="https://rancher.com/docs/rancher/v2.6/en/monitoring-alerting/" target="_blank" rel="noopener noreferrer">Rancher 监控和报警</a></li><li><a href="https://www.kubernetes.org.cn/2432.html" target="_blank" rel="noopener noreferrer">Kubernetes主机和容器的监控方案</a></li><li><a href="https://docs.prometheus.cool/" target="_blank" rel="noopener noreferrer">云原生监控神器Prometheus</a></li><li><a href="http://www.xuyasong.com/?p=1925" target="_blank" rel="noopener noreferrer">高可用 Prometheus：Thanos 实践</a></li><li><a href="https://blog.csdn.net/weixin_26711867/article/details/108971299" target="_blank" rel="noopener noreferrer">使用Victoriametrics作为prometheus高可用性长期存储方案-中文版</a></li><li><a href="https://medium.com/miro-engineering/prometheus-high-availability-and-fault-tolerance-strategy-long-term-storage-with-victoriametrics-82f6f3f0409e" target="_blank" rel="noopener noreferrer">使用Victoriametrics作为prometheus高可用性长期存储方案-英文版</a></li><li><a href="https://blog.csdn.net/alex_yangchuansheng/article/details/108271368" target="_blank" rel="noopener noreferrer">thanos vs victoria</a></li><li><a href="https://zhuanlan.zhihu.com/p/368912946" target="_blank" rel="noopener noreferrer">victoriaMetric 存储机制</a></li></ul>',43)])])}const u=i(s,[["render",p]]),d=JSON.parse('{"path":"/pages/1e1cca/","title":"k3s 监控方案调研","lang":"zh-CN","frontmatter":{"title":"k3s 监控方案调研","description":"k3s 下监控方案的调研实施。","toc":true,"tags":["Kubernetes","k3s"],"draft":false,"permalink":"/pages/1e1cca/","createTime":"2023/09/08 17:36:02","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"k3s 监控方案调研\\",\\"image\\":[\\"https://pylixm.top/imgs/k8s/thanos-arch.png\\",\\"https://pylixm.top/imgs/k8s/cortex-arch.png\\",\\"https://pylixm.top/imgs/k8s/vm-cluster-arch.png\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/1e1cca/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"k3s 监控方案调研"}],["meta",{"property":"og:description","content":"k3s 下监控方案的调研实施。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pylixm.top/imgs/k8s/thanos-arch.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"k3s"}],["meta",{"property":"article:tag","content":"Kubernetes"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":4.51,"words":1352},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"filePathRelative":"04.云原生/02.k3s/02.k3s-monitor.md","headers":[],"categoryList":[{"id":"e467f5","sort":4,"name":"云原生"},{"id":"e868ae","sort":2,"name":"k3s"}]}');export{u as comp,d as data};
