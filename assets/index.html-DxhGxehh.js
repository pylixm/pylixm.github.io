import{_ as a,c as e,b as t,a as n,e as l,w as r,r as p,o as h,d as o}from"./app-DdES4ywf.js";const d={};function c(k,s){const i=p("VPLink");return h(),e("div",null,[t("p",null,[l(i,{href:"/pages/39558d/"},{default:r(()=>[...s[0]||(s[0]=[o("其他章节索引页",-1)])]),_:1})]),s[1]||(s[1]=n(`<h1 id="第七章-查询与数据库层" tabindex="-1"><a class="header-anchor" href="#第七章-查询与数据库层"><span>第七章 查询与数据库层</span></a></h1><h2 id="查询单个对象时-使用-get-object-or-404" tabindex="-1"><a class="header-anchor" href="#查询单个对象时-使用-get-object-or-404"><span>查询单个对象时，使用 get_object_or_404()</span></a></h2><p>注意，此函数仅在你的 views 中使用。切勿在 helper functions, forms, model methods or anything that is not a view or directly view related 使用。</p><h2 id="在可能报错的查询段-增加-try-except" tabindex="-1"><a class="header-anchor" href="#在可能报错的查询段-增加-try-except"><span>在可能报错的查询段，增加 try-except</span></a></h2><ul><li>查询对象不存在 ：ObjectDoesNotExist vs. DoesNotExist</li><li>查询一个对象，返回多条时：MultipleObjectsReturned</li></ul><h2 id="列用django-orm-的惰性机制-使查询代码变的清晰、可读性更高" tabindex="-1"><a class="header-anchor" href="#列用django-orm-的惰性机制-使查询代码变的清晰、可读性更高"><span>列用django orm 的惰性机制，使查询代码变的清晰、可读性更高</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">results </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> results</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">filter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Q</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name__startswith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Q</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">description__icontains</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">results </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> results</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">exclude</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">status</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">melted</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">results </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> results</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">select_related</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">flavors</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="高级查询的使用" tabindex="-1"><a class="header-anchor" href="#高级查询的使用"><span>高级查询的使用</span></a></h2><ul><li><p>django orm 的高级查询表达式</p><ul><li>Customer.objects.iterate()</li><li>详见：https://docs.djangoproject.com/en/1.8/ref/models/expressions/</li></ul></li><li><p>django orm 的数据库函数应用</p><ul><li><code>Author.objects.update(alias=Lower(Substr(&#39;name&#39;, 1, 5)))</code> 更多 UPPER(),LOWER(), COALESCE(), CONCAT(), LENGTH(), and SUBSTR()</li><li>详见：https://docs.djangoproject.com/en/1.8/ref/models/database-functions/</li></ul></li></ul><h2 id="当裸sql不是必须的时候-不要使用" tabindex="-1"><a class="header-anchor" href="#当裸sql不是必须的时候-不要使用"><span>当裸sql不是必须的时候，不要使用</span></a></h2><p>缺点：</p><ul><li>降低 django app 的可移植性</li></ul><p>但是，有时候，写裸sql是必须的，那就去勇敢的写。</p><p>django 核心开发者 Malcolm Tredinnick 说：</p><blockquote><p>“Django ORM can do many wonderful things, but sometimes SQL is the right answer. The rough policy for the Django ORM is that it’s a storage layer that happens to use SQL to implement functionality. If you need to write advanced SQL you should write it. I would balance that by cautioning against overuse of the raw() and extra() methods.”</p></blockquote><p>所以说，2者有机的结合使用，才是最佳实践。</p><h2 id="在orm-中增加索引-它会加快你的查询。" tabindex="-1"><a class="header-anchor" href="#在orm-中增加索引-它会加快你的查询。"><span>在orm 中增加索引，它会加快你的查询。</span></a></h2><p><code>db_index=True</code></p><h2 id="在一个工作单元中完成多个数据库操作-使用事务管理-transaction" tabindex="-1"><a class="header-anchor" href="#在一个工作单元中完成多个数据库操作-使用事务管理-transaction"><span>在一个工作单元中完成多个数据库操作，使用事务管理（Transaction）</span></a></h2><ul><li>全局request事务</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>DATABASES = {</span></span>
<span class="line"><span>  &#39;default&#39;: {</span></span>
<span class="line"><span>    # ...</span></span>
<span class="line"><span>    &#39;ATOMIC_REQUESTS&#39;: True,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>@transaction.non_atomic_requests</code> 使用它来关闭request事务。</p></li><li><p>使用显示的事务声明，来减小全局事务的性能开销。</p></li><li><p>不要试着去包装 model 的[.create(), .update(),.delete()] 方法，这样会失去其内部的事务调用。</p></li></ul>`,22))])}const m=a(d,[["render",c]]),u=JSON.parse('{"path":"/pages/756cda/","title":"Django 最佳实践-读书笔记 - 第七章 查询与数据库层","lang":"zh-CN","frontmatter":{"title":"Django 最佳实践-读书笔记 - 第七章 查询与数据库层","tags":["Django","Django最佳实践"],"permalink":"/pages/756cda/","createTime":"2023/09/08 17:36:02","description":"第七章 查询与数据库层 查询单个对象时，使用 get_object_or_404() 注意，此函数仅在你的 views 中使用。切勿在 helper functions, forms, model methods or anything that is not a view or directly view related 使用。 在可能报错的查询段，...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Django 最佳实践-读书笔记 - 第七章 查询与数据库层\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/756cda/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"Django 最佳实践-读书笔记 - 第七章 查询与数据库层"}],["meta",{"property":"og:description","content":"第七章 查询与数据库层 查询单个对象时，使用 get_object_or_404() 注意，此函数仅在你的 views 中使用。切勿在 helper functions, forms, model methods or anything that is not a view or directly view related 使用。 在可能报错的查询段，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"Django最佳实践"}],["meta",{"property":"article:tag","content":"Django"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":1.55,"words":464},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"01.开发语言/01.Python/03.Best.Practices.for.Django/07.Best.Practices.for.Django.1.8.3rd-Chapter-7.md","headers":[],"categoryList":[{"id":"59843f","sort":1,"name":"开发语言"},{"id":"9d2a49","sort":1,"name":"Python"},{"id":"34f757","sort":3,"name":"Best.Practices.for.Django"}]}');export{m as comp,u as data};
