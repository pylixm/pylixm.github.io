import{_ as i,c as a,a as e,o as n}from"./app-DdES4ywf.js";const p={};function t(l,s){return n(),a("div",null,[...s[0]||(s[0]=[e(`<h3 id="在django中使用celery" tabindex="-1"><a class="header-anchor" href="#在django中使用celery"><span>在django中使用celery</span></a></h3><p>在使用celery时，你需要定义一个celery的实例（叫做 app ）。如果你有一个现成的django项目，如下：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> proj</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> proj</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">__init__</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">py</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> proj</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">settings</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">py</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> proj</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">urls</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">py</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> manage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建议如下方式创建celery实例。</p><p>创建 proj/proj/celery.py 文件，如下：</p><p><code>proj/proj/celery.py</code></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> __future__</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> absolute_import</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> os</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> celery </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Celery</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># set the default Django settings module for the &#39;celery&#39; program.</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">os</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">environ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">setdefault</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">DJANGO_SETTINGS_MODULE</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">proj.settings</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> django</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">conf </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> settings  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># noqa</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">app </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Celery</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">proj</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># Using a string here means the worker will not have to</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># pickle the object when using Windows.</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">app</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">config_from_object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">django.conf:settings</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">app</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">autodiscover_tasks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">lambda</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> settings</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">INSTALLED_APPS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">app</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">task</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">bind</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">True</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> debug_task</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Request: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">{0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!r</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">format</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">request</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，你需要把这个app放到<code>proj/proj/__init__.py</code>模块中，确保django启动的时候这个app能够被加载。</p><p>从而提供给<code>@shared_task</code>(稍后讲到)注解使用。</p><p><code>proj/proj/__init__.py</code></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> __future__</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> absolute_import</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># This will make sure the app is always imported when</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># Django starts so that shared_task will use this app.</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> .</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">celery </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> app </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">as</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> celery_app  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># noqa</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，这个项目实例的布局，适合于大型项目。对于简单的小项目来说，你可以用一个模块来同时定义celery实例和任务。</p><p>参考celery <a href="http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html#tut-celery" target="_blank" rel="noopener noreferrer">入门教程</a>教程。</p><p>让我们逐个分析下第一个模块都做了什么。</p><p>首先，我们导入<code>future</code> 模块，让我们的<code>celery.py</code> 不会与其他类库产生冲突。</p><pre><code>from __future__ import absolute_import
</code></pre><p>接下来，我们为celery 设置类默认的django项目 <code>DJANGO_SETTINGS_MODULE </code>。</p><pre><code>os.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;, &#39;proj.settings&#39;)
</code></pre><p>这个设置让celery程序知道我们的django项目配置在哪。这句必须放在celery每次被实例化之前。</p><p>接下来，实例化 celery 。</p><pre><code>app = Celery(&#39;proj&#39;)
</code></pre><p>在django项目中，你只需要一个celery实例就可以了。</p><p>我们可以把celery的配置放到django的settings配置文件中，如下：</p><pre><code>app.config_from_object(&#39;django.conf:settings&#39;)
</code></pre><p>此处的参数你可以传递对象，但是建议字符串，这样使用windows 或execv 的时候，无需序列化对象。</p><p>接下来，将所有可以重复操作的任务tasks.py 放到一个django的app中，celery使用如下的机制来发现此模块。</p><pre><code>app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)
</code></pre><p>tasks.py 的放至如下：</p><pre><code>- app1/
    - app1/tasks.py
    - app1/models.py
- app2/
    - app2/tasks.py
    - app2/models.py
</code></pre><p>这样，您就不必在各个模块手动添加到CELERY_IMPORTS参数。lambda 函数会使app在调用的时候能够被自动的发现，并且使你输入的模块不会影响Django的设置对象。</p><p>最后，debug_task 例子是绑定了自己的request请求信息的一个任务函数。</p><p>Finally, the debug_task example is a task that dumps its own request information.</p><p>This is using the new bind=True task option introduced in Celery 3.1 to easily refer to the current task instance.</p><h3 id="using-the-shared-task-decorator" tabindex="-1"><a class="header-anchor" href="#using-the-shared-task-decorator"><span>Using the @shared_task decorator</span></a></h3><p>你的task任务写在了django的app中，这个app可能不依赖与django项目本身。所以你不能讲celery的实例一如此app中。</p><p>该@shared_task装饰可以让你创建任务，而无需任何具体的celery实例：</p><p>注：此时需要把 django 的app 添加到 settings的app列表（INSTALLED_APPS）中。</p><p>demoapp/tasks.py:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> __future__</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> absolute_import</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> celery </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> shared_task</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">shared_task</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> y</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">shared_task</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> mul</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> y</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">shared_task</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> xsum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">numbers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> sum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">numbers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using-the-django-orm-cache-as-a-result-backend" tabindex="-1"><a class="header-anchor" href="#using-the-django-orm-cache-as-a-result-backend"><span>Using the Django ORM/Cache as a result backend.</span></a></h3><p>如果你想讲celery的返回结果使用django的ORM（或SQLAlchemy）存到数据库中，你需要安装 django-celery 模块库。</p><p>django-celery 模块库结果默认使用django的ORM 和 Cache 框架。</p><p>使用步骤如下：</p><p>1、安装 django-celery 库：</p><pre><code>$ pip install django-celery
</code></pre><p>2、Add djcelery to INSTALLED_APPS.</p><p>3、创建celery的数据表</p><pre><code>If you are using south for schema migrations, you’ll want to:

$ python manage.py migrate djcelery
For those who are not using south, a normal syncdb will work:

$ python manage.py syncdb

&gt;=django1.7 
可直接使用django自带的数据库同步命令：
$ python manage.py makemigrations
$ python manage.py migrate
</code></pre><p>4、配置celery。</p><pre><code># For the database backend you must use:
app.conf.update(
    CELERY_RESULT_BACKEND=&#39;djcelery.backends.database:DatabaseBackend&#39;,
)
# For the cache backend you can use:
app.conf.update(
    CELERY_RESULT_BACKEND=&#39;djcelery.backends.cache:CacheBackend&#39;,
)
# 此处配置用来存储任务执行结果。
</code></pre><p>除了这种方式外，你可以把 CELERY_RESULT_BACKEND 放到你的django的settings配置文件中。</p><h3 id="starting-the-worker-process" tabindex="-1"><a class="header-anchor" href="#starting-the-worker-process"><span>Starting the worker process</span></a></h3><p>在生产环境中，你将希望在后台运行worker - 请参阅 <a href="http://docs.celeryproject.org/en/latest/tutorials/daemonizing.html#daemonizing" target="_blank" rel="noopener noreferrer"> Running the worker as a daemon</a> -</p><p>但对于测试和开发它能够通过使用 celery 启动工作实例的管理命令非常有用，</p><p>就像你使用Django的runserver：</p><pre><code>celery -A proj worker -l info
</code></pre><p>获取完整的celery命令列表，请使用：</p><pre><code>celery help 
</code></pre><h3 id="_2015年12月10日-update" tabindex="-1"><a class="header-anchor" href="#_2015年12月10日-update"><span>2015年12月10日 update：</span></a></h3><p>按照此教程，启动celery后，报错误如下：</p><pre><code>[2016-05-29 01:19:24,751: ERROR/MainProcess] consumer: Cannot connect to amqp://guest:**@127.0.0.1:5672//: [Errno 111] Connection refused.
Trying again in 2.00 seconds...
</code></pre><p>原因是，celery 需要一个 <code>broker</code> 来发送和接收消息，支持：rabbitmq、redis、数据库等作为这个broker。上边的配置中没有设置这个borker，</p><p>celery 默认使用 rabbitmq来作为broker。所以，报错链接不上rabbitmq。</p><p>解决办法：</p><p>1、按装rabbitmq 显式的指定 broker为你配置的rabbitmq。</p><pre><code>CELERY_BROKER_URL = &#39;amqp://guest:guest@localhost//&#39; 
</code></pre><p>2、使用django数据库作为 broker：</p><pre><code># 增加配置
BROKER_URL = &#39;django://&#39;
# 增加app实例配置
INSTALLED_APPS = (&#39;kombu.transport.django&#39;, )
</code></pre><p>broker 官方建议使用 rabbitmq 或 redis ，其他的broker 仅为开发测试，性能不稳定。</p><p>官网详细介绍：http://docs.jinkan.org/docs/celery/getting-started/brokers/index.html</p><h3 id="_2016年5月29日-更新" tabindex="-1"><a class="header-anchor" href="#_2016年5月29日-更新"><span>2016年5月29日 更新：</span></a></h3><p>在搭建django + celery 使用总结：</p><p>1、使用 <code> app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)</code>这个配置，让celery 自动发现django app 下定义的task 时， django app下的task 文件名 必须为 <code>tasks.py</code>。</p><p>2、celery 3.1 后，和django的结合无需再依靠django-celery。 可按以上方式搭建。具体官方地址 <a href="http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html" target="_blank" rel="noopener noreferrer">这里</a></p><p>3、todo 后续补充</p><h3 id="各种功能搭建实例源码" tabindex="-1"><a class="header-anchor" href="#各种功能搭建实例源码"><span>各种功能搭建实例源码</span></a></h3><p><a href="https://github.com/pylixm/celery-examples/tree/master" target="_blank" rel="noopener noreferrer">源码</a></p><hr><p><strong>ps: 个人英文水平有限，还请各位批评指正。</strong></p><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考：</span></a></h3><p><a href="http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html" target="_blank" rel="noopener noreferrer">http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html</a></p>`,81)])])}const r=i(p,[["render",t]]),k=JSON.parse('{"path":"/pages/bde477/","title":"「译」在django中使用celery实现异步任务","lang":"zh-CN","frontmatter":{"title":"「译」在django中使用celery实现异步任务","tags":["Django","Celery","翻译"],"permalink":"/pages/bde477/","createTime":"2023/09/08 17:36:02","description":"在django中使用celery 在使用celery时，你需要定义一个celery的实例（叫做 app ）。如果你有一个现成的django项目，如下： 建议如下方式创建celery实例。 创建 proj/proj/celery.py 文件，如下： proj/proj/celery.py 接下来，你需要把这个app放到proj/proj/__init__...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"「译」在django中使用celery实现异步任务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/bde477/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"「译」在django中使用celery实现异步任务"}],["meta",{"property":"og:description","content":"在django中使用celery 在使用celery时，你需要定义一个celery的实例（叫做 app ）。如果你有一个现成的django项目，如下： 建议如下方式创建celery实例。 创建 proj/proj/celery.py 文件，如下： proj/proj/celery.py 接下来，你需要把这个app放到proj/proj/__init__..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"翻译"}],["meta",{"property":"article:tag","content":"Celery"}],["meta",{"property":"article:tag","content":"Django"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":4.7,"words":1409},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"01.开发语言/01.Python/05.Celery/24.Django-celery.md","headers":[],"categoryList":[{"id":"59843f","sort":1,"name":"开发语言"},{"id":"9d2a49","sort":1,"name":"Python"},{"id":"00d6a9","sort":5,"name":"Celery"}]}');export{r as comp,k as data};
