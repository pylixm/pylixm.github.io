import{_ as t,c as a,a as p,o as r}from"./app-DdES4ywf.js";const i={};function l(o,e){return r(),a("div",null,[...e[0]||(e[0]=[p('<p>本文是阅读老钱的《深入理解RPC:基于Python自建分布式高并发RPC服务》的笔记及摘录。</p><p>最早了解到的系统之间交互有Web service，那还是在学生时代。还没有彻底搞明白其运行原理，便接触了一种新的系统交互方式，或者叫准则更合适。那便是 RestFul。这种系统交互方式伴随了我的职业生涯好久，直到现在系统之间的交互，我的首选还是restful。它是一种简单交互方式，将请求信息看做资源，使用JSON这种数据结构作为传输格式，基于http协议，简单易用。只要把我们的http返回页面改为JSON格式的数据，并遵循一定的restful准则即可。restful 并没有严格的去限制你的使用，更多是提供了一种以http协议为基础的交互思路。</p><p>后来，接触到了<code>RPC</code>这个词，知道它是也是一种远程过程调用方式，并且呢在微服务和分布式系统中使用的比较广泛。看到有这样一本书，试读了下可以学到东西，便买入深入研读下。</p><h2 id="rpc-介绍" tabindex="-1"><a class="header-anchor" href="#rpc-介绍"><span>RPC 介绍</span></a></h2><p>RPC(Remote Procedure Call)，远程过程调用，是一种分布式系统中常用跨机器的通信方法，更多的是指跨机器交互中的长连接交互。</p><p>RPC，传统意义上讲是指长连接数据交互，区别于<code>http</code>即用即走的短连接，严格来说<code>http</code>也算是一种特殊的RPC服务，随着<code>http1.1</code>中对长连接的支持，区别已经越来越小。</p><p>RPC的应用非常广泛，主要应用在大中型分布式系统中的组件交互，可以这样理解：各种夸网络协议的「长连接」系统交互中都使用了RPC或者类RPC。</p><p>其他分布式通信解决方案还有：分布式消息队列、HTTP请求调用、数据库和分布式缓存等。</p><p>各大厂开源的RPC框架有：</p><ul><li>Google: gRPC</li><li>Facebook: Thrift</li><li>Twitter: Finagle</li><li>百度：bRPC</li><li>腾讯：Tars</li><li>阿里：Dubbo、SOFA</li><li>新浪：Motan</li></ul><h2 id="rpc-交互流程" tabindex="-1"><a class="header-anchor" href="#rpc-交互流程"><span>RPC 交互流程</span></a></h2><p>RPC 是两个子系统之间进行的直接消息交互，它使用操作系统提供的套接字（sockect）来作为消息的载体，以特定的消息格式（需要序列化）来定义消息内容和边界。</p><p><img src="https://ws1.sinaimg.cn/large/8697aaedly1fspizbsjknj20ow0dmq3e.jpg" alt=""></p><p>可以这样理解，RPC是对底层通信和交互协议的一个封装，便于上层使用。</p><h2 id="rpc-协议构成" tabindex="-1"><a class="header-anchor" href="#rpc-协议构成"><span>RPC 协议构成</span></a></h2><p>RPC 消息协议组成：</p><p><img src="https://ws1.sinaimg.cn/large/8697aaedly1fsppmxl87mj20fs09rdg3.jpg" alt=""></p><h3 id="消息边界" tabindex="-1"><a class="header-anchor" href="#消息边界"><span>消息边界</span></a></h3><p>因为 RPC 是在一条TCP链路上进行多次消息的交互，所以交互过程中为了区分一条一条消息的消息，必须将消息的边界定义好。</p><p>消息边界分隔有两种方式：</p><ul><li>特殊符号法：使用特殊符号，最长用的是 <code>\\r\\n</code>。可读性强，但是只能传输文本。</li><li>长度前缀法：在消息前加 4 字节长度的整数值，标记消息体的长度。此方式常用于二进制类型的消息。可读性差，可以传输文本和内容。</li></ul><h3 id="消息结构" tabindex="-1"><a class="header-anchor" href="#消息结构"><span>消息结构</span></a></h3><p>消息结构分为两种：</p><ul><li><p>显示的消息结构：消息的结构有自身决定，可读性高，但是为了表示结构，传输时冗余字段多，消耗更多的流量。如：JSON格式。</p></li><li><p>隐式的消息结构：在TCP链接创建时，服务端和客户端便规定好消息结构，以后交互直接发送消息的值即可。消息的可读性差，但是确实节省了不少传输流量。</p></li></ul><h3 id="消息压缩" tabindex="-1"><a class="header-anchor" href="#消息压缩"><span>消息压缩</span></a></h3><p>消息在传输过程中为了节省带宽需要压缩。但是是否需要压缩，要根据具体业务场景。不要为了压缩占用大量系统资源，导致正常系统服务出现问题。</p><h3 id="流量的优化" tabindex="-1"><a class="header-anchor" href="#流量的优化"><span>流量的优化</span></a></h3><p>消息传递中，必然是占用字节越少，效率的流量越少，传输速度也越快了。优化流量这里思路便是，尽量减少消息的字节占用。</p><ul><li>使用变长整数varint，来表示整数。</li><li>使用 zigzag 编码 来表示负数。</li></ul><h2 id="rpc-通信协议列举分析" tabindex="-1"><a class="header-anchor" href="#rpc-通信协议列举分析"><span>RPC 通信协议列举分析</span></a></h2><h3 id="redis-通信协议分析" tabindex="-1"><a class="header-anchor" href="#redis-通信协议分析"><span>Redis 通信协议分析</span></a></h3><p>Redis 作者自己设计了一套本文通信协议 RESP。按照RPC消息结构来分析如下：</p><ul><li>消息边界：RESP使用特殊符号<code>\\r\\n</code>来区分多次消息。</li><li>消息结构：使用文本形式来传送消息。</li><li>流量优化：网络流量倾斜进行极致优化，而是选择了照顾协议的直观性、可理解性。</li></ul><p>更多协议详情，可参考<a href="https://gist.github.com/antirez/2bc68a9e9e45395e297d288453d5d54c" target="_blank" rel="noopener noreferrer">官方相关文档</a>。</p><h3 id="protobuf" tabindex="-1"><a class="header-anchor" href="#protobuf"><span>Protobuf</span></a></h3><p>Protobuf 协议是 Google 开源的二进制 RPC 通讯协议，它可能是互联网开源项目中使用最为广泛的 RPC 协议。</p><ul><li>消息边界：没有定义消息边界，也就是没有消息头。消息头一般由用户自己定义，通常使用长度前缀法来定义边界</li><li>消息结构：使用二进制流传送消息。</li><li>流量优化：通过对消息格式的设计优化，充分\b压榨了消息\b体积，减小了传输使用的流量。</li></ul><p>扩展阅读：</p><ul><li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/index.html" target="_blank" rel="noopener noreferrer">Google Protocol Buffer 的使用和原理</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/overview" target="_blank" rel="noopener noreferrer">官方文档</a></li></ul><h2 id="rpc-vs-http-vs-webservice" tabindex="-1"><a class="header-anchor" href="#rpc-vs-http-vs-webservice"><span>RPC vs HTTP vs WebService</span></a></h2><p><code>RPC</code> 远程过程调用，就是在另外一台服务器上有一段代码（函数），你可以通过网络远程调用它。用什么协议（http，tcp，udp…），传输什么数据格式（json，xml，二进制...）你都可以自己控制。</p><p><code>HTTP API</code> 基于应用层的HTTP协议，通常是以一种web的方式，对外提供以JSON或字符串作为数据格式的接口服务，例如著名的 restful规则。</p><p><code>WebService</code> 是一种SOAP方式的web服务。SOAP用来描述传递信息的格式， WSDL用来描述如何访问具体的接口，UDDI用来管理，分发，查询webService。基于http协议，使用xml格式来传递数据。</p><p>现阶段个人理解：</p><blockquote><ul><li>RPC \b广义上来讲，是\b远程过程调用，即跨机器的函数调用。传输协议和格式可自己控制。包括基于TCP协议的一些\b通信协议实现的过程调用和基于http协议实现的过程调用。如：restful API、WebService及gRPC等一些框架实现。</li><li>RPC 狭义上来讲的话，通常是基于TCP/IP协议，通过二进制流或文本的数据格式来传输的一些通信方法，如：gRPC。</li></ul></blockquote>',45)])])}const c=t(i,[["render",l]]),n=JSON.parse('{"path":"/pages/2b7385/","title":"架构师之路 - RPC 理解 - 杂谈","lang":"zh-CN","frontmatter":{"title":"架构师之路 - RPC 理解 - 杂谈","tags":["architect","rpc"],"permalink":"/pages/2b7385/","createTime":"2023/09/08 17:36:02","description":"本文是阅读老钱的《深入理解RPC:基于Python自建分布式高并发RPC服务》的笔记及摘录。 最早了解到的系统之间交互有Web service，那还是在学生时代。还没有彻底搞明白其运行原理，便接触了一种新的系统交互方式，或者叫准则更合适。那便是 RestFul。这种系统交互方式伴随了我的职业生涯好久，直到现在系统之间的交互，我的首选还是restful。...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"架构师之路 - RPC 理解 - 杂谈\\",\\"image\\":[\\"https://ws1.sinaimg.cn/large/8697aaedly1fspizbsjknj20ow0dmq3e.jpg\\",\\"https://ws1.sinaimg.cn/large/8697aaedly1fsppmxl87mj20fs09rdg3.jpg\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/2b7385/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"架构师之路 - RPC 理解 - 杂谈"}],["meta",{"property":"og:description","content":"本文是阅读老钱的《深入理解RPC:基于Python自建分布式高并发RPC服务》的笔记及摘录。 最早了解到的系统之间交互有Web service，那还是在学生时代。还没有彻底搞明白其运行原理，便接触了一种新的系统交互方式，或者叫准则更合适。那便是 RestFul。这种系统交互方式伴随了我的职业生涯好久，直到现在系统之间的交互，我的首选还是restful。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://ws1.sinaimg.cn/large/8697aaedly1fspizbsjknj20ow0dmq3e.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"rpc"}],["meta",{"property":"article:tag","content":"architect"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":5.66,"words":1697},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"09.杂谈/03.Chief-Software-Architect-RPC.md","headers":[],"categoryList":[{"id":"224263","sort":9,"name":"杂谈"}]}');export{c as comp,n as data};
