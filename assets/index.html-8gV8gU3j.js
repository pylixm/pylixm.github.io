import{_ as a,c as n,a as s,o}from"./app-DdES4ywf.js";const t="/imgs/django/django3-1.png",i="/imgs/django/django3-asgi.png",p="/imgs/django/django3-cgi.png",r="/imgs/django/django3-websocket.png",c="/imgs/django/django3-model-async.png",l={};function d(g,e){return o(),n("div",null,[...e[0]||(e[0]=[s('<p>上周<code>Django</code>官方正式发布了<code>Django 3.0</code>版本，其中最重要的更新莫过于对<code>ASGI</code>的支持。今天对<code>Django 3.0</code>的异步功能做了简单的试用，分析下过程，希望对大家有帮助。</p><p>具体的详细更新列表可参考官方 <a href="https://docs.djangoproject.com/en/3.0/releases/3.0/" target="_blank" rel="noopener noreferrer">Django 3.0 release notes</a>, 这里不再赘述，下面我们开始。</p><h2 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作"><span>准备工作</span></a></h2><p>在开始之前我们先来准备下环境，直接使用 Pycharm 新建一个项目，并新建虚拟环境.</p><p><img src="'+t+'" alt=""></p><p>得到如下项目：</p><p><img src="'+i+'" alt=""></p><p>相比之前版本的 django 项目，多了一个<code>asgi.py</code>。这便是<code>ASGI</code>的服务的入口文件了，内容基本同<code>wsgi.py</code>。</p><h2 id="asgi-协议知识" tabindex="-1"><a class="header-anchor" href="#asgi-协议知识"><span>ASGI 协议知识</span></a></h2><p>在使用<code>ASGI</code> 特性之前，先让我们了解下，什么是 ASGI?</p><p><code>ASGI</code>和<code>WSGI</code>，都是一种 Web 服务网关接口协议，是在<code>CGI</code>的标准上构建的。</p><p><code>CGI</code>（通用网关接口， Common Gateway Interface），简单来说就是解析浏览器等客户端发送给服务端的请求，并组装需要返回的 HTTP 请求的一种通用协议，处理这个过程的程序，我们就可以叫 CGI 脚本。互联网早起的动态网页都是基于<code>CGI</code>标准的。</p><p><img src="'+p+`" alt=""></p><p><code>WSGI</code>，是一种 Python 专用的 Web 服务器网关接口，它分为两部分&quot;服务器（或网关）&quot;和&quot;应用程序（或应用框架）&quot;。「服务器」，一般独立于应用框架，为应用程序运行提供环境信息和一个回调函数（Callback Function）。当应用程序完成处理请求后，透过回调函数，将结果回传给服务器。常用的<code>WSGI</code>服务器有: <code>uwsgi</code>、<code>gunicon</code>。「应用程序」，是各种实现了<code>WSGI</code>标准的 Python web 框架了，常用的有<code>Django</code>、<code>Flask</code>等。</p><p><code>ASGI</code>（Asynchronous Server Gateway Interface)是 Django 团队提出的一种具有异步功能的 Python web 服务器网关接口协议。能够处理多种通用的协议类型，包括 HTTP，HTTP2 和 WebSocket。<code>WSGI</code>是基于 HTTP 协议模式的，不支持<code>WebSocket</code>，而<code>ASGI</code>的诞生则是为了解决 Python 常用的 WSGI 不支持当前 Web 开发中的一些新的协议标准(WebSocket、Http2 等)。同时，<code>ASGI</code>向下兼容<code>WSGI</code>标准，可以通过一些方法跑<code>WSGI</code>的应用程序。常用的「服务器」有<code>Daphne</code>、<code>Uvicorn</code>。</p><p>更多<code>ASGI</code>资料可参考<a href="https://asgi.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener noreferrer">文档</a></p><h2 id="使用过程" tabindex="-1"><a class="header-anchor" href="#使用过程"><span>使用过程</span></a></h2><p>了解了<code>ASGI</code>，我们进入正题。关于<code>ASGI</code>在<code>Django release Notes</code>文档中并没有过多的介绍，只有一个部署的文档 <a href="https://docs.djangoproject.com/zh-hans/3.0/howto/deployment/asgi/" target="_blank" rel="noopener noreferrer">How to deploy with ASGI</a></p><p>看了下，主要说了两种部署方式：daphne 和 uvicorn。其中&quot;<strong>必须使用 <code>Daphne</code>或<code>Uvicorn</code>部署，才会是 ASGI 服务，直接 runnerserver 是同步服务</strong>&quot;这句给了我们提醒，想要使用 ASGI，便不能直接 runerserver。</p><p>我们随便选一种使用方式，并启动服务：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span># 安装</span></span>
<span class="line"><span>pip install  uvicorn</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 启动服务</span></span>
<span class="line"><span>uvicorn django3_demo.asgi:application</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动日志如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>$ uvicorn django3_demo.asgi:application</span></span>
<span class="line"><span>INFO:     Started server process [48508]</span></span>
<span class="line"><span>INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)</span></span>
<span class="line"><span>INFO:     Waiting for application startup.</span></span>
<span class="line"><span>INFO:     ASGI &#39;lifespan&#39; protocol appears unsupported.</span></span>
<span class="line"><span>INFO:     Application startup complete.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据<code>ASGI</code>的特性，可以支持 HTTP、HTTP2 和 WebSocket。那我们来进行下 websocket 和 http 的测试。</p><h3 id="websocket-测试" tabindex="-1"><a class="header-anchor" href="#websocket-测试"><span><strong>websocket 测试</strong></span></a></h3><p>打开浏览器 console 控制台，新建一个 websocket 链接，出现如下错误：</p><p><img src="`+r+`" alt=""></p><p>看服务错误如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>INFO:     Application startup complete.</span></span>
<span class="line"><span>ERROR:    Exception in ASGI application</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &quot;/Users/xiumin1/.local/share/virtualenvs/django3_demo/lib/python3.6/site-packages/uvicorn/protocols/websockets/websockets_impl.py&quot;, line 153, in run_asgi</span></span>
<span class="line"><span>    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)</span></span>
<span class="line"><span>  File &quot;/Users/xiumin1/.local/share/virtualenvs/django3_demo/lib/python3.6/site-packages/uvicorn/middleware/proxy_headers.py&quot;, line 45, in __call__</span></span>
<span class="line"><span>    return await self.app(scope, receive, send)</span></span>
<span class="line"><span>  File &quot;/Users/xiumin1/.local/share/virtualenvs/django3_demo/lib/python3.6/site-packages/django/core/handlers/asgi.py&quot;, line 146, in __call__</span></span>
<span class="line"><span>    % scope[&#39;type&#39;]</span></span>
<span class="line"><span>ValueError: Django can only handle ASGI/HTTP connections, not websocket.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Django can only handle ASGI/HTTP connections, not websocket</code> ，貌似 Django 的 ASGI 还没有完全实现，仅支持 HTTP。</p><h3 id="http-测试" tabindex="-1"><a class="header-anchor" href="#http-测试"><span><strong>http 测试</strong></span></a></h3><p>在浏览器输入<code>http://127.0.0.1:8000</code> 出现了我们熟悉的小火箭页面。这只是简单的启动页面，我们需要写个异步的 view 和 model 来具体操作下。</p><p>翻阅了一遍文档，在一个小角落里:</p><p><img src="`+c+'" alt=""></p><p>令我失望的找到了如下说明：</p><blockquote><p>Django has developing support for asynchronous (“async”) Python, but does not yet support asynchronous views or middleware; they will be coming in a future release.</p></blockquote><p>主要意思是现阶段不支持异步的 view 和中间件。那也就说明没法使用 Django 原生的方式来实现<code>ASGI</code>了。</p><p>到此，异步功能的试用告一段落。结论，<strong>现阶段<code>Django</code>原生还是无法完全的支持<code>ASGI</code>的服务。如果想完全实现<code>ASGI</code>服务，还是需要 <a href="https://channels.readthedocs.io/en/latest/" target="_blank" rel="noopener noreferrer"><code>Channels</code></a> 或 <a href="https://www.starlette.io/" target="_blank" rel="noopener noreferrer"><code>starlette</code></a></strong>。</p><p>经过翻阅资料，我找到了 Django 原生异步主要推动者<a href="https://www.aeracode.org/2018/06/04/django-async-roadmap/" target="_blank" rel="noopener noreferrer">Andrew Godwin</a>的一篇博客， 描述了异步功能开发的时间轴。大致如下：</p><ul><li>Django 2.1：当前进行中的版本。没有异步工作。</li><li>Django 2.2：添加异步 ORM 和查看功能的初始工作，但默认情况下所有内容默认都同步，并且异步支持主要基于线程池。</li><li>Django 3.0：将内部请求处理堆栈重写为完全异步的，添加异步中间件，表单，缓存，会话，身份验证。对所有变为仅异步的 API 开始弃用过程。</li><li>Django 3.1：继续改善异步支持，潜在的异步模板更改</li><li>Django 3.2：完成不推荐使用的过程，并拥有一个异步的 Django。</li></ul><p>从现在 3.0 发布的功能看，实现貌似与该时间抽差了一个版本，只实现了应该到 2.2 的功能。</p><p>到这里今天的分享就结束了。最后，还是希望 Django 的异步功能早点来临，到时候我们便能直接使用 django 开发各种异步特性的功能，而不必安装三方软件。</p><h2 id="扩展阅读" tabindex="-1"><a class="header-anchor" href="#扩展阅读"><span>扩展阅读</span></a></h2><ul><li><a href="https://pypi.org/project/daphne/" title="Daphne 文档" target="_blank" rel="noopener noreferrer">Daphne 文档</a></li><li><a href="https://github.com/django/deps/blob/master/accepted/0009-async.rst#views-http-handling" title="DEP0009" target="_blank" rel="noopener noreferrer">DEP0009</a></li><li><a href="https://hub.packtpub.com/django-3-0-is-going-async/" title="Django 3.0 is going async!" target="_blank" rel="noopener noreferrer">Django 3.0 is going async!</a></li><li><a href="https://www.aeracode.org/2018/06/04/django-async-roadmap/" title="A Django Async Roadmap" target="_blank" rel="noopener noreferrer">A Django Async Roadmap</a></li><li><a href="https://groups.google.com/forum/#!msg/django-developers/5CVsR9FSqmg/qKD3QCrLCAAJ" title="django developers goolge groups" target="_blank" rel="noopener noreferrer">django developers goolge groups</a></li><li><a href="http://www.liujiangblog.com/blog/47/" title="刘江-Django3.0初体验" target="_blank" rel="noopener noreferrer">刘江-Django3.0 初体验</a></li></ul>',44)])])}const m=a(l,[["render",d]]),u=JSON.parse('{"path":"/pages/93bf50/","title":"Django 3.0 异步试用分享","lang":"zh-CN","frontmatter":{"title":"Django 3.0 异步试用分享","tags":["Django"],"permalink":"/pages/93bf50/","createTime":"2023/09/08 17:36:02","description":"上周Django官方正式发布了Django 3.0版本，其中最重要的更新莫过于对ASGI的支持。今天对Django 3.0的异步功能做了简单的试用，分析下过程，希望对大家有帮助。 具体的详细更新列表可参考官方 Django 3.0 release notes, 这里不再赘述，下面我们开始。 准备工作 在开始之前我们先来准备下环境，直接使用 Pychar...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Django 3.0 异步试用分享\\",\\"image\\":[\\"https://pylixm.top/imgs/django/django3-1.png\\",\\"https://pylixm.top/imgs/django/django3-asgi.png\\",\\"https://pylixm.top/imgs/django/django3-cgi.png\\",\\"https://pylixm.top/imgs/django/django3-websocket.png\\",\\"https://pylixm.top/imgs/django/django3-model-async.png\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/93bf50/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"Django 3.0 异步试用分享"}],["meta",{"property":"og:description","content":"上周Django官方正式发布了Django 3.0版本，其中最重要的更新莫过于对ASGI的支持。今天对Django 3.0的异步功能做了简单的试用，分析下过程，希望对大家有帮助。 具体的详细更新列表可参考官方 Django 3.0 release notes, 这里不再赘述，下面我们开始。 准备工作 在开始之前我们先来准备下环境，直接使用 Pychar..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pylixm.top/imgs/django/django3-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"Django"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":5.03,"words":1508},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"01.开发语言/01.Python/02.Django/20.Django-3.0-try.md","headers":[],"categoryList":[{"id":"59843f","sort":1,"name":"开发语言"},{"id":"9d2a49","sort":1,"name":"Python"},{"id":"f8691d","sort":2,"name":"Django"}]}');export{m as comp,u as data};
