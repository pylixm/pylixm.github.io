import{_ as n,c as e,a,o as i}from"./app-DdES4ywf.js";const l="/imgs/cross_origin/cross_origin.png",p="/imgs/cross_origin/xhr.png",r={};function t(c,s){return i(),e("div",null,[...s[0]||(s[0]=[a(`<p>在前后端分离开发过程中常常出现下面这样的错误提示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Access to XMLHttpRequest at &#39;http://127.0.0.1:8000/apis/users/login/&#39; from origin &#39;http://127.0.0.1:8080&#39; has been blocked by CORS policy: Response to preflight request doesn&#39;t pass access control check: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</span></span>
<span class="line"><span>HelloWorld.vue?18db:50 err Error: Network Error</span></span>
<span class="line"><span>    at createError (createError.js?16d0:16)</span></span>
<span class="line"><span>    at XMLHttpRequest.handleError (xhr.js?ec6c:91)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到关键字<code>CORS</code>、<code>Access-Control-Allow-Origin</code> 可以判断基本上就是跨域相关的错误了。</p><p>不了解的人常常一头雾水，本文咱们就来具体探讨下这种跨域问题，彻底搞懂它，解决它。</p><h2 id="什么是跨域-造成跨域的原因" tabindex="-1"><a class="header-anchor" href="#什么是跨域-造成跨域的原因"><span>什么是跨域？造成跨域的原因？</span></a></h2><p>跨域问题是由浏览器的同源策略引起的，在后端编程语言的Http Client调用中不会存在。同源策略中的同源是说站点的<strong>协议</strong>、<strong>域名</strong>、<strong>端口</strong>都需要相同。</p><p><img src="`+l+'" alt=""></p><p><strong>跨域</strong>便是请求不同源的站点的一种行为操作。</p><p>为了更好的了解跨域，我们先来了解下<strong>同源策略</strong>。同源策略是一种安全策略，它只允许访问来自同一站点的资源。同源策略又分为两种：</p><ul><li>DOM 同源策略：禁止对不同源页面DOM进行操作；</li><li>XMLHttpRequest同源策略：禁止使用XHR对象对不同源的服务地址发起HTTP请求；</li></ul><p>DOM同源策略，常常发生在iframe的使用中，iframe 中如果嵌套了不同源的页面便会发生跨域。iframe跨域和XHR同源策略造成的跨域解决方法一样。</p><p>XMLHttpRequest同源策略便是引起文章开头跨域问题的主要原因。当浏览器请求后端不同源的数据时，会向后端发起一个XHR的HTTP请求，浏览器和后端服务沟通，若没有跨域相关配置，则触发XHR同源策略限制，抛出异常。</p><blockquote><p>XMLHttpRequest（简称XHR）对象用于与服务器交互。通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。除了浏览器的地址栏，浏览器和后端交互（通常是javascripts控制）都是通过XHR对象，在浏览器的console中可以看到XHR的请求。 <img src="'+p+`" alt=""></p></blockquote><p>作为用户，同源策略是浏览器对我们上网行为的一种保护。作为开发者，在web开发中确实会用到夸域来获取资源的情况。如何解决呢？下面总结几种常用的跨域解决方法。</p><h2 id="常用的解决方法" tabindex="-1"><a class="header-anchor" href="#常用的解决方法"><span>常用的解决方法</span></a></h2><p>这里以vue作为前端、Django 作为后端举例说明。</p><ul><li>前端服务地址为：http://127.0.0.1:8080</li><li>后端接口地址为：http://127.0.0.1:8000</li></ul><p>详细完整代码可见：<a href="https://github.com/pylixm/django-cross-origin-demo" target="_blank" rel="noopener noreferrer">https://github.com/pylixm/django-cross-origin-demo</a></p><h3 id="跨域资源共享-cors" tabindex="-1"><a class="header-anchor" href="#跨域资源共享-cors"><span>跨域资源共享（CORS）</span></a></h3><p>CORS（Cross-origin resource sharing，跨域资源共享）是一个 W3C 标准，定义了在必须访问跨域资源时，浏览器与服务器应该如何沟通。它的核心思想，使用自定义的HTTP头部信息让浏览器和后端进行沟通，来决定是否允许跨域请求。</p><p>CORS 方式解决跨域，主要需要后端支持，主流浏览器均已支持。站点在访问跨域资源的时候，浏览器会自动的添加HTTP头信息，自动完成与后端的沟通，用户无感知。</p><p>下面以vue+django项目说下如何实现。例如在前端我们有个登录的POST请求，我们使用axios直接跨域请求后端接口。如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>  handleClick(){</span></span>
<span class="line"><span>  this.$axios.post(&quot;http://127.0.0.1:8000/apis/users/login/&quot;, {</span></span>
<span class="line"><span>    username: this.username,</span></span>
<span class="line"><span>    password: this.password,</span></span>
<span class="line"><span>  }).then(res=&gt;{</span></span>
<span class="line"><span>      console.log(&#39;res&#39;,res)</span></span>
<span class="line"><span>    }).catch(err=&gt;{</span></span>
<span class="line"><span>      console.log(&#39;err&#39;,err)</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  },</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前端服务端口为8080，后端服务为8000。两个服务的端口不一致，发生了跨域。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Access to XMLHttpRequest at &#39;http://127.0.0.1:8000/apis/users/login/&#39; from origin &#39;http://127.0.0.1:8080&#39; has been blocked by CORS policy: Response to preflight request doesn&#39;t pass access control check: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</span></span>
<span class="line"><span>HelloWorld.vue?18db:50 err Error: Network Error</span></span>
<span class="line"><span>    at createError (createError.js?16d0:16)</span></span>
<span class="line"><span>    at XMLHttpRequest.handleError (xhr.js?ec6c:91)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Django 可通过第三方的跨域库<code>django-cors-headers</code>添加支持。我们<code>pip install django-cors-headers</code> 并增加如下配置：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>INSTALLED_APPS = [</span></span>
<span class="line"><span>    ... </span></span>
<span class="line"><span>    &#39;corsheaders&#39;,</span></span>
<span class="line"><span>    &#39;django_demo.apps.SiteCenterConfig&#39;,</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span>MIDDLEWARE = [</span></span>
<span class="line"><span>    &#39;corsheaders.middleware.CorsMiddleware&#39;,</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 跨域支持</span></span>
<span class="line"><span>CORS_ALLOWED_ORIGINS = [&#39;http://127.0.0.1:8080&#39;]  # 授权进行跨站点 HTTP 请求的源列表</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 因为跨域之后需要传递sessionid 到浏览器cookie，所以添加如下配置。</span></span>
<span class="line"><span>CORS_ALLOW_CREDENTIALS = True  # 允许 Cookie 包含在跨站点 HTTP 请求中</span></span>
<span class="line"><span>SESSION_COOKIE_SAMESITE = None  # django 自己的安全策略</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前端增加携带cookie的参数，不需要cookie时，可不用设置：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>  handleClick(){</span></span>
<span class="line"><span>  this.$axios.post(&quot;http://127.0.0.1:8000/apis/users/login/&quot;, {</span></span>
<span class="line"><span>    username: this.username,</span></span>
<span class="line"><span>    password: this.password,</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  ,{</span></span>
<span class="line"><span>    withCredentials:true  // 携带和设置cookie </span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  ).then(res=&gt;{</span></span>
<span class="line"><span>      console.log(&#39;res&#39;,res)</span></span>
<span class="line"><span>    }).catch(err=&gt;{</span></span>
<span class="line"><span>      console.log(&#39;err&#39;,err)</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  },</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启服务，再次访问前端，成功登录。</p><h3 id="使用代理解决" tabindex="-1"><a class="header-anchor" href="#使用代理解决"><span>使用代理解决</span></a></h3><p>使用代理解决，vue框架自带了代理转发，在vue配置文件中增加如下配置解决：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>    proxyTable: {</span></span>
<span class="line"><span>      // 这里就是代理了</span></span>
<span class="line"><span>      &#39;/apis&#39;: {</span></span>
<span class="line"><span>        target: &#39;http://127.0.0.1:8000/apis/&#39;,   //设置你调用的接口域名和端口号 别忘了加http，就是后台服务地址</span></span>
<span class="line"><span>        changeOrigin: true,</span></span>
<span class="line"><span>        pathRewrite: {</span></span>
<span class="line"><span>          &#39;^/apis&#39;: &#39;&#39;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    },</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在生产环境中，还可以使用Nignx作为代理来解决跨域问题。</p><p>以上两种方式，便是前后端分离中最常用的跨域解决方案了，除了这两种方案，还有如下几种：</p><ul><li>jsonp</li><li>location.hash 跨域</li><li>postMessage 跨域</li><li>window.name 跨域</li><li>document.domain 跨域</li></ul><p>这些都不常用，文本暂不讨论。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>至此，在前后端分离中，跨域问题及解决方案便讨论完了。跨域问题，不了解的朋友会一头雾水，了解之后解决便可信手拈来。针对 vue+django 架构中的两种解决方案，使用一种即可解决跨域。在使用CORS方案时，携带Cookie时，注意增加相关配置。其他后端框架大都有成熟的组件支持，与django配置参数类似，大家可触类旁通。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener noreferrer">XMLHttpRequest</a></li><li><a href="https://www.cnblogs.com/laixiangran/p/9064769.html" target="_blank" rel="noopener noreferrer">浏览器同源策略</a></li></ul>`,41)])])}const o=n(r,[["render",t]]),h=JSON.parse('{"path":"/pages/b7989a/","title":"谈谈前后端分离中的跨域问题 - 杂谈","lang":"zh-CN","frontmatter":{"title":"谈谈前后端分离中的跨域问题 - 杂谈","tags":["前后端分离","跨域"],"permalink":"/pages/b7989a/","createTime":"2023/09/08 17:36:02","description":"在前后端分离开发过程中常常出现下面这样的错误提示： 看到关键字CORS、Access-Control-Allow-Origin 可以判断基本上就是跨域相关的错误了。 不了解的人常常一头雾水，本文咱们就来具体探讨下这种跨域问题，彻底搞懂它，解决它。 什么是跨域？造成跨域的原因？ 跨域问题是由浏览器的同源策略引起的，在后端编程语言的Http Client调...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"谈谈前后端分离中的跨域问题 - 杂谈\\",\\"image\\":[\\"https://pylixm.top/imgs/cross_origin/cross_origin.png\\",\\"https://pylixm.top/imgs/cross_origin/xhr.png\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/b7989a/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"谈谈前后端分离中的跨域问题 - 杂谈"}],["meta",{"property":"og:description","content":"在前后端分离开发过程中常常出现下面这样的错误提示： 看到关键字CORS、Access-Control-Allow-Origin 可以判断基本上就是跨域相关的错误了。 不了解的人常常一头雾水，本文咱们就来具体探讨下这种跨域问题，彻底搞懂它，解决它。 什么是跨域？造成跨域的原因？ 跨域问题是由浏览器的同源策略引起的，在后端编程语言的Http Client调..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pylixm.top/imgs/cross_origin/cross_origin.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"跨域"}],["meta",{"property":"article:tag","content":"前后端分离"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":5.01,"words":1503},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"09.杂谈/01.Ack-cross-origin.md","headers":[],"categoryList":[{"id":"224263","sort":9,"name":"杂谈"}]}');export{o as comp,h as data};
