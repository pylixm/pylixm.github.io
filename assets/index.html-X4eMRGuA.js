import{_ as e,c as i,a as n,o as a}from"./app-DdES4ywf.js";const l={};function p(t,s){return a(),i("div",null,[...s[0]||(s[0]=[n(`<p>最近常看到<code>pipenv</code>这个管理工具，今天有时间查了下，是 <a href="https://www.kennethreitz.org/values" target="_blank" rel="noopener noreferrer">Kennethreitz</a> 大神的作品，看了下github的仓库，是2017年1月份创建的，仅仅一年的时间变获得了7k+的收藏，最新一次的提交时间为2天前，可见该仓库活跃程度。自己之前写过一篇文章<a href="http://www.pylixm.cc/posts/2016-06-19-Virtualenv-install.html" target="_blank" rel="noopener noreferrer">《使用 pyenv + virtualenv 打造多版本python开发环境》</a>,遗留个问题，一直没有找到合理的同时管理python和python依赖包的工具，试用了下 <code>pipenv</code>，可以说完美的解决了python版本及包的管理问题。并且<code>pipebv</code> 还是<code>Python.org</code>正式推荐的python包管理工具。原文如下：</p><blockquote><p>Pipenv — the officially recommended Python packaging tool from Python.org, free (as in freedom).</p></blockquote><p>那么接下来，分享下我的试用过程，供大家参考：</p><h2 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作"><span>准备工作</span></a></h2><h3 id="试用环境及相关文档" tabindex="-1"><a class="header-anchor" href="#试用环境及相关文档"><span>试用环境及相关文档</span></a></h3><p><strong>环境</strong></p><ul><li>pipenv 9.0.1</li><li>python3.6</li><li>python2.7</li></ul><p><strong>文档</strong></p><ul><li>github仓库地址：<a href="https://github.com/pypa/pipenv" target="_blank" rel="noopener noreferrer">pipenv</a></li><li><a href="https://docs.pipenv.org/" target="_blank" rel="noopener noreferrer">pipenv 官方文档</a></li></ul><h3 id="pipenv-基本概念理解" tabindex="-1"><a class="header-anchor" href="#pipenv-基本概念理解"><span>pipenv 基本概念理解</span></a></h3><ol><li>之前我们使用pip + virtualenv 来管理python依赖包，使用 <code>--python=</code>参数来区分python版本（不再使用pyenv,减少包依赖）。而pipenv的思路简单理解便是把pip和virutalenv 2个工具统一起来，使用 <code>pipenv</code> 来代替。</li><li><code>pipenv</code> 使用 Pipfile 来代替 requirement.txt 文件记录python包。</li><li>增加了<code>Pipfile.lock</code> 文件来锁定python软件的包名及版本，以及其依赖关系的列表。</li><li>它参考了其他语言的包管理工具（bundler, composer, npm, cargo, yarn, etc.），旨在将最好的包管理工具带入python世界。</li></ol><h2 id="pipenv-功能试用" tabindex="-1"><a class="header-anchor" href="#pipenv-功能试用"><span>pipenv 功能试用</span></a></h2><h3 id="pipenv-安装" tabindex="-1"><a class="header-anchor" href="#pipenv-安装"><span>pipenv 安装</span></a></h3><h4 id="普通安装" tabindex="-1"><a class="header-anchor" href="#普通安装"><span>普通安装</span></a></h4><p><code>pipenv</code> 可使用 pip 直接安装。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>pip install pipenv</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>作者推荐在<code>python3</code>下边安装，会提高与virtualenv的兼容性。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>The use of Python 3 is highly preferred over Python 2, when installing Pipenv. Compatibility with three virtualenvs is greatly improved when using Python 3 as the installation target.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>—Kenneth Reitz</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用户模式安装" tabindex="-1"><a class="header-anchor" href="#用户模式安装"><span>用户模式安装</span></a></h4><p>为防止和系统python库产生影响，可使用此种方案安装。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>pip install --user pipenv</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>pip 默认安装包路径为<code>/usr/local/lib/python2.7/site-packages</code>。此模式下，pip安装包保存路径为用户库路径,一般为<code>/Users/pylixm/Library/Python/3.6/lib/python/site-packages</code>, 可使用命令<code>python3 -m site --user-site</code> 具体查看。如果在安装后你的shell中pipenv不可用，你需要把用户库的二进制目录<code>/Users/pylixm/Library/Python/3.6/bin</code>添加到你的PATH中。</p><h3 id="pipenv-使用" tabindex="-1"><a class="header-anchor" href="#pipenv-使用"><span>pipenv 使用</span></a></h3><h4 id="初始化虚拟环境" tabindex="-1"><a class="header-anchor" href="#初始化虚拟环境"><span>初始化虚拟环境</span></a></h4><p>执行<code>pipenv install</code>，创建虚拟环境，如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>~/laboratory/pip_test_project ⌚ 20:42:10</span></span>
<span class="line"><span>$ pipenv install</span></span>
<span class="line"><span>Creating a virtualenv for this project…</span></span>
<span class="line"><span>⠋New python executable in /Users/pylixm/.local/share/virtualenvs/pip_test_project-MXA0TC90/bin/python2.7</span></span>
<span class="line"><span>Also creating executable in /Users/pylixm/.local/share/virtualenvs/pip_test_project-MXA0TC90/bin/python</span></span>
<span class="line"><span>Installing setuptools, pip, wheel...done.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Virtualenv location: /Users/pylixm/.local/share/virtualenvs/pip_test_project-MXA0TC90</span></span>
<span class="line"><span>Creating a Pipfile for this project…</span></span>
<span class="line"><span>Pipfile.lock not found, creating…</span></span>
<span class="line"><span>Locking [dev-packages] dependencies…</span></span>
<span class="line"><span>Locking [packages] dependencies…</span></span>
<span class="line"><span>Updated Pipfile.lock (c23e27)!</span></span>
<span class="line"><span>Installing dependencies from Pipfile.lock (c23e27)…</span></span>
<span class="line"><span>▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 0/0 — 00:00:00</span></span>
<span class="line"><span>To activate this project&#39;s virtualenv, run the following:</span></span>
<span class="line"><span> $ pipenv shell</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从打印信息可见，它在目录用户目录<code>.local</code>下创建了个和项目同名的虚拟环境(可通过配置环境变量来自定义虚拟环境目录，<code>export WORKON_HOME=~/.venvs</code>)，python使用的是默认的python2.7 。 可通过参数<code>--two</code> 和<code>--three</code> 来泛指python版本，也可通过<code>--python 3.5</code> 来明确知道python版本，但是这些参数的前提是你系统上有此python版本，否则会报如下错误：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>$ pipenv --python 3.5</span></span>
<span class="line"><span>Warning: Python 3.5 was not found on your system…</span></span>
<span class="line"><span>You can specify specific versions of Python with:</span></span>
<span class="line"><span>  $ pipenv --python path/to/python</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有点像 virtualenv 的 <code>--python</code>参数。</p><p>初始化好虚拟环境后，会在项目目录下生成2个文件<code>Pipfile</code>和<code>Pipfile.lock</code>。为pipenv包的配置文件，代替原来的 requirement.txt。项目提交时，可将<code>Pipfile</code> 文件和<code>Pipfile.lock</code>文件受控提交,待其他开发克隆下载，根据此Pipfile 运行命令<code>pipenv install [--dev]</code>生成自己的虚拟环境。</p><p><code>Pipfile.lock</code> 文件是通过hash算法将包的名称和版本，及依赖关系生成哈希值，可以保证包的完整性。</p><h4 id="安装python模块" tabindex="-1"><a class="header-anchor" href="#安装python模块"><span>安装python模块</span></a></h4><h5 id="正常安装" tabindex="-1"><a class="header-anchor" href="#正常安装"><span>正常安装</span></a></h5><p>安装 <code>requests</code> 模块：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>$ pipenv install requests</span></span>
<span class="line"><span>Installing requests…</span></span>
<span class="line"><span>Collecting requests</span></span>
<span class="line"><span>  Using cached requests-2.18.4-py2.py3-none-any.whl</span></span>
<span class="line"><span>Collecting certifi&gt;=2017.4.17 (from requests)</span></span>
<span class="line"><span>  Using cached certifi-2017.11.5-py2.py3-none-any.whl</span></span>
<span class="line"><span>Collecting idna&lt;2.7,&gt;=2.5 (from requests)</span></span>
<span class="line"><span>  Using cached idna-2.6-py2.py3-none-any.whl</span></span>
<span class="line"><span>Collecting urllib3&lt;1.23,&gt;=1.21.1 (from requests)</span></span>
<span class="line"><span>  Using cached urllib3-1.22-py2.py3-none-any.whl</span></span>
<span class="line"><span>Collecting chardet&lt;3.1.0,&gt;=3.0.2 (from requests)</span></span>
<span class="line"><span>  Using cached chardet-3.0.4-py2.py3-none-any.whl</span></span>
<span class="line"><span>Installing collected packages: certifi, idna, urllib3, chardet, requests</span></span>
<span class="line"><span>Successfully installed certifi-2017.11.5 chardet-3.0.4 idna-2.6 requests-2.18.4 urllib3-1.22</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Adding requests to Pipfile&#39;s [packages]…</span></span>
<span class="line"><span>  PS: You have excellent taste!</span></span>
<span class="line"><span>Locking [dev-packages] dependencies…</span></span>
<span class="line"><span>Locking [packages] dependencies…</span></span>
<span class="line"><span>Updated Pipfile.lock (2f8679)!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可通过命令<code>pipenv graph</code> 查看已安装模块，同时可查看他们直接的相互依赖情况。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pipenv</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> graph</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">requests</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">=2.18.4</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> certifi</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [required: </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">=2017.4.17,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> installed:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 2017.11.5]</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> chardet</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [required: </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">3.1.0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">=3.0.2,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> installed:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 3.0.4]</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> idna</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [required: </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">=2.5,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">2.7,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> installed:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 2.6]</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> urllib3</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [required: </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">=1.21.1,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1.23,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> installed:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 1.22]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="只安装开发环境" tabindex="-1"><a class="header-anchor" href="#只安装开发环境"><span>只安装开发环境</span></a></h5><p>可通过以下命令，仅安装在开发环境,</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>pipenv install --dev requests --three</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>区别反映在<code>Pipfile</code> 上为:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>[[source]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>url = &quot;https://pypi.python.org/simple&quot;</span></span>
<span class="line"><span>verify_ssl = true</span></span>
<span class="line"><span>name = &quot;pypi&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[dev-packages]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>[packages]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>requests = &quot;*&quot;</span></span>
<span class="line"><span>flask = &quot;==0.10&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[requires]</span></span>
<span class="line"><span>python_version = &quot;3.6&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装包记录是在<code>[dev-packages]</code> 部分，还是<code>[packages]</code> 部分。在安装时，指定<code>--dev</code>参数，则只安装<code>[dev-packages]</code>下的包,若安装时不定指定<code>--dev</code>参数，只会安装<code>[packages]</code> 包下面的模块。</p><p><code>[requires]</code> 下的python在构建新的虚拟环境时，若没有会自动下载安装。</p><h5 id="通过-requirements-txt-安装" tabindex="-1"><a class="header-anchor" href="#通过-requirements-txt-安装"><span>通过 requirements.txt 安装</span></a></h5><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>pipenv install -r requirements.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样我们可以重用之前的requirement.txt 文件来构建我们新的开发环境，可以把我们的项目顺利的迁到pipenv。</p><p>可通过以下命令生成requirements 文件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>pipenv lock -r [--dev] &gt; requirements.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="运行虚拟环境" tabindex="-1"><a class="header-anchor" href="#运行虚拟环境"><span>运行虚拟环境</span></a></h4><p>可使用以下命令来运行项目：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>pipenv run python xxx.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者启动虚拟环境的shell环境：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>~/laboratory/pip_test_project</span></span>
<span class="line"><span>$ pipenv shell --anyway</span></span>
<span class="line"><span>Spawning environment shell (/bin/zsh). Use &#39;exit&#39; to leave.</span></span>
<span class="line"><span>source /Users/pylixm/.local/share/virtualenvs/pip_test_project-MXA0TC90/bin/activate</span></span>
<span class="line"><span></span></span>
<span class="line"><span>~/laboratory/pip_test_project </span></span>
<span class="line"><span>$ source /Users/pylixm/.local/share/virtualenvs/pip_test_project-MXA0TC90/bin/activate</span></span>
<span class="line"><span>(pip_test_project-MXA0TC90)</span></span>
<span class="line"><span>~/laboratory/pip_test_project</span></span>
<span class="line"><span>$ exit</span></span>
<span class="line"><span></span></span>
<span class="line"><span>~/laboratory/pip_test_project</span></span>
<span class="line"><span>$ pipenv shell</span></span>
<span class="line"><span>Shell for UNKNOWN_VIRTUAL_ENVIRONMENT already activated.</span></span>
<span class="line"><span>No action taken to avoid nested environments.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接运行<code>pipenv shell</code> 并不会出现shell命令行，是应为没有配置环境变量。还需要进一步研究，貌似需要配置环境变了，一直没找到。</p><p><code>pipenv</code> 提供了<code>.env</code> 文件，放在项目目录下，提供项目所需的环境变量，运行<code>pipenv shell</code> 时，会自动加载。</p><h4 id="删除虚拟环境及包" tabindex="-1"><a class="header-anchor" href="#删除虚拟环境及包"><span>删除虚拟环境及包</span></a></h4><p>删除包:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>pipenv uninstall reuqests</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>删除虚拟环境：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>pipenv --rm</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li><code>pipenv</code> 完美的解决了python的包和版本的管理。</li><li>并对包之间的依赖关系也管理起来，方便了开发者构建自己的开发运行环境。</li></ul><p>时间有限，以上列举的仅为部分功能，更多的强大功能详见<a href="https://docs.pipenv.org/" target="_blank" rel="noopener noreferrer">官方文档</a>。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://docs.pipenv.org/" target="_blank" rel="noopener noreferrer">https://docs.pipenv.org/</a></li></ul>`,66)])])}const r=e(l,[["render",p]]),c=JSON.parse('{"path":"/pages/86b3a0/","title":"「Python Tips」 - pipenv 试用过程分享","lang":"zh-CN","frontmatter":{"title":"「Python Tips」 - pipenv 试用过程分享","tags":["Python","pipenv"],"permalink":"/pages/86b3a0/","createTime":"2023/09/08 17:36:02","description":"最近常看到pipenv这个管理工具，今天有时间查了下，是 Kennethreitz 大神的作品，看了下github的仓库，是2017年1月份创建的，仅仅一年的时间变获得了7k+的收藏，最新一次的提交时间为2天前，可见该仓库活跃程度。自己之前写过一篇文章《使用 pyenv + virtualenv 打造多版本python开发环境》,遗留个问题，一直没有找...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"「Python Tips」 - pipenv 试用过程分享\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/86b3a0/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"「Python Tips」 - pipenv 试用过程分享"}],["meta",{"property":"og:description","content":"最近常看到pipenv这个管理工具，今天有时间查了下，是 Kennethreitz 大神的作品，看了下github的仓库，是2017年1月份创建的，仅仅一年的时间变获得了7k+的收藏，最新一次的提交时间为2天前，可见该仓库活跃程度。自己之前写过一篇文章《使用 pyenv + virtualenv 打造多版本python开发环境》,遗留个问题，一直没有找..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"pipenv"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":5.4,"words":1619},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"01.开发语言/01.Python/01.语言特性/07.Python-basis-pipenv.md","headers":[],"categoryList":[{"id":"59843f","sort":1,"name":"开发语言"},{"id":"9d2a49","sort":1,"name":"Python"},{"id":"406962","sort":1,"name":"语言特性"}]}');export{r as comp,c as data};
