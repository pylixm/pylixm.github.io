import{_ as s,c as a,a as i,o as t}from"./app-DdES4ywf.js";const n="/imgs/ibex-arch.jpg",p={};function o(l,e){return t(),a("div",null,[...e[0]||(e[0]=[i(`<blockquote><p>本篇为夜莺黄埔营直播第二场之后的一些总结和思考，希望对大家有帮助。</p></blockquote><p>夜莺黄埔营（如果感兴趣，可以搜索到他们的官网，加入 QQ 群，培训完全免费）第二场主要从夜莺的基本功能出发对夜莺的所有功能介绍了一遍，我看的回放，时间原因，直播老师讲解的比较快，我就自身的一些 V5 使用经验来和大家分享下吧。</p><h2 id="标签" tabindex="-1"><a class="header-anchor" href="#标签"><span>标签</span></a></h2><p><code>标签</code>在 Prometheus 的数据生态中，可谓是非常重要的概念，主要使用它来标识和分类数据样本。可以通过不同的标签标识不同的样本，在查询和聚合时进行区分和过滤，使用非常灵活和方便。</p><p>夜莺时序数据源为遵循 Prometheus 相关协议的时序数据库，所以Prometheus上标签的特性和优点也继承了过来。</p><p>在使用 categraf 或 telegraf 等采集端采集的时候，各插件会给采集数据打上预先设置好的标签，例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span># 磁盘使用情况</span></span>
<span class="line"><span>disk_used{device=&quot;obsfs&quot;, fstype=&quot;fuse.obsfs&quot;, ident=&quot;test1&quot;, mode=&quot;rw&quot;, path=&quot;/data&quot;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们便可以根据标签 path 来配置具体报警监控的目录。</p><p>标签标记的好坏，直接影响到数据的可用性。下边是我司的一些使用方式，供大家参考：</p><ul><li><p>针对机房、可用区标记专门的标签，可针对整个机房或可用区多模糊匹配来做监控或屏蔽。如：<code>region=shanghai</code> <code>az=d</code>；</p></li><li><p>针对产品线、服务池标记专门的标签，可针对产品线或服务应用集群做监控或屏蔽。如：<code>bg=产品线1</code> <code>service=seervice1</code>；</p></li><li><p>其他特殊用途，需要分组的情况。</p></li></ul><p>打上上述标签后，我们的数据可能是这样的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>disk_used{device=&quot;obsfs&quot;, fstype=&quot;fuse.obsfs&quot;, ident=&quot;test1&quot;, ip=&quot;192.168.1.5&quot;, mode=&quot;rw&quot;, path=&quot;/data&quot;, bg=&quot;产品线1&quot;, serivce=&quot;service1&quot;, region=&quot;shanghai&quot;, az=&quot;d&quot;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过 V5 版本的使用，在整个数据采集的链路中，可以给数据打标签的地方主要有下边几点：</p><ul><li><p><code>采集agent</code>，categraf 和telegraf 都支持在采集数据时，添加全局的自定义的标签。上边数据的ip，便是我们这里打上的。</p></li><li><p><code>对象列表中</code>，标记自定义标签，这里的标记是针对对象所有采集数据的。和agent 的全局tag，相同的效果。</p></li><li><p><code>监控规则标签</code>，该标签是用来区分监控规则的，不会标记到时序数据上，但是当我们来看报警时，报警数据的标签是会附带着这条tag标签的。</p></li></ul><p>上边是针对<code>标签</code>的一些使用配置心得。</p><h2 id="自愈" tabindex="-1"><a class="header-anchor" href="#自愈"><span>自愈</span></a></h2><p>夜莺中的自愈，依赖外部命令执行通道 <a href="https://flashcat.cloud/docs/content/flashcat-monitor/nightingale/install/ibex/" target="_blank" rel="noopener noreferrer">Ibex</a> 服务。Ibex 分为server 端和agent 端，agent 周期性调用 server 的 rpc 接口，查询自己需要执行的任务脚本来执行。最新的 categraf 已经集成了 ibex 的agent 模块，可用直接启用。</p><p>在新资源部署时，直接部署categraf并启用 ibex 便可使用。但是，在存量的资源节点中，各公司都可能会有自己的命令行下发通道，比如 ansible 、saltstack 等。重复的部署命令行下发通道，不仅增加了维护成本，占用机器资源，还可能会有安全风险。</p><p>分享下我司的一个部署架构，利用 ansible 来充当命令执行通道：</p><p><img src="`+n+`" alt=""></p><p><code>ibex-agent</code> 只部署ansible的控制端节点就好了，无需全部部署启用。整个自愈控制流程是这样的，当有报警触发时，会回调 <code>ibex-server</code> 接口创建任务，<code>ibex-agent</code> 定制查询到自己处理的任务时，执行脚本，脚本中会编写ansible的执行命令。中间多了一个中转脚本，但是不需要所有节点部署<code>ibex-agent</code>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span># e.g.</span></span>
<span class="line"><span># export PATH=/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:~/bin</span></span>
<span class="line"><span># ss -tln</span></span>
<span class="line"><span></span></span>
<span class="line"><span>echo &#39;test1&#39; &gt; ansible_hosts </span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>ansible -i ansible_hosts test1  -m shell -a &quot;echo &#39;&#39; &gt; /opt/backend/logs/nginx/access.log&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上边是一个中转脚本，简单操作可直接通过 ansible 命令来实现，复杂的可再次通过 ansible script模块去执行复杂的脚本来实现。</p><h2 id="思考" tabindex="-1"><a class="header-anchor" href="#思考"><span>思考</span></a></h2><p>自愈这块，就像夜莺官网说的：</p><blockquote><p>所谓的告警自愈，典型手段是在告警触发时自动回调某个 webhook 地址，在这个 webhook 里写告警自愈的逻辑，夜莺默认支持这种方式。另外，夜莺还可以更进一步，配合 ibex 这个模块，在告警触发的时候，自动去告警的机器执行某个脚本，这种机制可以大幅简化构建运维自愈链路的工作量，毕竟，不是所有的运维人员都擅长写 http server，但所有的运维人员，都擅长写脚本。这种方式是典型的物理机时代的产物，希望各位朋友用不到这个工具（说明贵司的IT技术已经走得非常靠前了）。</p></blockquote><p>这中方式是比较简单的好实现的，但是它又是不够严谨的，服务的自愈是需要经过严格的论证分析的，并非简单的执行一个脚本。</p><p>当然，ibex 这种自愈方式已经可以帮我们解决很多运维工作的琐碎问题。</p><p>以上为今天的分享，欢迎留言交流。</p>`,29)])])}const c=s(p,[["render",o]]),d=JSON.parse('{"path":"/pages/9cadfa/%20-%20%E7%9B%91%E6%8E%A7","title":"夜莺 V6 之标签和自愈","lang":"zh-CN","frontmatter":{"title":"夜莺 V6 之标签和自愈","permalink":"/pages/9cadfa/ - 监控","tags":[null],"createTime":"2023/09/08 17:36:02","description":"本篇为夜莺黄埔营直播第二场之后的一些总结和思考，希望对大家有帮助。 夜莺黄埔营（如果感兴趣，可以搜索到他们的官网，加入 QQ 群，培训完全免费）第二场主要从夜莺的基本功能出发对夜莺的所有功能介绍了一遍，我看的回放，时间原因，直播老师讲解的比较快，我就自身的一些 V5 使用经验来和大家分享下吧。 标签 标签在 Prometheus 的数据生态中，可谓是非...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"夜莺 V6 之标签和自愈\\",\\"image\\":[\\"https://pylixm.top/imgs/ibex-arch.jpg\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/9cadfa/%20-%20%E7%9B%91%E6%8E%A7"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"夜莺 V6 之标签和自愈"}],["meta",{"property":"og:description","content":"本篇为夜莺黄埔营直播第二场之后的一些总结和思考，希望对大家有帮助。 夜莺黄埔营（如果感兴趣，可以搜索到他们的官网，加入 QQ 群，培训完全免费）第二场主要从夜莺的基本功能出发对夜莺的所有功能介绍了一遍，我看的回放，时间原因，直播老师讲解的比较快，我就自身的一些 V5 使用经验来和大家分享下吧。 标签 标签在 Prometheus 的数据生态中，可谓是非..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pylixm.top/imgs/ibex-arch.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":4.59,"words":1377},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"05.运维/04.监控/02.n9e黄埔培训02.md","headers":[],"categoryList":[{"id":"8091bd","sort":5,"name":"运维"},{"id":"b261bd","sort":4,"name":"监控"}]}');export{c as comp,d as data};
