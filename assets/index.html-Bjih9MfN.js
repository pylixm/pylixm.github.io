import{_ as p,c as i,a as e,o as a}from"./app-DdES4ywf.js";const t="/imgs/puppet/master-agent.jpg",n="/imgs/puppet/resource.png",l="/imgs/puppet/puppet-block.jpg",h={};function r(d,s){return a(),i("div",null,[...s[0]||(s[0]=[e(`<p>本文为译文，原文<a href="https://www.guru99.com/puppet-tutorial.html" target="_blank" rel="noopener noreferrer">Puppet Tutorial for Beginners: Resources, Classes, Manifest, Modules</a>，主要讲解了<code>Puppet</code>工具的基本概念和用法。作为快速了解和备忘正合适，翻译记录，希望对大家有用，下面为译文。</p><hr><p>在了解<code>Puppet</code> 之前我们先来看下：什么是配置管理？</p><p>配置管理是将软件和计算机系统（如服务器，存储，网络）维持在已知的，期望的和一致的状态下的一个过程。它还允许你查看该状态的历史，以便用于项目管理和审计。</p><p>系统管理员常常需要执行许多重复性的工作，比如安装服务器、配置各种服务，他们往往写些服务安装的脚本来简化工作。当服务器台数增加到一定规模，脚本这种方式就不现实了。</p><p>Puppet 可以很好的解决上边说的问题。</p><h2 id="什么是puppet" tabindex="-1"><a class="header-anchor" href="#什么是puppet"><span>什么是Puppet</span></a></h2><p>Puppet是一个开源的DevOps系统管理工具，用于集中配置管理和自动化配置管理。它常用于在整个基础架构中的配置和部署管理，及编排各种应用程序和服务，包括批量实现包安装、升级或删除，文件系统创建，用户创建或删除，服务器重启，IP配置更改等。</p><p>Puppet 可使用与Linux 和 Windows 系统。基于Ruby 语言开发，使用它自己特有的一种语言（Domain Specific Language - DSL）来编写服务配置文件。</p><h2 id="puppet-版本" tabindex="-1"><a class="header-anchor" href="#puppet-版本"><span>Puppet 版本</span></a></h2><p>Puppet 有两个版本：</p><ul><li><p><strong>开源版本</strong>：它是Puppet配置管理工具的基本版本,也称为Open Source Puppet。你可以从Puppet官网获取，它使用 Apache 2.0 开源许可。</p></li><li><p><strong>企业版本</strong>：它提供合规性报告、业务流程、基于角色的访问控制、GUI、API 和命令行工具等功能的商业版本，让你更有效的管理节点。</p></li></ul><h2 id="puppet-dsl-语法和编程范式" tabindex="-1"><a class="header-anchor" href="#puppet-dsl-语法和编程范式"><span>Puppet DSL 语法和编程范式</span></a></h2><p>在我们学习DSL前，先来了解下编程范式：编程范式是您在计算机编程中使用的一种风格。</p><p>常用的4中范式：</p><ul><li>Imperative. 命令式</li><li>Declarative. 声明式</li><li>Functional 函数式</li><li>Object-oriented. 面向对象</li></ul><p>下面我们主要说下「命令式」和「声明式」：</p><ul><li><p><strong>命令式</strong>：这种编程范式表达了计算的逻辑（怎么做）并描述了它的控制流程（怎么做）。假设您要去办公室，预订出租车并开始一步一步地向司机提供指示，直到您到达办公室。指定要做什么以及如何做是一种必要的风格。</p></li><li><p><strong>声明式</strong>：这种编程范式表达了计算的逻辑（怎么做）而没有描述它的控制流程（怎么做）。假设您要去办公室，预订出租车并指定最终目的地（办公室）。指定不该怎么做的是声明式样式。</p></li></ul><h3 id="puppet-使用声明式编程范式" tabindex="-1"><a class="header-anchor" href="#puppet-使用声明式编程范式"><span>Puppet 使用声明式编程范式</span></a></h3><p>我们用一个例子来说明：创建一个Linux系统用户。</p><p>它可以通过 shell 脚本使用命令式编程模式来完成。脚本大致如下：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#!/bin/bash </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">id</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -u</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -eq</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ];</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">then</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  $username</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">=Puppetuser</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  read</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -s</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Enter password:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> password</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  Egrep</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">^$username</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /etc/passwd</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/null</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> $?</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -eq</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ];</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">then</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">$username exists!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    exit</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  else</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    useradd</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $password</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $username</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    [</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> $?</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -eq</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;&amp;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">User has been added to the system!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">||</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Failed to add a user!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  fi</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而使用Puppet来完成相同的功能，只需要几行代码的配置文件，如下：</p><div class="language-pp line-numbers-mode" data-highlighter="shiki" data-ext="pp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-pp"><span class="line"><span>user { &quot;Puppetuser&quot;:</span></span>
<span class="line"><span>  ensure =&gt; &quot;present&quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体语法可参阅官方文档<a href="https://puppet.com/docs/puppet/5.5/lang_summary.html" target="_blank" rel="noopener noreferrer">puppet 语法最佳指南</a></p><h2 id="配置管理工具常用的部署架构" tabindex="-1"><a class="header-anchor" href="#配置管理工具常用的部署架构"><span>配置管理工具常用的部署架构</span></a></h2><p>业界常用的配置管理工具，有两种部署架构供选择：</p><ul><li>基于push的部署模型：由主节点发起。</li><li>基于pull的部署模型：由代理启动。</li></ul><h3 id="基于push的部署模型" tabindex="-1"><a class="header-anchor" href="#基于push的部署模型"><span>基于push的部署模型</span></a></h3><p>在此部署模型中，主服务器将配置和软件推送到各个代理。验证安全连接后，主服务器会在代理上远程运行命令。如： Ansible和Salt Stack。</p><h3 id="基于pull的部署模型" tabindex="-1"><a class="header-anchor" href="#基于pull的部署模型"><span>基于pull的部署模型</span></a></h3><p>在此部署模型中，各个服务器联系主服务器，验证并建立安全连接，下载其配置和软件，然后相应地进行自我配置。如：Puppet和Chef。</p><h2 id="puppet-是如何工作的" tabindex="-1"><a class="header-anchor" href="#puppet-是如何工作的"><span>Puppet 是如何工作的</span></a></h2><p>Puppet基于Pull部署模型，其中代理节点在每1800秒后定期检查主节点，以查看是否需要在代理节点中更新配置的服务内容。如果需要更新任何内容，代理会从主服务器中提取必要的Puppet代码并执行所需的操作。</p><p><strong>Master 节点</strong></p><p>Master 节点是一台安装了 <code>Puppet master</code> 的Linux服务器。它负责维护Puppet管理的服务的配置。注意，Mater 节点只能为Linux系统。</p><p><strong>Agent 节点</strong></p><p>Agent 节点是安装了 <code>pupept agent</code> 的目标服务器。Agent 节点支持Linux、Windows和Mac系统。</p><p>Master 节点和Agent 节点之间通信通过SSL来确保安全。</p><h3 id="master-和-agent-节点的通信" tabindex="-1"><a class="header-anchor" href="#master-和-agent-节点的通信"><span>Master 和 Agent 节点的通信</span></a></h3><ul><li><p>1、在Agent和Master服务器之间建立连接后，Puppet Agent会将有关其服务状态的数据发送到Puppet Master服务器。 这些被称为<code>facts</code>：此信息包括主机名，内核详细信息，IP地址，文件名详细信息等。</p></li><li><p>2、Puppet Master使用此数据和menifest文件(配置文件)编译一个应用于Agent的配置列表，这个列表被称为<code>catalog</code>。 catalog中描述了一些操作，例如包安装，升级或删除，文件系统创建，用户创建或删除，服务器重启，IP配置更改等。</p></li><li><p>3、Agent 在节点上应用此配置列表。如果配置中没有变动，则代理不会执行任何配置更改。</p></li><li><p>4、完成后，Agent 向 Puppet Master 报告，表明配置已应用并完成。</p></li></ul><p><img src="`+t+'" alt=""></p><p><span style="algin:center;">图片来源：http://www.zsythink.net/archives/201 </span></p><h2 id="puppet-相关概念" tabindex="-1"><a class="header-anchor" href="#puppet-相关概念"><span>Puppet 相关概念</span></a></h2><p>Puppet 四个重要的概念：</p><ul><li>Resource 资源</li><li>Class 类</li><li>Manifest 清单</li><li>Modules 模块</li></ul><h3 id="puppet-resouce" tabindex="-1"><a class="header-anchor" href="#puppet-resouce"><span>Puppet Resouce</span></a></h3><p>资源是Puppet 配置文件的构建基础。资源是在后端运行的内置函数，用于在puppet中执行所需的操作。通常，系统由files，users，services，processes，packages等组成。</p><p>在Puppet中，这些称为资源。资源是Puppet中的基本构建块。在Puppet中，所有的操作都是借助资源来完成的。</p><p>我们可以使用单个资源来完成任务和操作，也可以组合多个资源完成更复杂的服务配置。</p><p>常用的资源对应我们想要操作的对象，大致如下：</p><p><img src="'+n+'" alt=""></p><p>资源也有不同的类型，Puppet通过资源和资源类型，描述系统的配置。</p><p>资源大致分为以下三种类型：</p><ul><li>Puppet 核心和内建的资源类型：核心或内置资源类型是puppet软件附带的预构建的puppet资源类型。所有核心或内置Puppet资源类型都由Puppet团队编写和维护。</li><li>Puppet 定义的资源类型：定义的资源类型是使用现有资源类型的组合以Puppet声明性语言编写的轻量级资源类型。</li><li>自定义的Puppet 资源类型：自定义资源类型是用Ruby编写的完全自定义的资源类型。</li></ul><h3 id="puppet-class" tabindex="-1"><a class="header-anchor" href="#puppet-class"><span>Puppet Class</span></a></h3><p>可以将不同资源的组合组合在一起，形成一个称为类的单元。</p><h3 id="puppet-manifest" tabindex="-1"><a class="header-anchor" href="#puppet-manifest"><span>Puppet Manifest</span></a></h3><p>Manifest是一个包含puppet DSL文件的目录。这些文件的扩展名为.pp。 .pp扩展名代表Puppet程序。 puppet代码由Puppet Classes的定义或声明组成。</p><h3 id="puppet-modules" tabindex="-1"><a class="header-anchor" href="#puppet-modules"><span>Puppet Modules</span></a></h3><p>模块是文件和目录的集合，像是Manifast和Class的定义。它们是Puppet中可重复使用和可共享的单元。</p><p>puppet 支持的模块及各系统兼容性，可参考 <a href="https://forge.puppet.com/supported" target="_blank" rel="noopener noreferrer">这里</a>。</p><p>他们的关系大致如下：</p><p><img src="'+l+'" alt=""></p><h2 id="扩展阅读" tabindex="-1"><a class="header-anchor" href="#扩展阅读"><span>扩展阅读</span></a></h2><ul><li>http://www.zsythink.net/archives/185</li><li>https://blog.csdn.net/xuejinliang/article/details/52923095</li><li>https://www.upguard.com/articles/open-source-puppet-vs.-puppet-enterprise-which-is-right-for-you</li><li>可作为puppet的GUI替代方案：https://www.theforeman.org/</li></ul><p>到这里，大家对运维中的配置管理工具Puppet的基本概念和工作原理，应该有大致的了解，后面的文章我会分享下如何简单的使用。</p>',67)])])}const k=p(h,[["render",r]]),o=JSON.parse('{"path":"/pages/e73890/","title":"「译」Puppet 简单入门 - 理论篇","lang":"zh-CN","frontmatter":{"title":"「译」Puppet 简单入门 - 理论篇","tags":["Puppet","运维知识库","翻译"],"permalink":"/pages/e73890/","createTime":"2023/09/08 17:36:02","description":"本文为译文，原文Puppet Tutorial for Beginners: Resources, Classes, Manifest, Modules，主要讲解了Puppet工具的基本概念和用法。作为快速了解和备忘正合适，翻译记录，希望对大家有用，下面为译文。 在了解Puppet 之前我们先来看下：什么是配置管理？ 配置管理是将软件和计算机系统（如服...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"「译」Puppet 简单入门 - 理论篇\\",\\"image\\":[\\"https://pylixm.top/imgs/puppet/master-agent.jpg\\",\\"https://pylixm.top/imgs/puppet/resource.png\\",\\"https://pylixm.top/imgs/puppet/puppet-block.jpg\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/e73890/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"「译」Puppet 简单入门 - 理论篇"}],["meta",{"property":"og:description","content":"本文为译文，原文Puppet Tutorial for Beginners: Resources, Classes, Manifest, Modules，主要讲解了Puppet工具的基本概念和用法。作为快速了解和备忘正合适，翻译记录，希望对大家有用，下面为译文。 在了解Puppet 之前我们先来看下：什么是配置管理？ 配置管理是将软件和计算机系统（如服..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pylixm.top/imgs/puppet/master-agent.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"翻译"}],["meta",{"property":"article:tag","content":"运维知识库"}],["meta",{"property":"article:tag","content":"Puppet"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":6.91,"words":2072},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"05.运维/30.puppet/01.Puppet-intraduction.md","headers":[],"categoryList":[{"id":"8091bd","sort":5,"name":"运维"},{"id":"ae84fd","sort":30,"name":"puppet"}]}');export{k as comp,o as data};
