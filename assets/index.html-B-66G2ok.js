import{_ as a,c as n,a as s,o as r}from"./app-DdES4ywf.js";const i={};function l(p,e){return r(),n("div",null,[...e[0]||(e[0]=[s(`<p>最近几年Docker容器技术已经渗透到各技术领域，在自动化运维领域更胜，因为它对于代码的部署上可以说是革命性的。下面是我学习Docker，记录的一些笔记，方便日后回忆备查。</p><h2 id="docker-是什么" tabindex="-1"><a class="header-anchor" href="#docker-是什么"><span>Docker 是什么</span></a></h2><p>Docker 是一种轻量级的虚拟化技术，是一种Linux容器（Linux Containers，缩写为 LXC）技术的封装。</p><p>大多数人可能知道虚拟机，可以在一台硬件机器上虚拟出另一台计算机，有它自己的cpu、硬盘等各种虚拟的硬件。而 Linux 容器技术也是一种虚拟技术，但是它并非直接从硬件上来虚拟，而是通过软件技术对进程及资源进行隔离，从而达到虚拟化的目的。Docker 就是一种这样隔离虚拟化技术。</p><h2 id="docker-能做什么" tabindex="-1"><a class="header-anchor" href="#docker-能做什么"><span>Docker 能做什么</span></a></h2><p>Docker 可以做什么，从虚拟化角度来说，它可以完成如下功能：</p><ul><li>隔离应用依赖</li><li>创建应用镜像并进行复制</li><li>创建容易分发的即启即用的应用</li><li>允许实例简单、快速地扩展</li><li>测试应用并随后销毁它们</li></ul><p>Docker背后的想法是<strong>创建软件程序可移植的轻量容器</strong></p><p>但是，对应整个软件开发流程来说，特别是测试和发布部署的意义非凡。</p><h2 id="docker-优势" tabindex="-1"><a class="header-anchor" href="#docker-优势"><span>Docker 优势</span></a></h2><p>Docker 发展之迅速，除了分布式和微服务的大潮外，还得益于其优秀的特性。</p><p><strong>更高效的利用系统资源</strong></p><p>Docker 容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。</p><p><strong>更快速的启动时间</strong></p><p>Docker 直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</p><p><strong>一致的运行环境</strong></p><p>Docker 容器中有镜像的概念，Docker 容器有镜像生成，镜像保证了除内核外的运行环境。</p><p><strong>持续交付和部署</strong></p><p>也是因为镜像技术，可以使Devops人员实现持续集成、持续交付、部署，一次构建可在任意地方运行。</p><p><strong>更轻松的迁移</strong></p><p>Docker 容器封装了软件运行环境，使其不依赖系统，使其更容易移植。</p><p><strong>更轻松的维护和扩展</strong></p><p>Docker 使用分层存储和镜像技术，使得镜像可重复使用，维护和扩展更轻松。</p><h2 id="docker-基本实现原理" tabindex="-1"><a class="header-anchor" href="#docker-基本实现原理"><span>Docker 基本实现原理</span></a></h2><p>Docker 的进程和资源隔离，基于 Linux 内核的cgroup，namespace，以及 AUFS 类的 Union FS 等技术实现的。</p><h3 id="namespace-资源隔离" tabindex="-1"><a class="header-anchor" href="#namespace-资源隔离"><span>NameSpace -- 资源隔离</span></a></h3><ul><li>充当隔离的第一级，确保一个容器中运行一个进程而且不能看到和影响容器外的其他进程。</li></ul><h3 id="cgroups-control-group-资源限制" tabindex="-1"><a class="header-anchor" href="#cgroups-control-group-资源限制"><span>Cgroups(Control Group) -- 资源限制</span></a></h3><ul><li>限制Linux进程组的资源占用（内存、CPU）</li><li>为进程组制作 PID、UTS、IPC、网络、用户及装载命名空间</li></ul><h3 id="unionfs-union-文件系统" tabindex="-1"><a class="header-anchor" href="#unionfs-union-文件系统"><span>UnionFS(Union 文件系统)</span></a></h3><p>Union文件系统允许通过union装载来达到一个分层的积累变化。每个装载的文件系统表示前一个文件系统之后的变化集合，就像是一个diff。</p><h3 id="overlayfs" tabindex="-1"><a class="header-anchor" href="#overlayfs"><span>OverlayFS</span></a></h3><p>OverlayFS是一种和AUFS很类似的文件系统，与AUFS相比，OverlayFS有以下特性： 　　　1) 更简单地设计； 　　　2) 从3.18开始，就进入了Linux内核主线； 　　　3) 可能更快一些。</p><p><sub>因此，OverlayFS在Docker社区关注度提高很快，被很多人认为是AUFS的继承者。就像宣称的一样，OverlayFS还很年轻。所以，在生成环境使用它时，还是需要更加当心。</sub><sub>Docker的overlay存储驱动利用了很多OverlayFS特性来构建和管理镜像与容器的磁盘结构。</sub> ~自从Docker1.12起，Docker也支持overlay2存储驱动，相比于overlay来说，overlay2在inode优化上更加高效。但overlay2驱动只兼容Linux kernel4.0以上的版本。~</p><p>目前 docker 版本为 23，overlay2 为官方建议最优存储驱动。https://docs.docker.com/storage/storagedriver/select-storage-driver/</p><h2 id="docker-核心概念" tabindex="-1"><a class="header-anchor" href="#docker-核心概念"><span>Docker 核心概念</span></a></h2><h3 id="镜像" tabindex="-1"><a class="header-anchor" href="#镜像"><span>镜像</span></a></h3><p>Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p><p>Docker 通过 image 来分发转播。Docker 官方有维护的镜像仓库 <a href="https://hub.docker.com/" target="_blank" rel="noopener noreferrer">Docker Hub</a>,我们也可以搭建我们自己的镜像仓库，用来在企业内部使用。</p><p>镜像主要有如下特点：</p><ul><li>类似虚拟机的快照，但更轻量，非常非常轻量。</li><li>镜像拥有唯一ID，以及一个供人阅读的名字和标签对。</li><li>只读层被称为镜像，一个镜像是永久不会变的。</li><li>由于 Docker 使用一个统一文件系统，Docker 进程认为整个文件系统是以读写方式挂载的。 但是所有的变更都发生顶层的可写层，而下层的原始的只读镜像文件并未变化。由于镜像不可写，所以镜像是无状态的。</li></ul><h3 id="容器" tabindex="-1"><a class="header-anchor" href="#容器"><span>容器</span></a></h3><ul><li>你可以从镜像中创建容器，这等同于从快照中创建虚拟机，不过更轻量。</li><li>应用是由容器运行的。</li><li>拥有一个唯一ID和唯一的供人阅读的名字</li><li>Docker允许公开容器的特定端口。</li><li>容器被设计用来运行单进程，Docker设计者极力推崇“一个容器一个进程的方式”。</li><li>容器应该是短暂和一次性的。</li></ul><h3 id="数据卷" tabindex="-1"><a class="header-anchor" href="#数据卷"><span>数据卷</span></a></h3><ul><li>数据卷让你可以不受容器生命周期影响进行数据持久化。</li><li>它们表现为容器内的空间，但实际保存在容器之外，从而允许你在不影响数据的情况下销毁、重建、修改、丢弃容器。</li><li>Docker允许你定义应用部分和数据部分，并提供工具让你可以将它们分开。</li><li>使用Docker时必须做出的最大思维变化之一就是：<strong>容器应该是短暂和一次性的。</strong></li></ul><h3 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h3><ul><li>Docker允许你在创建一个新容器时引用其它现存容器，在你刚创建的容器里被引用的容器将获得一个（你指定的）别名。我们就说，这两个容器链接在了一起。</li></ul><p>如果DB容器已经在运行，我可以创建web服务器容器，并在创建时引用这个DB容器，给它一个别名，比如dbapp。在这个新建的web服务器容器里，我可以在任何时候使用主机名dbapp与DB容器进行通讯。</p><h2 id="docker-常用命令" tabindex="-1"><a class="header-anchor" href="#docker-常用命令"><span>docker 常用命令</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>1、 #从官网拉取镜像</span></span>
<span class="line"><span>docker pull &lt;镜像名:tag&gt;</span></span>
<span class="line"><span>如：docker pull centos(拉取centos的镜像到本机)</span></span>
<span class="line"><span>2、#搜索在线可用镜像名</span></span>
<span class="line"><span>docker search &lt;镜像名&gt;</span></span>
<span class="line"><span>如：docker search centos( 在线查找centos的镜像)</span></span>
<span class="line"><span>3、#查询所有的镜像，默认是最近创建的排在最上</span></span>
<span class="line"><span>docker images</span></span>
<span class="line"><span>4、#查看正在运行的容器</span></span>
<span class="line"><span>docker ps</span></span>
<span class="line"><span>5、#删除单个镜像</span></span>
<span class="line"><span>docker rmi -f &lt;镜像ID&gt;</span></span>
<span class="line"><span>docker rmi &lt;name&gt;:&lt;tag&gt;</span></span>
<span class="line"><span>6、#启动、停止操作</span></span>
<span class="line"><span>docker stop &lt;容器名or ID&gt; #停止某个容器 </span></span>
<span class="line"><span>docker start &lt;容器名or ID&gt; #启动某个容器 </span></span>
<span class="line"><span>docker kill &lt;容器名or ID&gt; #杀掉某个容器</span></span>
<span class="line"><span>7、#查询某个容器的所有操作记录。</span></span>
<span class="line"><span>docker logs {容器ID|容器名称} </span></span>
<span class="line"><span>8、# 制作镜像  使用以下命令，根据某个“容器 ID”来创建一个新的“镜像”：</span></span>
<span class="line"><span>docker commit 93639a83a38e  wsl/javaweb:0.1</span></span>
<span class="line"><span>9、#启动一个容器</span></span>
<span class="line"><span>docker run -d -p 58080:8080 --name javaweb wsl/javaweb:0.1 /root/run.sh</span></span>
<span class="line"><span>解释：-d：表示以“守护模式”执行/root/run.sh脚本</span></span>
<span class="line"><span>          -p：表示宿主机与容器的端口映射，此时将容器内部的 8080 端口映射为宿主机的 58080 端口，这样就向外界暴露了 58080 端口，可通过 Docker 网桥来访问容器内部的 8080 端口了。</span></span>
<span class="line"><span>          -name:为容器命名</span></span>
<span class="line"><span>命令行启动：</span></span>
<span class="line"><span>docker run -it --rm ubuntu:14.04 bash</span></span>
<span class="line"><span>docker run 就是运行容器的命令，具体格式我们会在后面的章节讲解，我们这里简要的说明一下上面用到的参数。</span></span>
<span class="line"><span>* -it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</span></span>
<span class="line"><span>* --rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 --rm 可以避免浪费空间。</span></span>
<span class="line"><span>* ubuntu:14.04：这是指用 ubuntu:14.04 镜像为基础来启动容器。</span></span>
<span class="line"><span>* bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>10、#最后补充一个启动docker服务的命令</span></span>
<span class="line"><span>很简单：</span></span>
<span class="line"><span>service docker start</span></span>
<span class="line"><span></span></span>
<span class="line"><span>11、删除容器</span></span>
<span class="line"><span>docker rm $(docker ps -a -q)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>12、进入后台运行的docker容器</span></span>
<span class="line"><span>docker attach 5ac094c371f5</span></span>
<span class="line"><span>docker exec -it liBlog-db bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker-其他知识点" tabindex="-1"><a class="header-anchor" href="#docker-其他知识点"><span>Docker 其他知识点</span></a></h2><h3 id="docker-for-mac-的安装路径" tabindex="-1"><a class="header-anchor" href="#docker-for-mac-的安装路径"><span>Docker for Mac 的安装路径</span></a></h3><p>/Users/{YourUserName}/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/Docker.qcow2</p><h3 id="docker镜像的可移植性" tabindex="-1"><a class="header-anchor" href="#docker镜像的可移植性"><span>Docker镜像的可移植性</span></a></h3><ul><li>Docker允许你在一个镜像中指定卷和端口。从这个镜像创建的容器继承了这些设置。但是，Docker不允许你在镜像上指定任何不可移植的内容。</li></ul><h3 id="docker-相关文档收集" tabindex="-1"><a class="header-anchor" href="#docker-相关文档收集"><span>docker 相关文档收集</span></a></h3><ul><li><a href="http://blog.csdn.net/wanglei_storage/article/details/50299491" target="_blank" rel="noopener noreferrer">images 保存路径 及说明</a></li><li><a href="http://blog.csdn.net/wanglei_storage/article/details/50299491" target="_blank" rel="noopener noreferrer">docker 镜像与容器存储目录结构精讲</a></li><li><a href="https://blog.csdn.net/zhangyifei216/article/details/50921215" target="_blank" rel="noopener noreferrer">深入理解Docker的link机制</a></li><li><a href="https://segmentfault.com/a/1190000009583997" target="_blank" rel="noopener noreferrer">docker运行nginx为什么要使用 daemon off</a></li><li><a href="https://blog.csdn.net/u010900754/article/details/78526443" target="_blank" rel="noopener noreferrer">CMD ENTRYPOINT 区别</a></li><li><a href="https://stackoverflow.com/questions/24319662/from-inside-of-a-docker-container-how-do-i-connect-to-the-localhost-of-the-mach/24326540%2324326540" target="_blank" rel="noopener noreferrer">容器如何连接宿主机服务（mysql）</a></li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://legacy.gitbook.com/book/yeasy/docker_practice/details" target="_blank" rel="noopener noreferrer">Docker 从入门到实战（第二版）</a></li><li><a href="http://dockone.io/article/133" target="_blank" rel="noopener noreferrer">docker终极指南</a></li><li><a href="http://www.infoq.com/cn/articles/docker-turns-3" target="_blank" rel="noopener noreferrer">Docker三年回顾：梦想依在，人生正当年</a></li></ul>`,59)])])}const o=a(i,[["render",l]]),t=JSON.parse('{"path":"/pages/d6dafb/","title":"Docker学习笔记（一）-- 基础知识","lang":"zh-CN","frontmatter":{"title":"Docker学习笔记（一）-- 基础知识","tags":["自动化运维","Docker"],"permalink":"/pages/d6dafb/","createTime":"2023/09/08 17:36:02","description":"最近几年Docker容器技术已经渗透到各技术领域，在自动化运维领域更胜，因为它对于代码的部署上可以说是革命性的。下面是我学习Docker，记录的一些笔记，方便日后回忆备查。 Docker 是什么 Docker 是一种轻量级的虚拟化技术，是一种Linux容器（Linux Containers，缩写为 LXC）技术的封装。 大多数人可能知道虚拟机，可以在一...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker学习笔记（一）-- 基础知识\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-30T08:57:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://pylixm.top/pages/d6dafb/"}],["meta",{"property":"og:site_name","content":"底层逻辑"}],["meta",{"property":"og:title","content":"Docker学习笔记（一）-- 基础知识"}],["meta",{"property":"og:description","content":"最近几年Docker容器技术已经渗透到各技术领域，在自动化运维领域更胜，因为它对于代码的部署上可以说是革命性的。下面是我学习Docker，记录的一些笔记，方便日后回忆备查。 Docker 是什么 Docker 是一种轻量级的虚拟化技术，是一种Linux容器（Linux Containers，缩写为 LXC）技术的封装。 大多数人可能知道虚拟机，可以在一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T08:57:49.000Z"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:tag","content":"自动化运维"}],["meta",{"property":"article:modified_time","content":"2025-09-30T08:57:49.000Z"}]]},"readingTime":{"minutes":8.54,"words":2561},"git":{"createdTime":1759222669000,"updatedTime":1759222669000,"contributors":[{"name":"pylixm","username":"pylixm","email":"pyli.xm@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/pylixm?v=4","url":"https://github.com/pylixm"}]},"autoDesc":true,"filePathRelative":"04.云原生/01.docker/01.Docker-basis.md","headers":[],"categoryList":[{"id":"e467f5","sort":4,"name":"云原生"},{"id":"219fa0","sort":1,"name":"docker"}]}');export{o as comp,t as data};
